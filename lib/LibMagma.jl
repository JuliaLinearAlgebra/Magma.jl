to_c_type(t::Type) = t
to_c_type_pairs(va_list) = map(enumerate(to_c_type.(va_list))) do (ind, type)
    :(va_list[$ind]::$type)
end

const magma_int_t = Int64

"""
MIC and CUDA use regular pointers on GPU
"""
const magma_ptr = Ptr{Cvoid}

"""
opaque queue structure
"""
magma_queue = Cvoid

const magma_queue_t = PtrOrCuPtr{magma_queue}

"""
    magma_setvector_internal(n, elemSize, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
void magma_setvector_internal( magma_int_t n, magma_int_t elemSize, const void *hx_src, magma_int_t incx, magma_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_setvector_internal(n, elemSize, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_setvector_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cvoid}, magma_int_t, magma_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, elemSize, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

const magma_const_ptr = Ptr{Cvoid}

"""
    magma_getvector_internal(n, elemSize, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
void magma_getvector_internal( magma_int_t n, magma_int_t elemSize, magma_const_ptr dx_src, magma_int_t incx, void *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_getvector_internal(n, elemSize, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_getvector_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_const_ptr, magma_int_t, Ptr{Cvoid}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, elemSize, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_copyvector_internal(n, elemSize, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
void magma_copyvector_internal( magma_int_t n, magma_int_t elemSize, magma_const_ptr dx_src, magma_int_t incx, magma_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_copyvector_internal(n, elemSize, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_copyvector_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_const_ptr, magma_int_t, magma_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, elemSize, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_setvector_async_internal(n, elemSize, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
void magma_setvector_async_internal( magma_int_t n, magma_int_t elemSize, const void *hx_src, magma_int_t incx, magma_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_setvector_async_internal(n, elemSize, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_setvector_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cvoid}, magma_int_t, magma_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, elemSize, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_getvector_async_internal(n, elemSize, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
void magma_getvector_async_internal( magma_int_t n, magma_int_t elemSize, magma_const_ptr dx_src, magma_int_t incx, void *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_getvector_async_internal(n, elemSize, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_getvector_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_const_ptr, magma_int_t, Ptr{Cvoid}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, elemSize, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_copyvector_async_internal(n, elemSize, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
void magma_copyvector_async_internal( magma_int_t n, magma_int_t elemSize, magma_const_ptr dx_src, magma_int_t incx, magma_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_copyvector_async_internal(n, elemSize, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_copyvector_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_const_ptr, magma_int_t, magma_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, elemSize, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_setmatrix_internal(m, n, elemSize, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
void magma_setmatrix_internal( magma_int_t m, magma_int_t n, magma_int_t elemSize, const void *hA_src, magma_int_t lda, magma_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_setmatrix_internal(m, n, elemSize, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_setmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cvoid}, magma_int_t, magma_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, elemSize, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_getmatrix_internal(m, n, elemSize, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
void magma_getmatrix_internal( magma_int_t m, magma_int_t n, magma_int_t elemSize, magma_const_ptr dA_src, magma_int_t ldda, void *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_getmatrix_internal(m, n, elemSize, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_getmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_const_ptr, magma_int_t, Ptr{Cvoid}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, elemSize, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_copymatrix_internal(m, n, elemSize, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
void magma_copymatrix_internal( magma_int_t m, magma_int_t n, magma_int_t elemSize, magma_const_ptr dA_src, magma_int_t ldda, magma_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_copymatrix_internal(m, n, elemSize, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_copymatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_const_ptr, magma_int_t, magma_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, elemSize, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_setmatrix_async_internal(m, n, elemSize, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
void magma_setmatrix_async_internal( magma_int_t m, magma_int_t n, magma_int_t elemSize, const void *hA_src, magma_int_t lda, magma_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_setmatrix_async_internal(m, n, elemSize, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_setmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cvoid}, magma_int_t, magma_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, elemSize, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_getmatrix_async_internal(m, n, elemSize, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
void magma_getmatrix_async_internal( magma_int_t m, magma_int_t n, magma_int_t elemSize, magma_const_ptr dA_src, magma_int_t ldda, void *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_getmatrix_async_internal(m, n, elemSize, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_getmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_const_ptr, magma_int_t, Ptr{Cvoid}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, elemSize, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_copymatrix_async_internal(m, n, elemSize, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
void magma_copymatrix_async_internal( magma_int_t m, magma_int_t n, magma_int_t elemSize, magma_const_ptr dA_src, magma_int_t ldda, magma_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_copymatrix_async_internal(m, n, elemSize, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_copymatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_const_ptr, magma_int_t, magma_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, elemSize, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

const magmaInt_ptr = Ptr{magma_int_t}

"""
    magma_isetvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_isetvector_internal( magma_int_t n, const magma_int_t *hx_src, magma_int_t incx, magmaInt_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_isetvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_isetvector_internal, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, magma_int_t, magmaInt_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

const magmaInt_const_ptr = Ptr{magma_int_t}

"""
    magma_igetvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_igetvector_internal( magma_int_t n, magmaInt_const_ptr dx_src, magma_int_t incx, magma_int_t *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_igetvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_igetvector_internal, libmagma), Cvoid, (magma_int_t, magmaInt_const_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_icopyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_icopyvector_internal( magma_int_t n, magmaInt_const_ptr dx_src, magma_int_t incx, magmaInt_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_icopyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_icopyvector_internal, libmagma), Cvoid, (magma_int_t, magmaInt_const_ptr, magma_int_t, magmaInt_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_isetvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_isetvector_async_internal( magma_int_t n, const magma_int_t *hx_src, magma_int_t incx, magmaInt_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_isetvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_isetvector_async_internal, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, magma_int_t, magmaInt_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_igetvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_igetvector_async_internal( magma_int_t n, magmaInt_const_ptr dx_src, magma_int_t incx, magma_int_t *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_igetvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_igetvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaInt_const_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_icopyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_icopyvector_async_internal( magma_int_t n, magmaInt_const_ptr dx_src, magma_int_t incx, magmaInt_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_icopyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_icopyvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaInt_const_ptr, magma_int_t, magmaInt_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_isetmatrix_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_isetmatrix_internal( magma_int_t m, magma_int_t n, const magma_int_t *hA_src, magma_int_t lda, magmaInt_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_isetmatrix_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_isetmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magmaInt_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_igetmatrix_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
static inline void magma_igetmatrix_internal( magma_int_t m, magma_int_t n, magmaInt_const_ptr dA_src, magma_int_t ldda, magma_int_t *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_igetmatrix_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_igetmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaInt_const_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_icopymatrix_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_icopymatrix_internal( magma_int_t m, magma_int_t n, magmaInt_const_ptr dA_src, magma_int_t ldda, magmaInt_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_icopymatrix_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_icopymatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaInt_const_ptr, magma_int_t, magmaInt_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_isetmatrix_async_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_isetmatrix_async_internal( magma_int_t m, magma_int_t n, const magma_int_t *hA_src, magma_int_t lda, magmaInt_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_isetmatrix_async_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_isetmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magmaInt_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_igetmatrix_async_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
static inline void magma_igetmatrix_async_internal( magma_int_t m, magma_int_t n, magmaInt_const_ptr dA_src, magma_int_t ldda, magma_int_t *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_igetmatrix_async_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_igetmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaInt_const_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_icopymatrix_async_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_icopymatrix_async_internal( magma_int_t m, magma_int_t n, magmaInt_const_ptr dA_src, magma_int_t ldda, magmaInt_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_icopymatrix_async_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_icopymatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaInt_const_ptr, magma_int_t, magmaInt_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

const magma_index_t = Cint

const magmaIndex_ptr = Ptr{magma_index_t}

"""
    magma_index_setvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_index_setvector_internal( magma_int_t n, const magma_index_t *hx_src, magma_int_t incx, magmaIndex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_index_setvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_index_setvector_internal, libmagma), Cvoid, (magma_int_t, Ptr{magma_index_t}, magma_int_t, magmaIndex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

const magmaIndex_const_ptr = Ptr{magma_index_t}

"""
    magma_index_getvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_index_getvector_internal( magma_int_t n, magmaIndex_const_ptr dx_src, magma_int_t incx, magma_index_t *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_index_getvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_index_getvector_internal, libmagma), Cvoid, (magma_int_t, magmaIndex_const_ptr, magma_int_t, Ptr{magma_index_t}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_index_copyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_index_copyvector_internal( magma_int_t n, magmaIndex_const_ptr dx_src, magma_int_t incx, magmaIndex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_index_copyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_index_copyvector_internal, libmagma), Cvoid, (magma_int_t, magmaIndex_const_ptr, magma_int_t, magmaIndex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_index_setvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_index_setvector_async_internal( magma_int_t n, const magma_index_t *hx_src, magma_int_t incx, magmaIndex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_index_setvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_index_setvector_async_internal, libmagma), Cvoid, (magma_int_t, Ptr{magma_index_t}, magma_int_t, magmaIndex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_index_getvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_index_getvector_async_internal( magma_int_t n, magmaIndex_const_ptr dx_src, magma_int_t incx, magma_index_t *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_index_getvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_index_getvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaIndex_const_ptr, magma_int_t, Ptr{magma_index_t}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_index_copyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_index_copyvector_async_internal( magma_int_t n, magmaIndex_const_ptr dx_src, magma_int_t incx, magmaIndex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_index_copyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_index_copyvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaIndex_const_ptr, magma_int_t, magmaIndex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

const magma_uindex_t = Cuint

const magmaUIndex_ptr = Ptr{magma_uindex_t}

"""
    magma_uindex_setvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_uindex_setvector_internal( magma_int_t n, const magma_uindex_t *hx_src, magma_int_t incx, magmaUIndex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_uindex_setvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_uindex_setvector_internal, libmagma), Cvoid, (magma_int_t, Ptr{magma_uindex_t}, magma_int_t, magmaUIndex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

const magmaUIndex_const_ptr = Ptr{magma_uindex_t}

"""
    magma_uindex_getvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_uindex_getvector_internal( magma_int_t n, magmaUIndex_const_ptr dx_src, magma_int_t incx, magma_uindex_t *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_uindex_getvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_uindex_getvector_internal, libmagma), Cvoid, (magma_int_t, magmaUIndex_const_ptr, magma_int_t, Ptr{magma_uindex_t}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_uindex_copyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_uindex_copyvector_internal( magma_int_t n, magmaUIndex_const_ptr dx_src, magma_int_t incx, magmaUIndex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_uindex_copyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_uindex_copyvector_internal, libmagma), Cvoid, (magma_int_t, magmaUIndex_const_ptr, magma_int_t, magmaUIndex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_uindex_setvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_uindex_setvector_async_internal( magma_int_t n, const magma_uindex_t *hx_src, magma_int_t incx, magmaUIndex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_uindex_setvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_uindex_setvector_async_internal, libmagma), Cvoid, (magma_int_t, Ptr{magma_uindex_t}, magma_int_t, magmaUIndex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_uindex_getvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_uindex_getvector_async_internal( magma_int_t n, magmaUIndex_const_ptr dx_src, magma_int_t incx, magma_uindex_t *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_uindex_getvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_uindex_getvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaUIndex_const_ptr, magma_int_t, Ptr{magma_uindex_t}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_uindex_copyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_uindex_copyvector_async_internal( magma_int_t n, magmaUIndex_const_ptr dx_src, magma_int_t incx, magmaUIndex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_uindex_copyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_uindex_copyvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaUIndex_const_ptr, magma_int_t, magmaUIndex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_index_setmatrix_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_index_setmatrix_internal( magma_int_t m, magma_int_t n, const magma_index_t *hA_src, magma_int_t lda, magmaIndex_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_index_setmatrix_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_index_setmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magma_index_t}, magma_int_t, magmaIndex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_index_getmatrix_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
static inline void magma_index_getmatrix_internal( magma_int_t m, magma_int_t n, magmaIndex_const_ptr dA_src, magma_int_t ldda, magma_index_t *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_index_getmatrix_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_index_getmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaIndex_const_ptr, magma_int_t, Ptr{magma_index_t}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_index_copymatrix_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_index_copymatrix_internal( magma_int_t m, magma_int_t n, magmaIndex_const_ptr dA_src, magma_int_t ldda, magmaIndex_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_index_copymatrix_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_index_copymatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaIndex_const_ptr, magma_int_t, magmaIndex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_index_setmatrix_async_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_index_setmatrix_async_internal( magma_int_t m, magma_int_t n, const magma_index_t *hA_src, magma_int_t lda, magmaIndex_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_index_setmatrix_async_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_index_setmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magma_index_t}, magma_int_t, magmaIndex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_index_getmatrix_async_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
static inline void magma_index_getmatrix_async_internal( magma_int_t m, magma_int_t n, magmaIndex_const_ptr dA_src, magma_int_t ldda, magma_index_t *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_index_getmatrix_async_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_index_getmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaIndex_const_ptr, magma_int_t, Ptr{magma_index_t}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_index_copymatrix_async_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_index_copymatrix_async_internal( magma_int_t m, magma_int_t n, magmaIndex_const_ptr dA_src, magma_int_t ldda, magmaIndex_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_index_copymatrix_async_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_index_copymatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaIndex_const_ptr, magma_int_t, magmaIndex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

const magmaDoubleComplex = Cint

const magmaDoubleComplex_ptr = PtrOrCuPtr{magmaDoubleComplex}

"""
    magma_zsetvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_zsetvector_internal( magma_int_t n, magmaDoubleComplex const *hx_src, magma_int_t incx, magmaDoubleComplex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_zsetvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_zsetvector_internal, libmagma), Cvoid, (magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

const magmaDoubleComplex_const_ptr = PtrOrCuPtr{magmaDoubleComplex}

"""
    magma_zgetvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_zgetvector_internal( magma_int_t n, magmaDoubleComplex_const_ptr dx_src, magma_int_t incx, magmaDoubleComplex *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_zgetvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_zgetvector_internal, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_zcopyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_zcopyvector_internal( magma_int_t n, magmaDoubleComplex_const_ptr dx_src, magma_int_t incx, magmaDoubleComplex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_zcopyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_zcopyvector_internal, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_zsetvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_zsetvector_async_internal( magma_int_t n, magmaDoubleComplex const *hx_src, magma_int_t incx, magmaDoubleComplex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_zsetvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_zsetvector_async_internal, libmagma), Cvoid, (magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_zgetvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_zgetvector_async_internal( magma_int_t n, magmaDoubleComplex_const_ptr dx_src, magma_int_t incx, magmaDoubleComplex *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_zgetvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_zgetvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_zcopyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_zcopyvector_async_internal( magma_int_t n, magmaDoubleComplex_const_ptr dx_src, magma_int_t incx, magmaDoubleComplex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_zcopyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_zcopyvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_zsetmatrix_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_zsetmatrix_internal( magma_int_t m, magma_int_t n, magmaDoubleComplex const *hA_src, magma_int_t lda, magmaDoubleComplex_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_zsetmatrix_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_zsetmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_zgetmatrix_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
static inline void magma_zgetmatrix_internal( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dA_src, magma_int_t ldda, magmaDoubleComplex *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_zgetmatrix_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_zgetmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_zcopymatrix_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_zcopymatrix_internal( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dA_src, magma_int_t ldda, magmaDoubleComplex_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_zcopymatrix_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_zcopymatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_zsetmatrix_async_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_zsetmatrix_async_internal( magma_int_t m, magma_int_t n, magmaDoubleComplex const *hA_src, magma_int_t lda, magmaDoubleComplex_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_zsetmatrix_async_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_zsetmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_zgetmatrix_async_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
static inline void magma_zgetmatrix_async_internal( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dA_src, magma_int_t ldda, magmaDoubleComplex *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_zgetmatrix_async_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_zgetmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_zcopymatrix_async_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_zcopymatrix_async_internal( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dA_src, magma_int_t ldda, magmaDoubleComplex_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_zcopymatrix_async_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_zcopymatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

const magmaFloatComplex = Cint

const magmaFloatComplex_ptr = PtrOrCuPtr{magmaFloatComplex}

"""
    magma_csetvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_csetvector_internal( magma_int_t n, magmaFloatComplex const *hx_src, magma_int_t incx, magmaFloatComplex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_csetvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_csetvector_internal, libmagma), Cvoid, (magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

const magmaFloatComplex_const_ptr = PtrOrCuPtr{magmaFloatComplex}

"""
    magma_cgetvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_cgetvector_internal( magma_int_t n, magmaFloatComplex_const_ptr dx_src, magma_int_t incx, magmaFloatComplex *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_cgetvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_cgetvector_internal, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_ccopyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_ccopyvector_internal( magma_int_t n, magmaFloatComplex_const_ptr dx_src, magma_int_t incx, magmaFloatComplex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_ccopyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_ccopyvector_internal, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_csetvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_csetvector_async_internal( magma_int_t n, magmaFloatComplex const *hx_src, magma_int_t incx, magmaFloatComplex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_csetvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_csetvector_async_internal, libmagma), Cvoid, (magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_cgetvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_cgetvector_async_internal( magma_int_t n, magmaFloatComplex_const_ptr dx_src, magma_int_t incx, magmaFloatComplex *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_cgetvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_cgetvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_ccopyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_ccopyvector_async_internal( magma_int_t n, magmaFloatComplex_const_ptr dx_src, magma_int_t incx, magmaFloatComplex_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_ccopyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_ccopyvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_csetmatrix_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_csetmatrix_internal( magma_int_t m, magma_int_t n, magmaFloatComplex const *hA_src, magma_int_t lda, magmaFloatComplex_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_csetmatrix_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_csetmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_cgetmatrix_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
static inline void magma_cgetmatrix_internal( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dA_src, magma_int_t ldda, magmaFloatComplex *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_cgetmatrix_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_cgetmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_ccopymatrix_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_ccopymatrix_internal( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dA_src, magma_int_t ldda, magmaFloatComplex_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_ccopymatrix_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_ccopymatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_csetmatrix_async_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_csetmatrix_async_internal( magma_int_t m, magma_int_t n, magmaFloatComplex const *hA_src, magma_int_t lda, magmaFloatComplex_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_csetmatrix_async_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_csetmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_cgetmatrix_async_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
static inline void magma_cgetmatrix_async_internal( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dA_src, magma_int_t ldda, magmaFloatComplex *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_cgetmatrix_async_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_cgetmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_ccopymatrix_async_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_ccopymatrix_async_internal( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dA_src, magma_int_t ldda, magmaFloatComplex_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_ccopymatrix_async_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_ccopymatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

const magmaDouble_ptr = PtrOrCuPtr{Cdouble}

"""
    magma_dsetvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_dsetvector_internal( magma_int_t n, double const *hx_src, magma_int_t incx, magmaDouble_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_dsetvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_dsetvector_internal, libmagma), Cvoid, (magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

const magmaDouble_const_ptr = PtrOrCuPtr{Cdouble}

"""
    magma_dgetvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_dgetvector_internal( magma_int_t n, magmaDouble_const_ptr dx_src, magma_int_t incx, double *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_dgetvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_dgetvector_internal, libmagma), Cvoid, (magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_dcopyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_dcopyvector_internal( magma_int_t n, magmaDouble_const_ptr dx_src, magma_int_t incx, magmaDouble_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_dcopyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_dcopyvector_internal, libmagma), Cvoid, (magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_dsetvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_dsetvector_async_internal( magma_int_t n, double const *hx_src, magma_int_t incx, magmaDouble_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_dsetvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_dsetvector_async_internal, libmagma), Cvoid, (magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_dgetvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_dgetvector_async_internal( magma_int_t n, magmaDouble_const_ptr dx_src, magma_int_t incx, double *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_dgetvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_dgetvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_dcopyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_dcopyvector_async_internal( magma_int_t n, magmaDouble_const_ptr dx_src, magma_int_t incx, magmaDouble_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_dcopyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_dcopyvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_dsetmatrix_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_dsetmatrix_internal( magma_int_t m, magma_int_t n, double const *hA_src, magma_int_t lda, magmaDouble_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_dsetmatrix_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_dsetmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_dgetmatrix_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
static inline void magma_dgetmatrix_internal( magma_int_t m, magma_int_t n, magmaDouble_const_ptr dA_src, magma_int_t ldda, double *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_dgetmatrix_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_dgetmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_dcopymatrix_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_dcopymatrix_internal( magma_int_t m, magma_int_t n, magmaDouble_const_ptr dA_src, magma_int_t ldda, magmaDouble_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_dcopymatrix_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_dcopymatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_dsetmatrix_async_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_dsetmatrix_async_internal( magma_int_t m, magma_int_t n, double const *hA_src, magma_int_t lda, magmaDouble_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_dsetmatrix_async_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_dsetmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_dgetmatrix_async_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
static inline void magma_dgetmatrix_async_internal( magma_int_t m, magma_int_t n, magmaDouble_const_ptr dA_src, magma_int_t ldda, double *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_dgetmatrix_async_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_dgetmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_dcopymatrix_async_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_dcopymatrix_async_internal( magma_int_t m, magma_int_t n, magmaDouble_const_ptr dA_src, magma_int_t ldda, magmaDouble_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_dcopymatrix_async_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_dcopymatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

const magmaFloat_ptr = PtrOrCuPtr{Cfloat}

"""
    magma_ssetvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_ssetvector_internal( magma_int_t n, float const *hx_src, magma_int_t incx, magmaFloat_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_ssetvector_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_ssetvector_internal, libmagma), Cvoid, (magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

const magmaFloat_const_ptr = PtrOrCuPtr{Cfloat}

"""
    magma_sgetvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_sgetvector_internal( magma_int_t n, magmaFloat_const_ptr dx_src, magma_int_t incx, float *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_sgetvector_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_sgetvector_internal, libmagma), Cvoid, (magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_scopyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_scopyvector_internal( magma_int_t n, magmaFloat_const_ptr dx_src, magma_int_t incx, magmaFloat_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_scopyvector_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_scopyvector_internal, libmagma), Cvoid, (magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_ssetvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_ssetvector_async_internal( magma_int_t n, float const *hx_src, magma_int_t incx, magmaFloat_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_ssetvector_async_internal(n, hx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_ssetvector_async_internal, libmagma), Cvoid, (magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_sgetvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_sgetvector_async_internal( magma_int_t n, magmaFloat_const_ptr dx_src, magma_int_t incx, float *hy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_sgetvector_async_internal(n, dx_src, incx, hy_dst, incy, queue, func, file, line)
    ccall((:magma_sgetvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, queue, func, file, line)
end

"""
    magma_scopyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)


### Prototype
```c
static inline void magma_scopyvector_async_internal( magma_int_t n, magmaFloat_const_ptr dx_src, magma_int_t incx, magmaFloat_ptr dy_dst, magma_int_t incy, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_scopyvector_async_internal(n, dx_src, incx, dy_dst, incy, queue, func, file, line)
    ccall((:magma_scopyvector_async_internal, libmagma), Cvoid, (magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, queue, func, file, line)
end

"""
    magma_ssetmatrix_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_ssetmatrix_internal( magma_int_t m, magma_int_t n, float const *hA_src, magma_int_t lda, magmaFloat_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_ssetmatrix_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_ssetmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_sgetmatrix_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
static inline void magma_sgetmatrix_internal( magma_int_t m, magma_int_t n, magmaFloat_const_ptr dA_src, magma_int_t ldda, float *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_sgetmatrix_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_sgetmatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_scopymatrix_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_scopymatrix_internal( magma_int_t m, magma_int_t n, magmaFloat_const_ptr dA_src, magma_int_t ldda, magmaFloat_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_scopymatrix_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_scopymatrix_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_ssetmatrix_async_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_ssetmatrix_async_internal( magma_int_t m, magma_int_t n, float const *hA_src, magma_int_t lda, magmaFloat_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_ssetmatrix_async_internal(m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_ssetmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_sgetmatrix_async_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)


### Prototype
```c
static inline void magma_sgetmatrix_async_internal( magma_int_t m, magma_int_t n, magmaFloat_const_ptr dA_src, magma_int_t ldda, float *hB_dst, magma_int_t ldb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_sgetmatrix_async_internal(m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
    ccall((:magma_sgetmatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, queue, func, file, line)
end

"""
    magma_scopymatrix_async_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)


### Prototype
```c
static inline void magma_scopymatrix_async_internal( magma_int_t m, magma_int_t n, magmaFloat_const_ptr dA_src, magma_int_t ldda, magmaFloat_ptr dB_dst, magma_int_t lddb, magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_scopymatrix_async_internal(m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
    ccall((:magma_scopymatrix_async_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, queue, func, file, line)
end

"""
    magma_free_internal(ptr, func, file, line)


### Prototype
```c
magma_int_t magma_free_internal( magma_ptr ptr, const char* func, const char* file, int line );
```
"""
function magma_free_internal(ptr, func, file, line)
    ccall((:magma_free_internal, libmagma), magma_int_t, (magma_ptr, Ptr{Cchar}, Ptr{Cchar}, Cint), ptr, func, file, line)
end

"""
    magma_free_pinned_internal(ptr, func, file, line)


### Prototype
```c
magma_int_t magma_free_pinned_internal( void *ptr, const char* func, const char* file, int line );
```
"""
function magma_free_pinned_internal(ptr, func, file, line)
    ccall((:magma_free_pinned_internal, libmagma), magma_int_t, (Ptr{Cvoid}, Ptr{Cchar}, Ptr{Cchar}, Cint), ptr, func, file, line)
end

const magma_device_t = magma_int_t

"""
    magma_queue_create_internal(device, queue_ptr, func, file, line)


### Prototype
```c
void magma_queue_create_internal( magma_device_t device, magma_queue_t* queue_ptr, const char* func, const char* file, int line );
```
"""
function magma_queue_create_internal(device, queue_ptr, func, file, line)
    ccall((:magma_queue_create_internal, libmagma), Cvoid, (magma_device_t, Ptr{magma_queue_t}, Ptr{Cchar}, Ptr{Cchar}, Cint), device, queue_ptr, func, file, line)
end

"""
    magma_queue_create_from_cuda_internal(device, stream, cublas, cusparse, queue_ptr, func, file, line)


### Prototype
```c
void magma_queue_create_from_cuda_internal( magma_device_t device, cudaStream_t stream, cublasHandle_t cublas, cusparseHandle_t cusparse, magma_queue_t* queue_ptr, const char* func, const char* file, int line );
```
"""
function magma_queue_create_from_cuda_internal(device, stream, cublas, cusparse, queue_ptr, func, file, line)
    ccall((:magma_queue_create_from_cuda_internal, libmagma), Cvoid, (magma_device_t, Cint, Cint, Cint, Ptr{magma_queue_t}, Ptr{Cchar}, Ptr{Cchar}, Cint), device, stream, cublas, cusparse, queue_ptr, func, file, line)
end

"""
    magma_queue_destroy_internal(queue, func, file, line)


### Prototype
```c
void magma_queue_destroy_internal( magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_queue_destroy_internal(queue, func, file, line)
    ccall((:magma_queue_destroy_internal, libmagma), Cvoid, (magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), queue, func, file, line)
end

"""
    magma_queue_sync_internal(queue, func, file, line)


### Prototype
```c
void magma_queue_sync_internal( magma_queue_t queue, const char* func, const char* file, int line );
```
"""
function magma_queue_sync_internal(queue, func, file, line)
    ccall((:magma_queue_sync_internal, libmagma), Cvoid, (magma_queue_t, Ptr{Cchar}, Ptr{Cchar}, Cint), queue, func, file, line)
end

"""
    magma_setvector_v1_internal(n, elemSize, hx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
void magma_setvector_v1_internal( magma_int_t n, magma_int_t elemSize, const void *hx_src, magma_int_t incx, magma_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_setvector_v1_internal(n, elemSize, hx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_setvector_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cvoid}, magma_int_t, magma_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, elemSize, hx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_getvector_v1_internal(n, elemSize, dx_src, incx, hy_dst, incy, func, file, line)


### Prototype
```c
void magma_getvector_v1_internal( magma_int_t n, magma_int_t elemSize, magma_const_ptr dx_src, magma_int_t incx, void *hy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_getvector_v1_internal(n, elemSize, dx_src, incx, hy_dst, incy, func, file, line)
    ccall((:magma_getvector_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_const_ptr, magma_int_t, Ptr{Cvoid}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, elemSize, dx_src, incx, hy_dst, incy, func, file, line)
end

"""
    magma_copyvector_v1_internal(n, elemSize, dx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
void magma_copyvector_v1_internal( magma_int_t n, magma_int_t elemSize, magma_const_ptr dx_src, magma_int_t incx, magma_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_copyvector_v1_internal(n, elemSize, dx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_copyvector_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_const_ptr, magma_int_t, magma_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, elemSize, dx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_setmatrix_v1_internal(m, n, elemSize, hA_src, lda, dB_dst, lddb, func, file, line)


### Prototype
```c
void magma_setmatrix_v1_internal( magma_int_t m, magma_int_t n, magma_int_t elemSize, const void *hA_src, magma_int_t lda, magma_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_setmatrix_v1_internal(m, n, elemSize, hA_src, lda, dB_dst, lddb, func, file, line)
    ccall((:magma_setmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cvoid}, magma_int_t, magma_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, elemSize, hA_src, lda, dB_dst, lddb, func, file, line)
end

"""
    magma_getmatrix_v1_internal(m, n, elemSize, dA_src, ldda, hB_dst, ldb, func, file, line)


### Prototype
```c
void magma_getmatrix_v1_internal( magma_int_t m, magma_int_t n, magma_int_t elemSize, magma_const_ptr dA_src, magma_int_t ldda, void *hB_dst, magma_int_t ldb, const char* func, const char* file, int line );
```
"""
function magma_getmatrix_v1_internal(m, n, elemSize, dA_src, ldda, hB_dst, ldb, func, file, line)
    ccall((:magma_getmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_const_ptr, magma_int_t, Ptr{Cvoid}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, elemSize, dA_src, ldda, hB_dst, ldb, func, file, line)
end

"""
    magma_copymatrix_v1_internal(m, n, elemSize, dA_src, ldda, dB_dst, lddb, func, file, line)


### Prototype
```c
void magma_copymatrix_v1_internal( magma_int_t m, magma_int_t n, magma_int_t elemSize, magma_const_ptr dA_src, magma_int_t ldda, magma_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_copymatrix_v1_internal(m, n, elemSize, dA_src, ldda, dB_dst, lddb, func, file, line)
    ccall((:magma_copymatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_const_ptr, magma_int_t, magma_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, elemSize, dA_src, ldda, dB_dst, lddb, func, file, line)
end

"""
    magma_isetvector_v1_internal(n, hx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_isetvector_v1_internal( magma_int_t n, const magma_int_t *hx_src, magma_int_t incx, magmaInt_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_isetvector_v1_internal(n, hx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_isetvector_v1_internal, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, magma_int_t, magmaInt_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_igetvector_v1_internal(n, dx_src, incx, hy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_igetvector_v1_internal( magma_int_t n, magmaInt_const_ptr dx_src, magma_int_t incx, magma_int_t *hy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_igetvector_v1_internal(n, dx_src, incx, hy_dst, incy, func, file, line)
    ccall((:magma_igetvector_v1_internal, libmagma), Cvoid, (magma_int_t, magmaInt_const_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, func, file, line)
end

"""
    magma_icopyvector_v1_internal(n, dx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_icopyvector_v1_internal( magma_int_t n, magmaInt_const_ptr dx_src, magma_int_t incx, magmaInt_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_icopyvector_v1_internal(n, dx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_icopyvector_v1_internal, libmagma), Cvoid, (magma_int_t, magmaInt_const_ptr, magma_int_t, magmaInt_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_isetmatrix_v1_internal(m, n, hA_src, lda, dB_dst, lddb, func, file, line)


### Prototype
```c
static inline void magma_isetmatrix_v1_internal( magma_int_t m, magma_int_t n, const magma_int_t *hA_src, magma_int_t lda, magmaInt_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_isetmatrix_v1_internal(m, n, hA_src, lda, dB_dst, lddb, func, file, line)
    ccall((:magma_isetmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magmaInt_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, func, file, line)
end

"""
    magma_igetmatrix_v1_internal(m, n, dA_src, ldda, hB_dst, ldb, func, file, line)


### Prototype
```c
static inline void magma_igetmatrix_v1_internal( magma_int_t m, magma_int_t n, magmaInt_const_ptr dA_src, magma_int_t ldda, magma_int_t *hB_dst, magma_int_t ldb, const char* func, const char* file, int line );
```
"""
function magma_igetmatrix_v1_internal(m, n, dA_src, ldda, hB_dst, ldb, func, file, line)
    ccall((:magma_igetmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaInt_const_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, func, file, line)
end

"""
    magma_icopymatrix_v1_internal(m, n, dA_src, ldda, dB_dst, lddb, func, file, line)


### Prototype
```c
static inline void magma_icopymatrix_v1_internal( magma_int_t m, magma_int_t n, magmaInt_const_ptr dA_src, magma_int_t ldda, magmaInt_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_icopymatrix_v1_internal(m, n, dA_src, ldda, dB_dst, lddb, func, file, line)
    ccall((:magma_icopymatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaInt_const_ptr, magma_int_t, magmaInt_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, func, file, line)
end

"""
    magma_index_setvector_v1_internal(n, hx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_index_setvector_v1_internal( magma_int_t n, const magma_index_t *hx_src, magma_int_t incx, magmaIndex_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_index_setvector_v1_internal(n, hx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_index_setvector_v1_internal, libmagma), Cvoid, (magma_int_t, Ptr{magma_index_t}, magma_int_t, magmaIndex_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_index_getvector_v1_internal(n, dx_src, incx, hy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_index_getvector_v1_internal( magma_int_t n, magmaIndex_const_ptr dx_src, magma_int_t incx, magma_index_t *hy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_index_getvector_v1_internal(n, dx_src, incx, hy_dst, incy, func, file, line)
    ccall((:magma_index_getvector_v1_internal, libmagma), Cvoid, (magma_int_t, magmaIndex_const_ptr, magma_int_t, Ptr{magma_index_t}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, func, file, line)
end

"""
    magma_index_copyvector_v1_internal(n, dx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_index_copyvector_v1_internal( magma_int_t n, magmaIndex_const_ptr dx_src, magma_int_t incx, magmaIndex_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_index_copyvector_v1_internal(n, dx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_index_copyvector_v1_internal, libmagma), Cvoid, (magma_int_t, magmaIndex_const_ptr, magma_int_t, magmaIndex_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_index_setmatrix_v1_internal(m, n, hA_src, lda, dB_dst, lddb, func, file, line)


### Prototype
```c
static inline void magma_index_setmatrix_v1_internal( magma_int_t m, magma_int_t n, const magma_index_t *hA_src, magma_int_t lda, magmaIndex_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_index_setmatrix_v1_internal(m, n, hA_src, lda, dB_dst, lddb, func, file, line)
    ccall((:magma_index_setmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magma_index_t}, magma_int_t, magmaIndex_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, func, file, line)
end

"""
    magma_index_getmatrix_v1_internal(m, n, dA_src, ldda, hB_dst, ldb, func, file, line)


### Prototype
```c
static inline void magma_index_getmatrix_v1_internal( magma_int_t m, magma_int_t n, magmaIndex_const_ptr dA_src, magma_int_t ldda, magma_index_t *hB_dst, magma_int_t ldb, const char* func, const char* file, int line );
```
"""
function magma_index_getmatrix_v1_internal(m, n, dA_src, ldda, hB_dst, ldb, func, file, line)
    ccall((:magma_index_getmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaIndex_const_ptr, magma_int_t, Ptr{magma_index_t}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, func, file, line)
end

"""
    magma_index_copymatrix_v1_internal(m, n, dA_src, ldda, dB_dst, lddb, func, file, line)


### Prototype
```c
static inline void magma_index_copymatrix_v1_internal( magma_int_t m, magma_int_t n, magmaIndex_const_ptr dA_src, magma_int_t ldda, magmaIndex_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_index_copymatrix_v1_internal(m, n, dA_src, ldda, dB_dst, lddb, func, file, line)
    ccall((:magma_index_copymatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaIndex_const_ptr, magma_int_t, magmaIndex_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, func, file, line)
end

"""
    magma_zsetvector_v1_internal(n, hx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_zsetvector_v1_internal( magma_int_t n, magmaDoubleComplex const *hx_src, magma_int_t incx, magmaDoubleComplex_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_zsetvector_v1_internal(n, hx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_zsetvector_v1_internal, libmagma), Cvoid, (magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_zgetvector_v1_internal(n, dx_src, incx, hy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_zgetvector_v1_internal( magma_int_t n, magmaDoubleComplex_const_ptr dx_src, magma_int_t incx, magmaDoubleComplex *hy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_zgetvector_v1_internal(n, dx_src, incx, hy_dst, incy, func, file, line)
    ccall((:magma_zgetvector_v1_internal, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, func, file, line)
end

"""
    magma_zcopyvector_v1_internal(n, dx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_zcopyvector_v1_internal( magma_int_t n, magmaDoubleComplex_const_ptr dx_src, magma_int_t incx, magmaDoubleComplex_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_zcopyvector_v1_internal(n, dx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_zcopyvector_v1_internal, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_zsetmatrix_v1_internal(m, n, hA_src, lda, dB_dst, lddb, func, file, line)


### Prototype
```c
static inline void magma_zsetmatrix_v1_internal( magma_int_t m, magma_int_t n, magmaDoubleComplex const *hA_src, magma_int_t lda, magmaDoubleComplex_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_zsetmatrix_v1_internal(m, n, hA_src, lda, dB_dst, lddb, func, file, line)
    ccall((:magma_zsetmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, func, file, line)
end

"""
    magma_zgetmatrix_v1_internal(m, n, dA_src, ldda, hB_dst, ldb, func, file, line)


### Prototype
```c
static inline void magma_zgetmatrix_v1_internal( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dA_src, magma_int_t ldda, magmaDoubleComplex *hB_dst, magma_int_t ldb, const char* func, const char* file, int line );
```
"""
function magma_zgetmatrix_v1_internal(m, n, dA_src, ldda, hB_dst, ldb, func, file, line)
    ccall((:magma_zgetmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, func, file, line)
end

"""
    magma_zcopymatrix_v1_internal(m, n, dA_src, ldda, dB_dst, lddb, func, file, line)


### Prototype
```c
static inline void magma_zcopymatrix_v1_internal( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dA_src, magma_int_t ldda, magmaDoubleComplex_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_zcopymatrix_v1_internal(m, n, dA_src, ldda, dB_dst, lddb, func, file, line)
    ccall((:magma_zcopymatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, func, file, line)
end

"""
    magma_csetvector_v1_internal(n, hx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_csetvector_v1_internal( magma_int_t n, magmaFloatComplex const *hx_src, magma_int_t incx, magmaFloatComplex_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_csetvector_v1_internal(n, hx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_csetvector_v1_internal, libmagma), Cvoid, (magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_cgetvector_v1_internal(n, dx_src, incx, hy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_cgetvector_v1_internal( magma_int_t n, magmaFloatComplex_const_ptr dx_src, magma_int_t incx, magmaFloatComplex *hy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_cgetvector_v1_internal(n, dx_src, incx, hy_dst, incy, func, file, line)
    ccall((:magma_cgetvector_v1_internal, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, func, file, line)
end

"""
    magma_ccopyvector_v1_internal(n, dx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_ccopyvector_v1_internal( magma_int_t n, magmaFloatComplex_const_ptr dx_src, magma_int_t incx, magmaFloatComplex_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_ccopyvector_v1_internal(n, dx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_ccopyvector_v1_internal, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_csetmatrix_v1_internal(m, n, hA_src, lda, dB_dst, lddb, func, file, line)


### Prototype
```c
static inline void magma_csetmatrix_v1_internal( magma_int_t m, magma_int_t n, magmaFloatComplex const *hA_src, magma_int_t lda, magmaFloatComplex_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_csetmatrix_v1_internal(m, n, hA_src, lda, dB_dst, lddb, func, file, line)
    ccall((:magma_csetmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, func, file, line)
end

"""
    magma_cgetmatrix_v1_internal(m, n, dA_src, ldda, hB_dst, ldb, func, file, line)


### Prototype
```c
static inline void magma_cgetmatrix_v1_internal( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dA_src, magma_int_t ldda, magmaFloatComplex *hB_dst, magma_int_t ldb, const char* func, const char* file, int line );
```
"""
function magma_cgetmatrix_v1_internal(m, n, dA_src, ldda, hB_dst, ldb, func, file, line)
    ccall((:magma_cgetmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, func, file, line)
end

"""
    magma_ccopymatrix_v1_internal(m, n, dA_src, ldda, dB_dst, lddb, func, file, line)


### Prototype
```c
static inline void magma_ccopymatrix_v1_internal( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dA_src, magma_int_t ldda, magmaFloatComplex_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_ccopymatrix_v1_internal(m, n, dA_src, ldda, dB_dst, lddb, func, file, line)
    ccall((:magma_ccopymatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, func, file, line)
end

"""
    magma_dsetvector_v1_internal(n, hx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_dsetvector_v1_internal( magma_int_t n, double const *hx_src, magma_int_t incx, magmaDouble_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_dsetvector_v1_internal(n, hx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_dsetvector_v1_internal, libmagma), Cvoid, (magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_dgetvector_v1_internal(n, dx_src, incx, hy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_dgetvector_v1_internal( magma_int_t n, magmaDouble_const_ptr dx_src, magma_int_t incx, double *hy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_dgetvector_v1_internal(n, dx_src, incx, hy_dst, incy, func, file, line)
    ccall((:magma_dgetvector_v1_internal, libmagma), Cvoid, (magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, func, file, line)
end

"""
    magma_dcopyvector_v1_internal(n, dx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_dcopyvector_v1_internal( magma_int_t n, magmaDouble_const_ptr dx_src, magma_int_t incx, magmaDouble_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_dcopyvector_v1_internal(n, dx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_dcopyvector_v1_internal, libmagma), Cvoid, (magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_dsetmatrix_v1_internal(m, n, hA_src, lda, dB_dst, lddb, func, file, line)


### Prototype
```c
static inline void magma_dsetmatrix_v1_internal( magma_int_t m, magma_int_t n, double const *hA_src, magma_int_t lda, magmaDouble_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_dsetmatrix_v1_internal(m, n, hA_src, lda, dB_dst, lddb, func, file, line)
    ccall((:magma_dsetmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, func, file, line)
end

"""
    magma_dgetmatrix_v1_internal(m, n, dA_src, ldda, hB_dst, ldb, func, file, line)


### Prototype
```c
static inline void magma_dgetmatrix_v1_internal( magma_int_t m, magma_int_t n, magmaDouble_const_ptr dA_src, magma_int_t ldda, double *hB_dst, magma_int_t ldb, const char* func, const char* file, int line );
```
"""
function magma_dgetmatrix_v1_internal(m, n, dA_src, ldda, hB_dst, ldb, func, file, line)
    ccall((:magma_dgetmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, func, file, line)
end

"""
    magma_dcopymatrix_v1_internal(m, n, dA_src, ldda, dB_dst, lddb, func, file, line)


### Prototype
```c
static inline void magma_dcopymatrix_v1_internal( magma_int_t m, magma_int_t n, magmaDouble_const_ptr dA_src, magma_int_t ldda, magmaDouble_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_dcopymatrix_v1_internal(m, n, dA_src, ldda, dB_dst, lddb, func, file, line)
    ccall((:magma_dcopymatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, func, file, line)
end

"""
    magma_ssetvector_v1_internal(n, hx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_ssetvector_v1_internal( magma_int_t n, float const *hx_src, magma_int_t incx, magmaFloat_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_ssetvector_v1_internal(n, hx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_ssetvector_v1_internal, libmagma), Cvoid, (magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, hx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_sgetvector_v1_internal(n, dx_src, incx, hy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_sgetvector_v1_internal( magma_int_t n, magmaFloat_const_ptr dx_src, magma_int_t incx, float *hy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_sgetvector_v1_internal(n, dx_src, incx, hy_dst, incy, func, file, line)
    ccall((:magma_sgetvector_v1_internal, libmagma), Cvoid, (magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, hy_dst, incy, func, file, line)
end

"""
    magma_scopyvector_v1_internal(n, dx_src, incx, dy_dst, incy, func, file, line)


### Prototype
```c
static inline void magma_scopyvector_v1_internal( magma_int_t n, magmaFloat_const_ptr dx_src, magma_int_t incx, magmaFloat_ptr dy_dst, magma_int_t incy, const char* func, const char* file, int line );
```
"""
function magma_scopyvector_v1_internal(n, dx_src, incx, dy_dst, incy, func, file, line)
    ccall((:magma_scopyvector_v1_internal, libmagma), Cvoid, (magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), n, dx_src, incx, dy_dst, incy, func, file, line)
end

"""
    magma_ssetmatrix_v1_internal(m, n, hA_src, lda, dB_dst, lddb, func, file, line)


### Prototype
```c
static inline void magma_ssetmatrix_v1_internal( magma_int_t m, magma_int_t n, float const *hA_src, magma_int_t lda, magmaFloat_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_ssetmatrix_v1_internal(m, n, hA_src, lda, dB_dst, lddb, func, file, line)
    ccall((:magma_ssetmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, hA_src, lda, dB_dst, lddb, func, file, line)
end

"""
    magma_sgetmatrix_v1_internal(m, n, dA_src, ldda, hB_dst, ldb, func, file, line)


### Prototype
```c
static inline void magma_sgetmatrix_v1_internal( magma_int_t m, magma_int_t n, magmaFloat_const_ptr dA_src, magma_int_t ldda, float *hB_dst, magma_int_t ldb, const char* func, const char* file, int line );
```
"""
function magma_sgetmatrix_v1_internal(m, n, dA_src, ldda, hB_dst, ldb, func, file, line)
    ccall((:magma_sgetmatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, hB_dst, ldb, func, file, line)
end

"""
    magma_scopymatrix_v1_internal(m, n, dA_src, ldda, dB_dst, lddb, func, file, line)


### Prototype
```c
static inline void magma_scopymatrix_v1_internal( magma_int_t m, magma_int_t n, magmaFloat_const_ptr dA_src, magma_int_t ldda, magmaFloat_ptr dB_dst, magma_int_t lddb, const char* func, const char* file, int line );
```
"""
function magma_scopymatrix_v1_internal(m, n, dA_src, ldda, dB_dst, lddb, func, file, line)
    ccall((:magma_scopymatrix_v1_internal, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cchar}, Ptr{Cchar}, Cint), m, n, dA_src, ldda, dB_dst, lddb, func, file, line)
end

"""
    magma_queue_create_v1_internal(queue_ptr, func, file, line)


### Prototype
```c
void magma_queue_create_v1_internal( magma_queue_t* queue_ptr, const char* func, const char* file, int line );
```
"""
function magma_queue_create_v1_internal(queue_ptr, func, file, line)
    ccall((:magma_queue_create_v1_internal, libmagma), Cvoid, (Ptr{magma_queue_t}, Ptr{Cchar}, Ptr{Cchar}, Cint), queue_ptr, func, file, line)
end

"""
    magmablas_stranspose_inplace_v1(n, dA, ldda)

Transpose functions
### Prototype
```c
void magmablas_stranspose_inplace_v1( magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda );
```
"""
function magmablas_stranspose_inplace_v1(n, dA, ldda)
    ccall((:magmablas_stranspose_inplace_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t), n, dA, ldda)
end

"""
    magmablas_stranspose_v1(m, n, dA, ldda, dAT, lddat)


### Prototype
```c
void magmablas_stranspose_v1( magma_int_t m, magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dAT, magma_int_t lddat );
```
"""
function magmablas_stranspose_v1(m, n, dA, ldda, dAT, lddat)
    ccall((:magmablas_stranspose_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), m, n, dA, ldda, dAT, lddat)
end

"""
    magmablas_sgetmatrix_transpose_v1(m, n, dAT, ldda, hA, lda, dwork, lddwork, nb)


### Prototype
```c
void magmablas_sgetmatrix_transpose_v1( magma_int_t m, magma_int_t n, magmaFloat_const_ptr dAT, magma_int_t ldda, float *hA, magma_int_t lda, magmaFloat_ptr dwork, magma_int_t lddwork, magma_int_t nb );
```
"""
function magmablas_sgetmatrix_transpose_v1(m, n, dAT, ldda, hA, lda, dwork, lddwork, nb)
    ccall((:magmablas_sgetmatrix_transpose_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t), m, n, dAT, ldda, hA, lda, dwork, lddwork, nb)
end

"""
    magmablas_ssetmatrix_transpose_v1(m, n, hA, lda, dAT, ldda, dwork, lddwork, nb)


### Prototype
```c
void magmablas_ssetmatrix_transpose_v1( magma_int_t m, magma_int_t n, const float *hA, magma_int_t lda, magmaFloat_ptr dAT, magma_int_t ldda, magmaFloat_ptr dwork, magma_int_t lddwork, magma_int_t nb );
```
"""
function magmablas_ssetmatrix_transpose_v1(m, n, hA, lda, dAT, ldda, dwork, lddwork, nb)
    ccall((:magmablas_ssetmatrix_transpose_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t), m, n, hA, lda, dAT, ldda, dwork, lddwork, nb)
end

"""
    magmablas_sprbt_v1(n, dA, ldda, du, dv)

RBT-related functions
### Prototype
```c
void magmablas_sprbt_v1( magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr du, magmaFloat_ptr dv );
```
"""
function magmablas_sprbt_v1(n, dA, ldda, du, dv)
    ccall((:magmablas_sprbt_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magmaFloat_ptr), n, dA, ldda, du, dv)
end

"""
    magmablas_sprbt_mv_v1(n, dv, db)


### Prototype
```c
void magmablas_sprbt_mv_v1( magma_int_t n, magmaFloat_ptr dv, magmaFloat_ptr db );
```
"""
function magmablas_sprbt_mv_v1(n, dv, db)
    ccall((:magmablas_sprbt_mv_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magmaFloat_ptr), n, dv, db)
end

"""
    magmablas_sprbt_mtv_v1(n, du, db)


### Prototype
```c
void magmablas_sprbt_mtv_v1( magma_int_t n, magmaFloat_ptr du, magmaFloat_ptr db );
```
"""
function magmablas_sprbt_mtv_v1(n, du, db)
    ccall((:magmablas_sprbt_mtv_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magmaFloat_ptr), n, du, db)
end

"""
    magma_sgetmatrix_1D_col_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)

Multi-GPU copy functions
### Prototype
```c
void magma_sgetmatrix_1D_col_bcyclic_v1( magma_int_t m, magma_int_t n, magmaFloat_const_ptr const dA[], magma_int_t ldda, float *hA, magma_int_t lda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_sgetmatrix_1D_col_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)
    ccall((:magma_sgetmatrix_1D_col_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloat_const_ptr}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_int_t), m, n, dA, ldda, hA, lda, ngpu, nb)
end

"""
    magma_ssetmatrix_1D_col_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)


### Prototype
```c
void magma_ssetmatrix_1D_col_bcyclic_v1( magma_int_t m, magma_int_t n, const float *hA, magma_int_t lda, magmaFloat_ptr dA[], magma_int_t ldda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_ssetmatrix_1D_col_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)
    ccall((:magma_ssetmatrix_1D_col_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t), m, n, hA, lda, dA, ldda, ngpu, nb)
end

"""
    magma_sgetmatrix_1D_row_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)


### Prototype
```c
void magma_sgetmatrix_1D_row_bcyclic_v1( magma_int_t m, magma_int_t n, magmaFloat_const_ptr const dA[], magma_int_t ldda, float *hA, magma_int_t lda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_sgetmatrix_1D_row_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)
    ccall((:magma_sgetmatrix_1D_row_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloat_const_ptr}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_int_t), m, n, dA, ldda, hA, lda, ngpu, nb)
end

"""
    magma_ssetmatrix_1D_row_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)


### Prototype
```c
void magma_ssetmatrix_1D_row_bcyclic_v1( magma_int_t m, magma_int_t n, const float *hA, magma_int_t lda, magmaFloat_ptr dA[], magma_int_t ldda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_ssetmatrix_1D_row_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)
    ccall((:magma_ssetmatrix_1D_row_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t), m, n, hA, lda, dA, ldda, ngpu, nb)
end

"""
    magmablas_sgeadd_v1(m, n, alpha, dA, ldda, dB, lddb)

LAPACK auxiliary functions (alphabetical order)
### Prototype
```c
void magmablas_sgeadd_v1( magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb );
```
"""
function magmablas_sgeadd_v1(m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magmablas_sgeadd_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magmablas_sgeadd2_v1(m, n, alpha, dA, ldda, beta, dB, lddb)


### Prototype
```c
void magmablas_sgeadd2_v1( magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, float beta, magmaFloat_ptr dB, magma_int_t lddb );
```
"""
function magmablas_sgeadd2_v1(m, n, alpha, dA, ldda, beta, dB, lddb)
    ccall((:magmablas_sgeadd2_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), m, n, alpha, dA, ldda, beta, dB, lddb)
end

@enum magma_uplo_t::UInt32 begin
    MagmaUpper = 121
    MagmaLower = 122
    MagmaFull = 123
    MagmaHessenberg = 124
end

"""
    magmablas_slacpy_v1(uplo, m, n, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_slacpy_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb );
```
"""
function magmablas_slacpy_v1(uplo, m, n, dA, ldda, dB, lddb)
    ccall((:magmablas_slacpy_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), uplo, m, n, dA, ldda, dB, lddb)
end

"""
    magmablas_slacpy_conj_v1(n, dA1, lda1, dA2, lda2)


### Prototype
```c
void magmablas_slacpy_conj_v1( magma_int_t n, magmaFloat_ptr dA1, magma_int_t lda1, magmaFloat_ptr dA2, magma_int_t lda2 );
```
"""
function magmablas_slacpy_conj_v1(n, dA1, lda1, dA2, lda2)
    ccall((:magmablas_slacpy_conj_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), n, dA1, lda1, dA2, lda2)
end

"""
    magmablas_slacpy_sym_in_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_slacpy_sym_in_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t *rows, magma_int_t *perm, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb );
```
"""
function magmablas_slacpy_sym_in_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)
    ccall((:magmablas_slacpy_sym_in_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), uplo, m, n, rows, perm, dA, ldda, dB, lddb)
end

"""
    magmablas_slacpy_sym_out_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_slacpy_sym_out_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t *rows, magma_int_t *perm, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb );
```
"""
function magmablas_slacpy_sym_out_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)
    ccall((:magmablas_slacpy_sym_out_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), uplo, m, n, rows, perm, dA, ldda, dB, lddb)
end

@enum magma_norm_t::UInt32 begin
    MagmaOneNorm = 171
    MagmaRealOneNorm = 172
    MagmaTwoNorm = 173
    MagmaFrobeniusNorm = 174
    MagmaInfNorm = 175
    MagmaRealInfNorm = 176
    MagmaMaxNorm = 177
    MagmaRealMaxNorm = 178
end

"""
    magmablas_slange_v1(norm, m, n, dA, ldda, dwork, lwork)


### Prototype
```c
float magmablas_slange_v1( magma_norm_t norm, magma_int_t m, magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dwork, magma_int_t lwork );
```
"""
function magmablas_slange_v1(norm, m, n, dA, ldda, dwork, lwork)
    ccall((:magmablas_slange_v1, libmagma), Cfloat, (magma_norm_t, magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), norm, m, n, dA, ldda, dwork, lwork)
end

"""
    magmablas_slansy_v1(norm, uplo, n, dA, ldda, dwork, lwork)


### Prototype
```c
float magmablas_slansy_v1( magma_norm_t norm, magma_uplo_t uplo, magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dwork, magma_int_t lwork );
```
"""
function magmablas_slansy_v1(norm, uplo, n, dA, ldda, dwork, lwork)
    ccall((:magmablas_slansy_v1, libmagma), Cfloat, (magma_norm_t, magma_uplo_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), norm, uplo, n, dA, ldda, dwork, lwork)
end

"""
    magmablas_slarfg_v1(n, dalpha, dx, incx, dtau)


### Prototype
```c
void magmablas_slarfg_v1( magma_int_t n, magmaFloat_ptr dalpha, magmaFloat_ptr dx, magma_int_t incx, magmaFloat_ptr dtau );
```
"""
function magmablas_slarfg_v1(n, dalpha, dx, incx, dtau)
    ccall((:magmablas_slarfg_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magma_int_t, magmaFloat_ptr), n, dalpha, dx, incx, dtau)
end

const magma_type_t = magma_uplo_t

"""
    magmablas_slascl_v1(type, kl, ku, cfrom, cto, m, n, dA, ldda, info)


### Prototype
```c
void magmablas_slascl_v1( magma_type_t type, magma_int_t kl, magma_int_t ku, float cfrom, float cto, magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_slascl_v1(type, kl, ku, cfrom, cto, m, n, dA, ldda, info)
    ccall((:magmablas_slascl_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), type, kl, ku, cfrom, cto, m, n, dA, ldda, info)
end

"""
    magmablas_slascl_2x2_v1(type, m, dW, lddw, dA, ldda, info)


### Prototype
```c
void magmablas_slascl_2x2_v1( magma_type_t type, magma_int_t m, magmaFloat_const_ptr dW, magma_int_t lddw, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_slascl_2x2_v1(type, m, dW, lddw, dA, ldda, info)
    ccall((:magmablas_slascl_2x2_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), type, m, dW, lddw, dA, ldda, info)
end

"""
    magmablas_slascl2_v1(type, m, n, dD, dA, ldda, info)


### Prototype
```c
void magmablas_slascl2_v1( magma_type_t type, magma_int_t m, magma_int_t n, magmaFloat_const_ptr dD, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_slascl2_v1(type, m, n, dD, dA, ldda, info)
    ccall((:magmablas_slascl2_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magma_int_t, magmaFloat_const_ptr, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), type, m, n, dD, dA, ldda, info)
end

"""
    magmablas_slascl_diag_v1(type, m, n, dD, lddd, dA, ldda, info)


### Prototype
```c
void magmablas_slascl_diag_v1( magma_type_t type, magma_int_t m, magma_int_t n, magmaFloat_const_ptr dD, magma_int_t lddd, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_slascl_diag_v1(type, m, n, dD, lddd, dA, ldda, info)
    ccall((:magmablas_slascl_diag_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), type, m, n, dD, lddd, dA, ldda, info)
end

"""
    magmablas_slaset_v1(uplo, m, n, offdiag, diag, dA, ldda)


### Prototype
```c
void magmablas_slaset_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, float offdiag, float diag, magmaFloat_ptr dA, magma_int_t ldda );
```
"""
function magmablas_slaset_v1(uplo, m, n, offdiag, diag, dA, ldda)
    ccall((:magmablas_slaset_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Cfloat, Cfloat, magmaFloat_ptr, magma_int_t), uplo, m, n, offdiag, diag, dA, ldda)
end

"""
    magmablas_slaset_band_v1(uplo, m, n, k, offdiag, diag, dA, ldda)


### Prototype
```c
void magmablas_slaset_band_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t k, float offdiag, float diag, magmaFloat_ptr dA, magma_int_t ldda );
```
"""
function magmablas_slaset_band_v1(uplo, m, n, k, offdiag, diag, dA, ldda)
    ccall((:magmablas_slaset_band_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Cfloat, magmaFloat_ptr, magma_int_t), uplo, m, n, k, offdiag, diag, dA, ldda)
end

"""
    magmablas_slaswp_v1(n, dAT, ldda, k1, k2, ipiv, inci)


### Prototype
```c
void magmablas_slaswp_v1( magma_int_t n, magmaFloat_ptr dAT, magma_int_t ldda, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci );
```
"""
function magmablas_slaswp_v1(n, dAT, ldda, k1, k2, ipiv, inci)
    ccall((:magmablas_slaswp_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, dAT, ldda, k1, k2, ipiv, inci)
end

"""
    magmablas_slaswp2_v1(n, dAT, ldda, k1, k2, d_ipiv, inci)


### Prototype
```c
void magmablas_slaswp2_v1( magma_int_t n, magmaFloat_ptr dAT, magma_int_t ldda, magma_int_t k1, magma_int_t k2, magmaInt_const_ptr d_ipiv, magma_int_t inci );
```
"""
function magmablas_slaswp2_v1(n, dAT, ldda, k1, k2, d_ipiv, inci)
    ccall((:magmablas_slaswp2_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t, magma_int_t, magmaInt_const_ptr, magma_int_t), n, dAT, ldda, k1, k2, d_ipiv, inci)
end

"""
    magmablas_slaswp_sym_v1(n, dA, ldda, k1, k2, ipiv, inci)


### Prototype
```c
void magmablas_slaswp_sym_v1( magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci );
```
"""
function magmablas_slaswp_sym_v1(n, dA, ldda, k1, k2, ipiv, inci)
    ccall((:magmablas_slaswp_sym_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, dA, ldda, k1, k2, ipiv, inci)
end

"""
    magmablas_slaswpx_v1(n, dA, ldx, ldy, k1, k2, ipiv, inci)


### Prototype
```c
void magmablas_slaswpx_v1( magma_int_t n, magmaFloat_ptr dA, magma_int_t ldx, magma_int_t ldy, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci );
```
"""
function magmablas_slaswpx_v1(n, dA, ldx, ldy, k1, k2, ipiv, inci)
    ccall((:magmablas_slaswpx_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, dA, ldx, ldy, k1, k2, ipiv, inci)
end

"""
    magmablas_ssymmetrize_v1(uplo, m, dA, ldda)


### Prototype
```c
void magmablas_ssymmetrize_v1( magma_uplo_t uplo, magma_int_t m, magmaFloat_ptr dA, magma_int_t ldda );
```
"""
function magmablas_ssymmetrize_v1(uplo, m, dA, ldda)
    ccall((:magmablas_ssymmetrize_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t), uplo, m, dA, ldda)
end

"""
    magmablas_ssymmetrize_tiles_v1(uplo, m, dA, ldda, ntile, mstride, nstride)


### Prototype
```c
void magmablas_ssymmetrize_tiles_v1( magma_uplo_t uplo, magma_int_t m, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t ntile, magma_int_t mstride, magma_int_t nstride );
```
"""
function magmablas_ssymmetrize_tiles_v1(uplo, m, dA, ldda, ntile, mstride, nstride)
    ccall((:magmablas_ssymmetrize_tiles_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t, magma_int_t, magma_int_t), uplo, m, dA, ldda, ntile, mstride, nstride)
end

@enum magma_diag_t::UInt32 begin
    MagmaNonUnit = 131
    MagmaUnit = 132
end

"""
    magmablas_strtri_diag_v1(uplo, diag, n, dA, ldda, d_dinvA)


### Prototype
```c
void magmablas_strtri_diag_v1( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr d_dinvA );
```
"""
function magmablas_strtri_diag_v1(uplo, diag, n, dA, ldda, d_dinvA)
    ccall((:magmablas_strtri_diag_v1, libmagma), Cvoid, (magma_uplo_t, magma_diag_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr), uplo, diag, n, dA, ldda, d_dinvA)
end

"""
    magmablas_snrm2_adjust_v1(k, dxnorm, dc)

to cleanup (alphabetical order)
### Prototype
```c
void magmablas_snrm2_adjust_v1( magma_int_t k, magmaFloat_ptr dxnorm, magmaFloat_ptr dc );
```
"""
function magmablas_snrm2_adjust_v1(k, dxnorm, dc)
    ccall((:magmablas_snrm2_adjust_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magmaFloat_ptr), k, dxnorm, dc)
end

"""
    magmablas_snrm2_check_v1(m, n, dA, ldda, dxnorm, dlsticc)


### Prototype
```c
void magmablas_snrm2_check_v1( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dxnorm, magmaFloat_ptr dlsticc );
```
"""
function magmablas_snrm2_check_v1(m, n, dA, ldda, dxnorm, dlsticc)
    ccall((:magmablas_snrm2_check_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magmaFloat_ptr), m, n, dA, ldda, dxnorm, dlsticc)
end

"""
    magmablas_snrm2_cols_v1(m, n, dA, ldda, dxnorm)


### Prototype
```c
void magmablas_snrm2_cols_v1( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dxnorm );
```
"""
function magmablas_snrm2_cols_v1(m, n, dA, ldda, dxnorm)
    ccall((:magmablas_snrm2_cols_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr), m, n, dA, ldda, dxnorm)
end

"""
    magmablas_snrm2_row_check_adjust_v1(k, tol, dxnorm, dxnorm2, dC, lddc, dlsticc)


### Prototype
```c
void magmablas_snrm2_row_check_adjust_v1( magma_int_t k, float tol, magmaFloat_ptr dxnorm, magmaFloat_ptr dxnorm2, magmaFloat_ptr dC, magma_int_t lddc, magmaFloat_ptr dlsticc );
```
"""
function magmablas_snrm2_row_check_adjust_v1(k, tol, dxnorm, dxnorm2, dC, lddc, dlsticc)
    ccall((:magmablas_snrm2_row_check_adjust_v1, libmagma), Cvoid, (magma_int_t, Cfloat, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magma_int_t, magmaFloat_ptr), k, tol, dxnorm, dxnorm2, dC, lddc, dlsticc)
end

@enum magma_side_t::UInt32 begin
    MagmaLeft = 141
    MagmaRight = 142
    MagmaBothSides = 143
end

"""
    magma_trans_t

Magma_ConjTrans is an alias for those rare occasions (zlarfb, zun*, zher*k)
where we want Magma_ConjTrans to convert to MagmaTrans in precision generation.
"""
@enum magma_trans_t::UInt32 begin
    MagmaNoTrans = 111
    MagmaTrans = 112
    MagmaConjTrans = 113
    # Magma_ConjTrans = 113
end

@enum magma_direct_t::UInt32 begin
    MagmaForward = 391
    MagmaBackward = 392
end

@enum magma_storev_t::UInt32 begin
    MagmaColumnwise = 401
    MagmaRowwise = 402
end

"""
    magma_slarfb_gpu_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork)


### Prototype
```c
magma_int_t magma_slarfb_gpu_v1( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloat_const_ptr dV, magma_int_t lddv, magmaFloat_const_ptr dT, magma_int_t lddt, magmaFloat_ptr dC, magma_int_t lddc, magmaFloat_ptr dwork, magma_int_t ldwork );
```
"""
function magma_slarfb_gpu_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork)
    ccall((:magma_slarfb_gpu_v1, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork)
end

"""
    magma_slarfb_gpu_gemm_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, dworkvt, ldworkvt)


### Prototype
```c
magma_int_t magma_slarfb_gpu_gemm_v1( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloat_const_ptr dV, magma_int_t lddv, magmaFloat_const_ptr dT, magma_int_t lddt, magmaFloat_ptr dC, magma_int_t lddc, magmaFloat_ptr dwork, magma_int_t ldwork, magmaFloat_ptr dworkvt, magma_int_t ldworkvt );
```
"""
function magma_slarfb_gpu_gemm_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, dworkvt, ldworkvt)
    ccall((:magma_slarfb_gpu_gemm_v1, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, dworkvt, ldworkvt)
end

"""
    magma_slarfbx_gpu_v1(m, k, V, ldv, dT, ldt, c, dwork)


### Prototype
```c
void magma_slarfbx_gpu_v1( magma_int_t m, magma_int_t k, magmaFloat_ptr V, magma_int_t ldv, magmaFloat_ptr dT, magma_int_t ldt, magmaFloat_ptr c, magmaFloat_ptr dwork );
```
"""
function magma_slarfbx_gpu_v1(m, k, V, ldv, dT, ldt, c, dwork)
    ccall((:magma_slarfbx_gpu_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magmaFloat_ptr), m, k, V, ldv, dT, ldt, c, dwork)
end

"""
    magma_slarfg_gpu_v1(n, dx0, dx, dtau, dxnorm, dAkk)


### Prototype
```c
void magma_slarfg_gpu_v1( magma_int_t n, magmaFloat_ptr dx0, magmaFloat_ptr dx, magmaFloat_ptr dtau, magmaFloat_ptr dxnorm, magmaFloat_ptr dAkk );
```
"""
function magma_slarfg_gpu_v1(n, dx0, dx, dtau, dxnorm, dAkk)
    ccall((:magma_slarfg_gpu_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr), n, dx0, dx, dtau, dxnorm, dAkk)
end

"""
    magma_slarfgtx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter, V, ldv, T, ldt, dwork)


### Prototype
```c
void magma_slarfgtx_gpu_v1( magma_int_t n, magmaFloat_ptr dx0, magmaFloat_ptr dx, magmaFloat_ptr dtau, magmaFloat_ptr dxnorm, magmaFloat_ptr dA, magma_int_t iter, magmaFloat_ptr V, magma_int_t ldv, magmaFloat_ptr T, magma_int_t ldt, magmaFloat_ptr dwork );
```
"""
function magma_slarfgtx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter, V, ldv, T, ldt, dwork)
    ccall((:magma_slarfgtx_gpu_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr), n, dx0, dx, dtau, dxnorm, dA, iter, V, ldv, T, ldt, dwork)
end

"""
    magma_slarfgx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter)


### Prototype
```c
void magma_slarfgx_gpu_v1( magma_int_t n, magmaFloat_ptr dx0, magmaFloat_ptr dx, magmaFloat_ptr dtau, magmaFloat_ptr dxnorm, magmaFloat_ptr dA, magma_int_t iter );
```
"""
function magma_slarfgx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter)
    ccall((:magma_slarfgx_gpu_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magma_int_t), n, dx0, dx, dtau, dxnorm, dA, iter)
end

"""
    magma_slarfx_gpu_v1(m, n, v, tau, C, ldc, xnorm, dT, iter, work)


### Prototype
```c
void magma_slarfx_gpu_v1( magma_int_t m, magma_int_t n, magmaFloat_ptr v, magmaFloat_ptr tau, magmaFloat_ptr C, magma_int_t ldc, magmaFloat_ptr xnorm, magmaFloat_ptr dT, magma_int_t iter, magmaFloat_ptr work );
```
"""
function magma_slarfx_gpu_v1(m, n, v, tau, C, ldc, xnorm, dT, iter, work)
    ccall((:magma_slarfx_gpu_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magma_int_t, magmaFloat_ptr), m, n, v, tau, C, ldc, xnorm, dT, iter, work)
end

"""
    magmablas_saxpycp_v1(m, dr, dx, db)

Level 1 BLAS (alphabetical order)
### Prototype
```c
void magmablas_saxpycp_v1( magma_int_t m, magmaFloat_ptr dr, magmaFloat_ptr dx, magmaFloat_const_ptr db );
```
"""
function magmablas_saxpycp_v1(m, dr, dx, db)
    ccall((:magmablas_saxpycp_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_const_ptr), m, dr, dx, db)
end

"""
    magmablas_sswap_v1(n, dx, incx, dy, incy)


### Prototype
```c
void magmablas_sswap_v1( magma_int_t n, magmaFloat_ptr dx, magma_int_t incx, magmaFloat_ptr dy, magma_int_t incy );
```
"""
function magmablas_sswap_v1(n, dx, incx, dy, incy)
    ccall((:magmablas_sswap_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), n, dx, incx, dy, incy)
end

@enum magma_order_t::UInt32 begin
    MagmaRowMajor = 101
    MagmaColMajor = 102
end

"""
    magmablas_sswapblk_v1(order, n, dA, ldda, dB, lddb, i1, i2, ipiv, inci, offset)


### Prototype
```c
void magmablas_sswapblk_v1( magma_order_t order, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, magma_int_t i1, magma_int_t i2, const magma_int_t *ipiv, magma_int_t inci, magma_int_t offset );
```
"""
function magmablas_sswapblk_v1(order, n, dA, ldda, dB, lddb, i1, i2, ipiv, inci, offset)
    ccall((:magmablas_sswapblk_v1, libmagma), Cvoid, (magma_order_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t), order, n, dA, ldda, dB, lddb, i1, i2, ipiv, inci, offset)
end

"""
    magmablas_sswapdblk_v1(n, nb, dA, ldda, inca, dB, lddb, incb)


### Prototype
```c
void magmablas_sswapdblk_v1( magma_int_t n, magma_int_t nb, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t inca, magmaFloat_ptr dB, magma_int_t lddb, magma_int_t incb );
```
"""
function magmablas_sswapdblk_v1(n, nb, dA, ldda, inca, dB, lddb, incb)
    ccall((:magmablas_sswapdblk_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t), n, nb, dA, ldda, inca, dB, lddb, incb)
end

"""
    magmablas_sgemv_v1(trans, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)

Level 2 BLAS (alphabetical order)
### Prototype
```c
void magmablas_sgemv_v1( magma_trans_t trans, magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dx, magma_int_t incx, float beta, magmaFloat_ptr dy, magma_int_t incy );
```
"""
function magmablas_sgemv_v1(trans, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_sgemv_v1, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), trans, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_sgemv_conj_v1(m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
void magmablas_sgemv_conj_v1( magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dx, magma_int_t incx, float beta, magmaFloat_ptr dy, magma_int_t incy );
```
"""
function magmablas_sgemv_conj_v1(m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_sgemv_conj_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_ssymv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
magma_int_t magmablas_ssymv_v1( magma_uplo_t uplo, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dx, magma_int_t incx, float beta, magmaFloat_ptr dy, magma_int_t incy );
```
"""
function magmablas_ssymv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_ssymv_v1, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_sgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)

Level 3 BLAS (alphabetical order)
### Prototype
```c
void magmablas_sgemm_v1( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dB, magma_int_t lddb, float beta, magmaFloat_ptr dC, magma_int_t lddc );
```
"""
function magmablas_sgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_sgemm_v1, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_sgemm_reduce_v1(m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_sgemm_reduce_v1( magma_int_t m, magma_int_t n, magma_int_t k, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dB, magma_int_t lddb, float beta, magmaFloat_ptr dC, magma_int_t lddc );
```
"""
function magmablas_sgemm_reduce_v1(m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_sgemm_reduce_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_ssymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_ssymm_v1( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dB, magma_int_t lddb, float beta, magmaFloat_ptr dC, magma_int_t lddc );
```
"""
function magmablas_ssymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_ssymm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_ssyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_ssyr2k_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dB, magma_int_t lddb, float beta, magmaFloat_ptr dC, magma_int_t lddc );
```
"""
function magmablas_ssyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_ssyr2k_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_ssyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)


### Prototype
```c
void magmablas_ssyrk_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, float beta, magmaFloat_ptr dC, magma_int_t lddc );
```
"""
function magmablas_ssyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
    ccall((:magmablas_ssyrk_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
end

"""
    magmablas_strsm_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_strsm_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb );
```
"""
function magmablas_strsm_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magmablas_strsm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magmablas_strsm_outofplace_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)


### Prototype
```c
void magmablas_strsm_outofplace_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, magmaFloat_ptr dX, magma_int_t lddx, magma_int_t flag, magmaFloat_ptr d_dinvA, magma_int_t dinvA_length );
```
"""
function magmablas_strsm_outofplace_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
    ccall((:magmablas_strsm_outofplace_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
end

"""
    magmablas_strsm_work_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)


### Prototype
```c
void magmablas_strsm_work_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, magmaFloat_ptr dX, magma_int_t lddx, magma_int_t flag, magmaFloat_ptr d_dinvA, magma_int_t dinvA_length );
```
"""
function magmablas_strsm_work_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
    ccall((:magmablas_strsm_work_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
end

"""
    magma_isamax_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
magma_int_t magma_isamax_v1( magma_int_t n, magmaFloat_const_ptr dx, magma_int_t incx );
```
"""
function magma_isamax_v1(n, dx, incx)
    ccall((:magma_isamax_v1, libmagma), magma_int_t, (magma_int_t, magmaFloat_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_isamin_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
magma_int_t magma_isamin_v1( magma_int_t n, magmaFloat_const_ptr dx, magma_int_t incx );
```
"""
function magma_isamin_v1(n, dx, incx)
    ccall((:magma_isamin_v1, libmagma), magma_int_t, (magma_int_t, magmaFloat_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_sasum_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
float magma_sasum_v1( magma_int_t n, magmaFloat_const_ptr dx, magma_int_t incx );
```
"""
function magma_sasum_v1(n, dx, incx)
    ccall((:magma_sasum_v1, libmagma), Cfloat, (magma_int_t, magmaFloat_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_saxpy_v1(n, alpha, dx, incx, dy, incy)


### Prototype
```c
void magma_saxpy_v1( magma_int_t n, float alpha, magmaFloat_const_ptr dx, magma_int_t incx, magmaFloat_ptr dy, magma_int_t incy );
```
"""
function magma_saxpy_v1(n, alpha, dx, incx, dy, incy)
    ccall((:magma_saxpy_v1, libmagma), Cvoid, (magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), n, alpha, dx, incx, dy, incy)
end

"""
    magma_scopy_v1(n, dx, incx, dy, incy)


### Prototype
```c
void magma_scopy_v1( magma_int_t n, magmaFloat_const_ptr dx, magma_int_t incx, magmaFloat_ptr dy, magma_int_t incy );
```
"""
function magma_scopy_v1(n, dx, incx, dy, incy)
    ccall((:magma_scopy_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_sdot_v1(n, dx, incx, dy, incy)

in cublas_v2, result returned through output argument
### Prototype
```c
float magma_sdot_v1( magma_int_t n, magmaFloat_const_ptr dx, magma_int_t incx, magmaFloat_const_ptr dy, magma_int_t incy );
```
"""
function magma_sdot_v1(n, dx, incx, dy, incy)
    ccall((:magma_sdot_v1, libmagma), Cfloat, (magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_snrm2_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
float magma_snrm2_v1( magma_int_t n, magmaFloat_const_ptr dx, magma_int_t incx );
```
"""
function magma_snrm2_v1(n, dx, incx)
    ccall((:magma_snrm2_v1, libmagma), Cfloat, (magma_int_t, magmaFloat_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_srot_v1(n, dx, incx, dy, incy, dc, ds)


### Prototype
```c
void magma_srot_v1( magma_int_t n, magmaFloat_ptr dx, magma_int_t incx, magmaFloat_ptr dy, magma_int_t incy, float dc, float ds );
```
"""
function magma_srot_v1(n, dx, incx, dy, incy, dc, ds)
    ccall((:magma_srot_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Cfloat, Cfloat), n, dx, incx, dy, incy, dc, ds)
end

"""
    magma_srotm_v1(n, dx, incx, dy, incy, param)


### Prototype
```c
void magma_srotm_v1( magma_int_t n, magmaFloat_ptr dx, magma_int_t incx, magmaFloat_ptr dy, magma_int_t incy, magmaFloat_const_ptr param );
```
"""
function magma_srotm_v1(n, dx, incx, dy, incy, param)
    ccall((:magma_srotm_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_const_ptr), n, dx, incx, dy, incy, param)
end

"""
    magma_srotmg_v1(d1, d2, x1, y1, param)


### Prototype
```c
void magma_srotmg_v1( magmaFloat_ptr d1, magmaFloat_ptr d2, magmaFloat_ptr x1, magmaFloat_const_ptr y1, magmaFloat_ptr param );
```
"""
function magma_srotmg_v1(d1, d2, x1, y1, param)
    ccall((:magma_srotmg_v1, libmagma), Cvoid, (magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_const_ptr, magmaFloat_ptr), d1, d2, x1, y1, param)
end

"""
    magma_sscal_v1(n, alpha, dx, incx)


### Prototype
```c
void magma_sscal_v1( magma_int_t n, float alpha, magmaFloat_ptr dx, magma_int_t incx );
```
"""
function magma_sscal_v1(n, alpha, dx, incx)
    ccall((:magma_sscal_v1, libmagma), Cvoid, (magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), n, alpha, dx, incx)
end

"""
    magma_sswap_v1(n, dx, incx, dy, incy)


### Prototype
```c
void magma_sswap_v1( magma_int_t n, magmaFloat_ptr dx, magma_int_t incx, magmaFloat_ptr dy, magma_int_t incy );
```
"""
function magma_sswap_v1(n, dx, incx, dy, incy)
    ccall((:magma_sswap_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_sgemv_v1(transA, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)

=============================================================================
Level 2 BLAS (alphabetical order)
### Prototype
```c
void magma_sgemv_v1( magma_trans_t transA, magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dx, magma_int_t incx, float beta, magmaFloat_ptr dy, magma_int_t incy );
```
"""
function magma_sgemv_v1(transA, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magma_sgemv_v1, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), transA, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magma_sger_v1(m, n, alpha, dx, incx, dy, incy, dA, ldda)


### Prototype
```c
void magma_sger_v1( magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dx, magma_int_t incx, magmaFloat_const_ptr dy, magma_int_t incy, magmaFloat_ptr dA, magma_int_t ldda );
```
"""
function magma_sger_v1(m, n, alpha, dx, incx, dy, incy, dA, ldda)
    ccall((:magma_sger_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), m, n, alpha, dx, incx, dy, incy, dA, ldda)
end

"""
    magma_ssymv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
void magma_ssymv_v1( magma_uplo_t uplo, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dx, magma_int_t incx, float beta, magmaFloat_ptr dy, magma_int_t incy );
```
"""
function magma_ssymv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magma_ssymv_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magma_ssyr_v1(uplo, n, alpha, dx, incx, dA, ldda)


### Prototype
```c
void magma_ssyr_v1( magma_uplo_t uplo, magma_int_t n, float alpha, magmaFloat_const_ptr dx, magma_int_t incx, magmaFloat_ptr dA, magma_int_t ldda );
```
"""
function magma_ssyr_v1(uplo, n, alpha, dx, incx, dA, ldda)
    ccall((:magma_ssyr_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), uplo, n, alpha, dx, incx, dA, ldda)
end

"""
    magma_ssyr2_v1(uplo, n, alpha, dx, incx, dy, incy, dA, ldda)


### Prototype
```c
void magma_ssyr2_v1( magma_uplo_t uplo, magma_int_t n, float alpha, magmaFloat_const_ptr dx, magma_int_t incx, magmaFloat_const_ptr dy, magma_int_t incy, magmaFloat_ptr dA, magma_int_t ldda );
```
"""
function magma_ssyr2_v1(uplo, n, alpha, dx, incx, dy, incy, dA, ldda)
    ccall((:magma_ssyr2_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), uplo, n, alpha, dx, incx, dy, incy, dA, ldda)
end

"""
    magma_strmv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)


### Prototype
```c
void magma_strmv_v1( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dx, magma_int_t incx );
```
"""
function magma_strmv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)
    ccall((:magma_strmv_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), uplo, trans, diag, n, dA, ldda, dx, incx)
end

"""
    magma_strsv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)


### Prototype
```c
void magma_strsv_v1( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dx, magma_int_t incx );
```
"""
function magma_strsv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)
    ccall((:magma_strsv_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), uplo, trans, diag, n, dA, ldda, dx, incx)
end

"""
    magma_sgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)

=============================================================================
Level 3 BLAS (alphabetical order)
### Prototype
```c
void magma_sgemm_v1( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dB, magma_int_t lddb, float beta, magmaFloat_ptr dC, magma_int_t lddc );
```
"""
function magma_sgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_sgemm_v1, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_ssymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magma_ssymm_v1( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dB, magma_int_t lddb, float beta, magmaFloat_ptr dC, magma_int_t lddc );
```
"""
function magma_ssymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_ssymm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_ssyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magma_ssyr2k_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dB, magma_int_t lddb, float beta, magmaFloat_ptr dC, magma_int_t lddc );
```
"""
function magma_ssyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_ssyr2k_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_ssyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)


### Prototype
```c
void magma_ssyrk_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, float beta, magmaFloat_ptr dC, magma_int_t lddc );
```
"""
function magma_ssyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
    ccall((:magma_ssyrk_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
end

"""
    magma_strmm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)


### Prototype
```c
void magma_strmm_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb );
```
"""
function magma_strmm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magma_strmm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magma_strsm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)


### Prototype
```c
void magma_strsm_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb );
```
"""
function magma_strsm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magma_strsm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magmablas_dtranspose_inplace_v1(n, dA, ldda)

Transpose functions
### Prototype
```c
void magmablas_dtranspose_inplace_v1( magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda );
```
"""
function magmablas_dtranspose_inplace_v1(n, dA, ldda)
    ccall((:magmablas_dtranspose_inplace_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t), n, dA, ldda)
end

"""
    magmablas_dtranspose_v1(m, n, dA, ldda, dAT, lddat)


### Prototype
```c
void magmablas_dtranspose_v1( magma_int_t m, magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dAT, magma_int_t lddat );
```
"""
function magmablas_dtranspose_v1(m, n, dA, ldda, dAT, lddat)
    ccall((:magmablas_dtranspose_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), m, n, dA, ldda, dAT, lddat)
end

"""
    magmablas_dgetmatrix_transpose_v1(m, n, dAT, ldda, hA, lda, dwork, lddwork, nb)


### Prototype
```c
void magmablas_dgetmatrix_transpose_v1( magma_int_t m, magma_int_t n, magmaDouble_const_ptr dAT, magma_int_t ldda, double *hA, magma_int_t lda, magmaDouble_ptr dwork, magma_int_t lddwork, magma_int_t nb );
```
"""
function magmablas_dgetmatrix_transpose_v1(m, n, dAT, ldda, hA, lda, dwork, lddwork, nb)
    ccall((:magmablas_dgetmatrix_transpose_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t), m, n, dAT, ldda, hA, lda, dwork, lddwork, nb)
end

"""
    magmablas_dsetmatrix_transpose_v1(m, n, hA, lda, dAT, ldda, dwork, lddwork, nb)


### Prototype
```c
void magmablas_dsetmatrix_transpose_v1( magma_int_t m, magma_int_t n, const double *hA, magma_int_t lda, magmaDouble_ptr dAT, magma_int_t ldda, magmaDouble_ptr dwork, magma_int_t lddwork, magma_int_t nb );
```
"""
function magmablas_dsetmatrix_transpose_v1(m, n, hA, lda, dAT, ldda, dwork, lddwork, nb)
    ccall((:magmablas_dsetmatrix_transpose_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t), m, n, hA, lda, dAT, ldda, dwork, lddwork, nb)
end

"""
    magmablas_dprbt_v1(n, dA, ldda, du, dv)

RBT-related functions
### Prototype
```c
void magmablas_dprbt_v1( magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr du, magmaDouble_ptr dv );
```
"""
function magmablas_dprbt_v1(n, dA, ldda, du, dv)
    ccall((:magmablas_dprbt_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaDouble_ptr), n, dA, ldda, du, dv)
end

"""
    magmablas_dprbt_mv_v1(n, dv, db)


### Prototype
```c
void magmablas_dprbt_mv_v1( magma_int_t n, magmaDouble_ptr dv, magmaDouble_ptr db );
```
"""
function magmablas_dprbt_mv_v1(n, dv, db)
    ccall((:magmablas_dprbt_mv_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magmaDouble_ptr), n, dv, db)
end

"""
    magmablas_dprbt_mtv_v1(n, du, db)


### Prototype
```c
void magmablas_dprbt_mtv_v1( magma_int_t n, magmaDouble_ptr du, magmaDouble_ptr db );
```
"""
function magmablas_dprbt_mtv_v1(n, du, db)
    ccall((:magmablas_dprbt_mtv_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magmaDouble_ptr), n, du, db)
end

"""
    magma_dgetmatrix_1D_col_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)

Multi-GPU copy functions
### Prototype
```c
void magma_dgetmatrix_1D_col_bcyclic_v1( magma_int_t m, magma_int_t n, magmaDouble_const_ptr const dA[], magma_int_t ldda, double *hA, magma_int_t lda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_dgetmatrix_1D_col_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)
    ccall((:magma_dgetmatrix_1D_col_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDouble_const_ptr}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, magma_int_t), m, n, dA, ldda, hA, lda, ngpu, nb)
end

"""
    magma_dsetmatrix_1D_col_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)


### Prototype
```c
void magma_dsetmatrix_1D_col_bcyclic_v1( magma_int_t m, magma_int_t n, const double *hA, magma_int_t lda, magmaDouble_ptr dA[], magma_int_t ldda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_dsetmatrix_1D_col_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)
    ccall((:magma_dsetmatrix_1D_col_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t), m, n, hA, lda, dA, ldda, ngpu, nb)
end

"""
    magma_dgetmatrix_1D_row_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)


### Prototype
```c
void magma_dgetmatrix_1D_row_bcyclic_v1( magma_int_t m, magma_int_t n, magmaDouble_const_ptr const dA[], magma_int_t ldda, double *hA, magma_int_t lda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_dgetmatrix_1D_row_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)
    ccall((:magma_dgetmatrix_1D_row_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDouble_const_ptr}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, magma_int_t), m, n, dA, ldda, hA, lda, ngpu, nb)
end

"""
    magma_dsetmatrix_1D_row_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)


### Prototype
```c
void magma_dsetmatrix_1D_row_bcyclic_v1( magma_int_t m, magma_int_t n, const double *hA, magma_int_t lda, magmaDouble_ptr dA[], magma_int_t ldda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_dsetmatrix_1D_row_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)
    ccall((:magma_dsetmatrix_1D_row_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t), m, n, hA, lda, dA, ldda, ngpu, nb)
end

"""
    magmablas_dgeadd_v1(m, n, alpha, dA, ldda, dB, lddb)

LAPACK auxiliary functions (alphabetical order)
### Prototype
```c
void magmablas_dgeadd_v1( magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb );
```
"""
function magmablas_dgeadd_v1(m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magmablas_dgeadd_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magmablas_dgeadd2_v1(m, n, alpha, dA, ldda, beta, dB, lddb)


### Prototype
```c
void magmablas_dgeadd2_v1( magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, double beta, magmaDouble_ptr dB, magma_int_t lddb );
```
"""
function magmablas_dgeadd2_v1(m, n, alpha, dA, ldda, beta, dB, lddb)
    ccall((:magmablas_dgeadd2_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), m, n, alpha, dA, ldda, beta, dB, lddb)
end

"""
    magmablas_dlacpy_v1(uplo, m, n, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_dlacpy_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb );
```
"""
function magmablas_dlacpy_v1(uplo, m, n, dA, ldda, dB, lddb)
    ccall((:magmablas_dlacpy_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), uplo, m, n, dA, ldda, dB, lddb)
end

"""
    magmablas_dlacpy_conj_v1(n, dA1, lda1, dA2, lda2)


### Prototype
```c
void magmablas_dlacpy_conj_v1( magma_int_t n, magmaDouble_ptr dA1, magma_int_t lda1, magmaDouble_ptr dA2, magma_int_t lda2 );
```
"""
function magmablas_dlacpy_conj_v1(n, dA1, lda1, dA2, lda2)
    ccall((:magmablas_dlacpy_conj_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), n, dA1, lda1, dA2, lda2)
end

"""
    magmablas_dlacpy_sym_in_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_dlacpy_sym_in_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t *rows, magma_int_t *perm, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb );
```
"""
function magmablas_dlacpy_sym_in_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)
    ccall((:magmablas_dlacpy_sym_in_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), uplo, m, n, rows, perm, dA, ldda, dB, lddb)
end

"""
    magmablas_dlacpy_sym_out_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_dlacpy_sym_out_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t *rows, magma_int_t *perm, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb );
```
"""
function magmablas_dlacpy_sym_out_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)
    ccall((:magmablas_dlacpy_sym_out_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), uplo, m, n, rows, perm, dA, ldda, dB, lddb)
end

"""
    magmablas_dlange_v1(norm, m, n, dA, ldda, dwork, lwork)


### Prototype
```c
double magmablas_dlange_v1( magma_norm_t norm, magma_int_t m, magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dwork, magma_int_t lwork );
```
"""
function magmablas_dlange_v1(norm, m, n, dA, ldda, dwork, lwork)
    ccall((:magmablas_dlange_v1, libmagma), Cdouble, (magma_norm_t, magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), norm, m, n, dA, ldda, dwork, lwork)
end

"""
    magmablas_dlansy_v1(norm, uplo, n, dA, ldda, dwork, lwork)


### Prototype
```c
double magmablas_dlansy_v1( magma_norm_t norm, magma_uplo_t uplo, magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dwork, magma_int_t lwork );
```
"""
function magmablas_dlansy_v1(norm, uplo, n, dA, ldda, dwork, lwork)
    ccall((:magmablas_dlansy_v1, libmagma), Cdouble, (magma_norm_t, magma_uplo_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), norm, uplo, n, dA, ldda, dwork, lwork)
end

"""
    magmablas_dlarfg_v1(n, dalpha, dx, incx, dtau)


### Prototype
```c
void magmablas_dlarfg_v1( magma_int_t n, magmaDouble_ptr dalpha, magmaDouble_ptr dx, magma_int_t incx, magmaDouble_ptr dtau );
```
"""
function magmablas_dlarfg_v1(n, dalpha, dx, incx, dtau)
    ccall((:magmablas_dlarfg_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr), n, dalpha, dx, incx, dtau)
end

"""
    magmablas_dlascl_v1(type, kl, ku, cfrom, cto, m, n, dA, ldda, info)


### Prototype
```c
void magmablas_dlascl_v1( magma_type_t type, magma_int_t kl, magma_int_t ku, double cfrom, double cto, magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_dlascl_v1(type, kl, ku, cfrom, cto, m, n, dA, ldda, info)
    ccall((:magmablas_dlascl_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), type, kl, ku, cfrom, cto, m, n, dA, ldda, info)
end

"""
    magmablas_dlascl_2x2_v1(type, m, dW, lddw, dA, ldda, info)


### Prototype
```c
void magmablas_dlascl_2x2_v1( magma_type_t type, magma_int_t m, magmaDouble_const_ptr dW, magma_int_t lddw, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_dlascl_2x2_v1(type, m, dW, lddw, dA, ldda, info)
    ccall((:magmablas_dlascl_2x2_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), type, m, dW, lddw, dA, ldda, info)
end

"""
    magmablas_dlascl2_v1(type, m, n, dD, dA, ldda, info)


### Prototype
```c
void magmablas_dlascl2_v1( magma_type_t type, magma_int_t m, magma_int_t n, magmaDouble_const_ptr dD, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_dlascl2_v1(type, m, n, dD, dA, ldda, info)
    ccall((:magmablas_dlascl2_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magma_int_t, magmaDouble_const_ptr, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), type, m, n, dD, dA, ldda, info)
end

"""
    magmablas_dlascl_diag_v1(type, m, n, dD, lddd, dA, ldda, info)


### Prototype
```c
void magmablas_dlascl_diag_v1( magma_type_t type, magma_int_t m, magma_int_t n, magmaDouble_const_ptr dD, magma_int_t lddd, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_dlascl_diag_v1(type, m, n, dD, lddd, dA, ldda, info)
    ccall((:magmablas_dlascl_diag_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), type, m, n, dD, lddd, dA, ldda, info)
end

"""
    magmablas_dlaset_v1(uplo, m, n, offdiag, diag, dA, ldda)


### Prototype
```c
void magmablas_dlaset_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, double offdiag, double diag, magmaDouble_ptr dA, magma_int_t ldda );
```
"""
function magmablas_dlaset_v1(uplo, m, n, offdiag, diag, dA, ldda)
    ccall((:magmablas_dlaset_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Cdouble, Cdouble, magmaDouble_ptr, magma_int_t), uplo, m, n, offdiag, diag, dA, ldda)
end

"""
    magmablas_dlaset_band_v1(uplo, m, n, k, offdiag, diag, dA, ldda)


### Prototype
```c
void magmablas_dlaset_band_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t k, double offdiag, double diag, magmaDouble_ptr dA, magma_int_t ldda );
```
"""
function magmablas_dlaset_band_v1(uplo, m, n, k, offdiag, diag, dA, ldda)
    ccall((:magmablas_dlaset_band_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Cdouble, magmaDouble_ptr, magma_int_t), uplo, m, n, k, offdiag, diag, dA, ldda)
end

"""
    magmablas_dlaswp_v1(n, dAT, ldda, k1, k2, ipiv, inci)


### Prototype
```c
void magmablas_dlaswp_v1( magma_int_t n, magmaDouble_ptr dAT, magma_int_t ldda, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci );
```
"""
function magmablas_dlaswp_v1(n, dAT, ldda, k1, k2, ipiv, inci)
    ccall((:magmablas_dlaswp_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, dAT, ldda, k1, k2, ipiv, inci)
end

"""
    magmablas_dlaswp2_v1(n, dAT, ldda, k1, k2, d_ipiv, inci)


### Prototype
```c
void magmablas_dlaswp2_v1( magma_int_t n, magmaDouble_ptr dAT, magma_int_t ldda, magma_int_t k1, magma_int_t k2, magmaInt_const_ptr d_ipiv, magma_int_t inci );
```
"""
function magmablas_dlaswp2_v1(n, dAT, ldda, k1, k2, d_ipiv, inci)
    ccall((:magmablas_dlaswp2_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t, magma_int_t, magmaInt_const_ptr, magma_int_t), n, dAT, ldda, k1, k2, d_ipiv, inci)
end

"""
    magmablas_dlaswp_sym_v1(n, dA, ldda, k1, k2, ipiv, inci)


### Prototype
```c
void magmablas_dlaswp_sym_v1( magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci );
```
"""
function magmablas_dlaswp_sym_v1(n, dA, ldda, k1, k2, ipiv, inci)
    ccall((:magmablas_dlaswp_sym_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, dA, ldda, k1, k2, ipiv, inci)
end

"""
    magmablas_dlaswpx_v1(n, dA, ldx, ldy, k1, k2, ipiv, inci)


### Prototype
```c
void magmablas_dlaswpx_v1( magma_int_t n, magmaDouble_ptr dA, magma_int_t ldx, magma_int_t ldy, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci );
```
"""
function magmablas_dlaswpx_v1(n, dA, ldx, ldy, k1, k2, ipiv, inci)
    ccall((:magmablas_dlaswpx_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, dA, ldx, ldy, k1, k2, ipiv, inci)
end

"""
    magmablas_dsymmetrize_v1(uplo, m, dA, ldda)


### Prototype
```c
void magmablas_dsymmetrize_v1( magma_uplo_t uplo, magma_int_t m, magmaDouble_ptr dA, magma_int_t ldda );
```
"""
function magmablas_dsymmetrize_v1(uplo, m, dA, ldda)
    ccall((:magmablas_dsymmetrize_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t), uplo, m, dA, ldda)
end

"""
    magmablas_dsymmetrize_tiles_v1(uplo, m, dA, ldda, ntile, mstride, nstride)


### Prototype
```c
void magmablas_dsymmetrize_tiles_v1( magma_uplo_t uplo, magma_int_t m, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t ntile, magma_int_t mstride, magma_int_t nstride );
```
"""
function magmablas_dsymmetrize_tiles_v1(uplo, m, dA, ldda, ntile, mstride, nstride)
    ccall((:magmablas_dsymmetrize_tiles_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t, magma_int_t, magma_int_t), uplo, m, dA, ldda, ntile, mstride, nstride)
end

"""
    magmablas_dtrtri_diag_v1(uplo, diag, n, dA, ldda, d_dinvA)


### Prototype
```c
void magmablas_dtrtri_diag_v1( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr d_dinvA );
```
"""
function magmablas_dtrtri_diag_v1(uplo, diag, n, dA, ldda, d_dinvA)
    ccall((:magmablas_dtrtri_diag_v1, libmagma), Cvoid, (magma_uplo_t, magma_diag_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr), uplo, diag, n, dA, ldda, d_dinvA)
end

"""
    magmablas_dnrm2_adjust_v1(k, dxnorm, dc)

to cleanup (alphabetical order)
### Prototype
```c
void magmablas_dnrm2_adjust_v1( magma_int_t k, magmaDouble_ptr dxnorm, magmaDouble_ptr dc );
```
"""
function magmablas_dnrm2_adjust_v1(k, dxnorm, dc)
    ccall((:magmablas_dnrm2_adjust_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magmaDouble_ptr), k, dxnorm, dc)
end

"""
    magmablas_dnrm2_check_v1(m, n, dA, ldda, dxnorm, dlsticc)


### Prototype
```c
void magmablas_dnrm2_check_v1( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dxnorm, magmaDouble_ptr dlsticc );
```
"""
function magmablas_dnrm2_check_v1(m, n, dA, ldda, dxnorm, dlsticc)
    ccall((:magmablas_dnrm2_check_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaDouble_ptr), m, n, dA, ldda, dxnorm, dlsticc)
end

"""
    magmablas_dnrm2_cols_v1(m, n, dA, ldda, dxnorm)


### Prototype
```c
void magmablas_dnrm2_cols_v1( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dxnorm );
```
"""
function magmablas_dnrm2_cols_v1(m, n, dA, ldda, dxnorm)
    ccall((:magmablas_dnrm2_cols_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr), m, n, dA, ldda, dxnorm)
end

"""
    magmablas_dnrm2_row_check_adjust_v1(k, tol, dxnorm, dxnorm2, dC, lddc, dlsticc)


### Prototype
```c
void magmablas_dnrm2_row_check_adjust_v1( magma_int_t k, double tol, magmaDouble_ptr dxnorm, magmaDouble_ptr dxnorm2, magmaDouble_ptr dC, magma_int_t lddc, magmaDouble_ptr dlsticc );
```
"""
function magmablas_dnrm2_row_check_adjust_v1(k, tol, dxnorm, dxnorm2, dC, lddc, dlsticc)
    ccall((:magmablas_dnrm2_row_check_adjust_v1, libmagma), Cvoid, (magma_int_t, Cdouble, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr), k, tol, dxnorm, dxnorm2, dC, lddc, dlsticc)
end

"""
    magma_dlarfb_gpu_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork)


### Prototype
```c
magma_int_t magma_dlarfb_gpu_v1( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaDouble_const_ptr dV, magma_int_t lddv, magmaDouble_const_ptr dT, magma_int_t lddt, magmaDouble_ptr dC, magma_int_t lddc, magmaDouble_ptr dwork, magma_int_t ldwork );
```
"""
function magma_dlarfb_gpu_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork)
    ccall((:magma_dlarfb_gpu_v1, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork)
end

"""
    magma_dlarfb_gpu_gemm_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, dworkvt, ldworkvt)


### Prototype
```c
magma_int_t magma_dlarfb_gpu_gemm_v1( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaDouble_const_ptr dV, magma_int_t lddv, magmaDouble_const_ptr dT, magma_int_t lddt, magmaDouble_ptr dC, magma_int_t lddc, magmaDouble_ptr dwork, magma_int_t ldwork, magmaDouble_ptr dworkvt, magma_int_t ldworkvt );
```
"""
function magma_dlarfb_gpu_gemm_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, dworkvt, ldworkvt)
    ccall((:magma_dlarfb_gpu_gemm_v1, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, dworkvt, ldworkvt)
end

"""
    magma_dlarfbx_gpu_v1(m, k, V, ldv, dT, ldt, c, dwork)


### Prototype
```c
void magma_dlarfbx_gpu_v1( magma_int_t m, magma_int_t k, magmaDouble_ptr V, magma_int_t ldv, magmaDouble_ptr dT, magma_int_t ldt, magmaDouble_ptr c, magmaDouble_ptr dwork );
```
"""
function magma_dlarfbx_gpu_v1(m, k, V, ldv, dT, ldt, c, dwork)
    ccall((:magma_dlarfbx_gpu_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaDouble_ptr), m, k, V, ldv, dT, ldt, c, dwork)
end

"""
    magma_dlarfg_gpu_v1(n, dx0, dx, dtau, dxnorm, dAkk)


### Prototype
```c
void magma_dlarfg_gpu_v1( magma_int_t n, magmaDouble_ptr dx0, magmaDouble_ptr dx, magmaDouble_ptr dtau, magmaDouble_ptr dxnorm, magmaDouble_ptr dAkk );
```
"""
function magma_dlarfg_gpu_v1(n, dx0, dx, dtau, dxnorm, dAkk)
    ccall((:magma_dlarfg_gpu_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr), n, dx0, dx, dtau, dxnorm, dAkk)
end

"""
    magma_dlarfgtx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter, V, ldv, T, ldt, dwork)


### Prototype
```c
void magma_dlarfgtx_gpu_v1( magma_int_t n, magmaDouble_ptr dx0, magmaDouble_ptr dx, magmaDouble_ptr dtau, magmaDouble_ptr dxnorm, magmaDouble_ptr dA, magma_int_t iter, magmaDouble_ptr V, magma_int_t ldv, magmaDouble_ptr T, magma_int_t ldt, magmaDouble_ptr dwork );
```
"""
function magma_dlarfgtx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter, V, ldv, T, ldt, dwork)
    ccall((:magma_dlarfgtx_gpu_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr), n, dx0, dx, dtau, dxnorm, dA, iter, V, ldv, T, ldt, dwork)
end

"""
    magma_dlarfgx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter)


### Prototype
```c
void magma_dlarfgx_gpu_v1( magma_int_t n, magmaDouble_ptr dx0, magmaDouble_ptr dx, magmaDouble_ptr dtau, magmaDouble_ptr dxnorm, magmaDouble_ptr dA, magma_int_t iter );
```
"""
function magma_dlarfgx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter)
    ccall((:magma_dlarfgx_gpu_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magma_int_t), n, dx0, dx, dtau, dxnorm, dA, iter)
end

"""
    magma_dlarfx_gpu_v1(m, n, v, tau, C, ldc, xnorm, dT, iter, work)


### Prototype
```c
void magma_dlarfx_gpu_v1( magma_int_t m, magma_int_t n, magmaDouble_ptr v, magmaDouble_ptr tau, magmaDouble_ptr C, magma_int_t ldc, magmaDouble_ptr xnorm, magmaDouble_ptr dT, magma_int_t iter, magmaDouble_ptr work );
```
"""
function magma_dlarfx_gpu_v1(m, n, v, tau, C, ldc, xnorm, dT, iter, work)
    ccall((:magma_dlarfx_gpu_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr), m, n, v, tau, C, ldc, xnorm, dT, iter, work)
end

"""
    magmablas_daxpycp_v1(m, dr, dx, db)

Level 1 BLAS (alphabetical order)
### Prototype
```c
void magmablas_daxpycp_v1( magma_int_t m, magmaDouble_ptr dr, magmaDouble_ptr dx, magmaDouble_const_ptr db );
```
"""
function magmablas_daxpycp_v1(m, dr, dx, db)
    ccall((:magmablas_daxpycp_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_const_ptr), m, dr, dx, db)
end

"""
    magmablas_dswap_v1(n, dx, incx, dy, incy)


### Prototype
```c
void magmablas_dswap_v1( magma_int_t n, magmaDouble_ptr dx, magma_int_t incx, magmaDouble_ptr dy, magma_int_t incy );
```
"""
function magmablas_dswap_v1(n, dx, incx, dy, incy)
    ccall((:magmablas_dswap_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magmablas_dswapblk_v1(order, n, dA, ldda, dB, lddb, i1, i2, ipiv, inci, offset)


### Prototype
```c
void magmablas_dswapblk_v1( magma_order_t order, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magma_int_t i1, magma_int_t i2, const magma_int_t *ipiv, magma_int_t inci, magma_int_t offset );
```
"""
function magmablas_dswapblk_v1(order, n, dA, ldda, dB, lddb, i1, i2, ipiv, inci, offset)
    ccall((:magmablas_dswapblk_v1, libmagma), Cvoid, (magma_order_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t), order, n, dA, ldda, dB, lddb, i1, i2, ipiv, inci, offset)
end

"""
    magmablas_dswapdblk_v1(n, nb, dA, ldda, inca, dB, lddb, incb)


### Prototype
```c
void magmablas_dswapdblk_v1( magma_int_t n, magma_int_t nb, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t inca, magmaDouble_ptr dB, magma_int_t lddb, magma_int_t incb );
```
"""
function magmablas_dswapdblk_v1(n, nb, dA, ldda, inca, dB, lddb, incb)
    ccall((:magmablas_dswapdblk_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t), n, nb, dA, ldda, inca, dB, lddb, incb)
end

"""
    magmablas_dgemv_v1(trans, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)

Level 2 BLAS (alphabetical order)
### Prototype
```c
void magmablas_dgemv_v1( magma_trans_t trans, magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dx, magma_int_t incx, double beta, magmaDouble_ptr dy, magma_int_t incy );
```
"""
function magmablas_dgemv_v1(trans, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_dgemv_v1, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), trans, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_dgemv_conj_v1(m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
void magmablas_dgemv_conj_v1( magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dx, magma_int_t incx, double beta, magmaDouble_ptr dy, magma_int_t incy );
```
"""
function magmablas_dgemv_conj_v1(m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_dgemv_conj_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_dsymv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
magma_int_t magmablas_dsymv_v1( magma_uplo_t uplo, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dx, magma_int_t incx, double beta, magmaDouble_ptr dy, magma_int_t incy );
```
"""
function magmablas_dsymv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_dsymv_v1, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_dgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)

Level 3 BLAS (alphabetical order)
### Prototype
```c
void magmablas_dgemm_v1( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dB, magma_int_t lddb, double beta, magmaDouble_ptr dC, magma_int_t lddc );
```
"""
function magmablas_dgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_dgemm_v1, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_dgemm_reduce_v1(m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_dgemm_reduce_v1( magma_int_t m, magma_int_t n, magma_int_t k, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dB, magma_int_t lddb, double beta, magmaDouble_ptr dC, magma_int_t lddc );
```
"""
function magmablas_dgemm_reduce_v1(m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_dgemm_reduce_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_dsymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_dsymm_v1( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dB, magma_int_t lddb, double beta, magmaDouble_ptr dC, magma_int_t lddc );
```
"""
function magmablas_dsymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_dsymm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_dsyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_dsyr2k_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dB, magma_int_t lddb, double beta, magmaDouble_ptr dC, magma_int_t lddc );
```
"""
function magmablas_dsyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_dsyr2k_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_dsyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)


### Prototype
```c
void magmablas_dsyrk_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, double beta, magmaDouble_ptr dC, magma_int_t lddc );
```
"""
function magmablas_dsyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
    ccall((:magmablas_dsyrk_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
end

"""
    magmablas_dtrsm_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_dtrsm_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb );
```
"""
function magmablas_dtrsm_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magmablas_dtrsm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magmablas_dtrsm_outofplace_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)


### Prototype
```c
void magmablas_dtrsm_outofplace_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magma_int_t flag, magmaDouble_ptr d_dinvA, magma_int_t dinvA_length );
```
"""
function magmablas_dtrsm_outofplace_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
    ccall((:magmablas_dtrsm_outofplace_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
end

"""
    magmablas_dtrsm_work_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)


### Prototype
```c
void magmablas_dtrsm_work_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magma_int_t flag, magmaDouble_ptr d_dinvA, magma_int_t dinvA_length );
```
"""
function magmablas_dtrsm_work_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
    ccall((:magmablas_dtrsm_work_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
end

"""
    magma_idamax_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
magma_int_t magma_idamax_v1( magma_int_t n, magmaDouble_const_ptr dx, magma_int_t incx );
```
"""
function magma_idamax_v1(n, dx, incx)
    ccall((:magma_idamax_v1, libmagma), magma_int_t, (magma_int_t, magmaDouble_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_idamin_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
magma_int_t magma_idamin_v1( magma_int_t n, magmaDouble_const_ptr dx, magma_int_t incx );
```
"""
function magma_idamin_v1(n, dx, incx)
    ccall((:magma_idamin_v1, libmagma), magma_int_t, (magma_int_t, magmaDouble_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_dasum_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
double magma_dasum_v1( magma_int_t n, magmaDouble_const_ptr dx, magma_int_t incx );
```
"""
function magma_dasum_v1(n, dx, incx)
    ccall((:magma_dasum_v1, libmagma), Cdouble, (magma_int_t, magmaDouble_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_daxpy_v1(n, alpha, dx, incx, dy, incy)


### Prototype
```c
void magma_daxpy_v1( magma_int_t n, double alpha, magmaDouble_const_ptr dx, magma_int_t incx, magmaDouble_ptr dy, magma_int_t incy );
```
"""
function magma_daxpy_v1(n, alpha, dx, incx, dy, incy)
    ccall((:magma_daxpy_v1, libmagma), Cvoid, (magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), n, alpha, dx, incx, dy, incy)
end

"""
    magma_dcopy_v1(n, dx, incx, dy, incy)


### Prototype
```c
void magma_dcopy_v1( magma_int_t n, magmaDouble_const_ptr dx, magma_int_t incx, magmaDouble_ptr dy, magma_int_t incy );
```
"""
function magma_dcopy_v1(n, dx, incx, dy, incy)
    ccall((:magma_dcopy_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_ddot_v1(n, dx, incx, dy, incy)

in cublas_v2, result returned through output argument
### Prototype
```c
double magma_ddot_v1( magma_int_t n, magmaDouble_const_ptr dx, magma_int_t incx, magmaDouble_const_ptr dy, magma_int_t incy );
```
"""
function magma_ddot_v1(n, dx, incx, dy, incy)
    ccall((:magma_ddot_v1, libmagma), Cdouble, (magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_dnrm2_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
double magma_dnrm2_v1( magma_int_t n, magmaDouble_const_ptr dx, magma_int_t incx );
```
"""
function magma_dnrm2_v1(n, dx, incx)
    ccall((:magma_dnrm2_v1, libmagma), Cdouble, (magma_int_t, magmaDouble_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_drot_v1(n, dx, incx, dy, incy, dc, ds)


### Prototype
```c
void magma_drot_v1( magma_int_t n, magmaDouble_ptr dx, magma_int_t incx, magmaDouble_ptr dy, magma_int_t incy, double dc, double ds );
```
"""
function magma_drot_v1(n, dx, incx, dy, incy, dc, ds)
    ccall((:magma_drot_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Cdouble, Cdouble), n, dx, incx, dy, incy, dc, ds)
end

"""
    magma_drotm_v1(n, dx, incx, dy, incy, param)


### Prototype
```c
void magma_drotm_v1( magma_int_t n, magmaDouble_ptr dx, magma_int_t incx, magmaDouble_ptr dy, magma_int_t incy, magmaDouble_const_ptr param );
```
"""
function magma_drotm_v1(n, dx, incx, dy, incy, param)
    ccall((:magma_drotm_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_const_ptr), n, dx, incx, dy, incy, param)
end

"""
    magma_drotmg_v1(d1, d2, x1, y1, param)


### Prototype
```c
void magma_drotmg_v1( magmaDouble_ptr d1, magmaDouble_ptr d2, magmaDouble_ptr x1, magmaDouble_const_ptr y1, magmaDouble_ptr param );
```
"""
function magma_drotmg_v1(d1, d2, x1, y1, param)
    ccall((:magma_drotmg_v1, libmagma), Cvoid, (magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_const_ptr, magmaDouble_ptr), d1, d2, x1, y1, param)
end

"""
    magma_dscal_v1(n, alpha, dx, incx)


### Prototype
```c
void magma_dscal_v1( magma_int_t n, double alpha, magmaDouble_ptr dx, magma_int_t incx );
```
"""
function magma_dscal_v1(n, alpha, dx, incx)
    ccall((:magma_dscal_v1, libmagma), Cvoid, (magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), n, alpha, dx, incx)
end

"""
    magma_dswap_v1(n, dx, incx, dy, incy)


### Prototype
```c
void magma_dswap_v1( magma_int_t n, magmaDouble_ptr dx, magma_int_t incx, magmaDouble_ptr dy, magma_int_t incy );
```
"""
function magma_dswap_v1(n, dx, incx, dy, incy)
    ccall((:magma_dswap_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_dgemv_v1(transA, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)

=============================================================================
Level 2 BLAS (alphabetical order)
### Prototype
```c
void magma_dgemv_v1( magma_trans_t transA, magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dx, magma_int_t incx, double beta, magmaDouble_ptr dy, magma_int_t incy );
```
"""
function magma_dgemv_v1(transA, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magma_dgemv_v1, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), transA, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magma_dger_v1(m, n, alpha, dx, incx, dy, incy, dA, ldda)


### Prototype
```c
void magma_dger_v1( magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dx, magma_int_t incx, magmaDouble_const_ptr dy, magma_int_t incy, magmaDouble_ptr dA, magma_int_t ldda );
```
"""
function magma_dger_v1(m, n, alpha, dx, incx, dy, incy, dA, ldda)
    ccall((:magma_dger_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), m, n, alpha, dx, incx, dy, incy, dA, ldda)
end

"""
    magma_dsymv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
void magma_dsymv_v1( magma_uplo_t uplo, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dx, magma_int_t incx, double beta, magmaDouble_ptr dy, magma_int_t incy );
```
"""
function magma_dsymv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magma_dsymv_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magma_dsyr_v1(uplo, n, alpha, dx, incx, dA, ldda)


### Prototype
```c
void magma_dsyr_v1( magma_uplo_t uplo, magma_int_t n, double alpha, magmaDouble_const_ptr dx, magma_int_t incx, magmaDouble_ptr dA, magma_int_t ldda );
```
"""
function magma_dsyr_v1(uplo, n, alpha, dx, incx, dA, ldda)
    ccall((:magma_dsyr_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), uplo, n, alpha, dx, incx, dA, ldda)
end

"""
    magma_dsyr2_v1(uplo, n, alpha, dx, incx, dy, incy, dA, ldda)


### Prototype
```c
void magma_dsyr2_v1( magma_uplo_t uplo, magma_int_t n, double alpha, magmaDouble_const_ptr dx, magma_int_t incx, magmaDouble_const_ptr dy, magma_int_t incy, magmaDouble_ptr dA, magma_int_t ldda );
```
"""
function magma_dsyr2_v1(uplo, n, alpha, dx, incx, dy, incy, dA, ldda)
    ccall((:magma_dsyr2_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), uplo, n, alpha, dx, incx, dy, incy, dA, ldda)
end

"""
    magma_dtrmv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)


### Prototype
```c
void magma_dtrmv_v1( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dx, magma_int_t incx );
```
"""
function magma_dtrmv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)
    ccall((:magma_dtrmv_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), uplo, trans, diag, n, dA, ldda, dx, incx)
end

"""
    magma_dtrsv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)


### Prototype
```c
void magma_dtrsv_v1( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dx, magma_int_t incx );
```
"""
function magma_dtrsv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)
    ccall((:magma_dtrsv_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), uplo, trans, diag, n, dA, ldda, dx, incx)
end

"""
    magma_dgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)

=============================================================================
Level 3 BLAS (alphabetical order)
### Prototype
```c
void magma_dgemm_v1( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dB, magma_int_t lddb, double beta, magmaDouble_ptr dC, magma_int_t lddc );
```
"""
function magma_dgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_dgemm_v1, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_dsymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magma_dsymm_v1( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dB, magma_int_t lddb, double beta, magmaDouble_ptr dC, magma_int_t lddc );
```
"""
function magma_dsymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_dsymm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_dsyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magma_dsyr2k_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dB, magma_int_t lddb, double beta, magmaDouble_ptr dC, magma_int_t lddc );
```
"""
function magma_dsyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_dsyr2k_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_dsyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)


### Prototype
```c
void magma_dsyrk_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, double beta, magmaDouble_ptr dC, magma_int_t lddc );
```
"""
function magma_dsyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
    ccall((:magma_dsyrk_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
end

"""
    magma_dtrmm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)


### Prototype
```c
void magma_dtrmm_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb );
```
"""
function magma_dtrmm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magma_dtrmm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magma_dtrsm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)


### Prototype
```c
void magma_dtrsm_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb );
```
"""
function magma_dtrsm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magma_dtrsm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magmablas_ctranspose_inplace_v1(n, dA, ldda)

Transpose functions
### Prototype
```c
void magmablas_ctranspose_inplace_v1( magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda );
```
"""
function magmablas_ctranspose_inplace_v1(n, dA, ldda)
    ccall((:magmablas_ctranspose_inplace_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t), n, dA, ldda)
end

"""
    magmablas_ctranspose_conj_inplace_v1(n, dA, ldda)


### Prototype
```c
void magmablas_ctranspose_conj_inplace_v1( magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda );
```
"""
function magmablas_ctranspose_conj_inplace_v1(n, dA, ldda)
    ccall((:magmablas_ctranspose_conj_inplace_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t), n, dA, ldda)
end

"""
    magmablas_ctranspose_v1(m, n, dA, ldda, dAT, lddat)


### Prototype
```c
void magmablas_ctranspose_v1( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dAT, magma_int_t lddat );
```
"""
function magmablas_ctranspose_v1(m, n, dA, ldda, dAT, lddat)
    ccall((:magmablas_ctranspose_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), m, n, dA, ldda, dAT, lddat)
end

"""
    magmablas_ctranspose_conj_v1(m, n, dA, ldda, dAT, lddat)


### Prototype
```c
void magmablas_ctranspose_conj_v1( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dAT, magma_int_t lddat );
```
"""
function magmablas_ctranspose_conj_v1(m, n, dA, ldda, dAT, lddat)
    ccall((:magmablas_ctranspose_conj_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), m, n, dA, ldda, dAT, lddat)
end

"""
    magmablas_cgetmatrix_transpose_v1(m, n, dAT, ldda, hA, lda, dwork, lddwork, nb)


### Prototype
```c
void magmablas_cgetmatrix_transpose_v1( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dAT, magma_int_t ldda, magmaFloatComplex *hA, magma_int_t lda, magmaFloatComplex_ptr dwork, magma_int_t lddwork, magma_int_t nb );
```
"""
function magmablas_cgetmatrix_transpose_v1(m, n, dAT, ldda, hA, lda, dwork, lddwork, nb)
    ccall((:magmablas_cgetmatrix_transpose_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t), m, n, dAT, ldda, hA, lda, dwork, lddwork, nb)
end

"""
    magmablas_csetmatrix_transpose_v1(m, n, hA, lda, dAT, ldda, dwork, lddwork, nb)


### Prototype
```c
void magmablas_csetmatrix_transpose_v1( magma_int_t m, magma_int_t n, const magmaFloatComplex *hA, magma_int_t lda, magmaFloatComplex_ptr dAT, magma_int_t ldda, magmaFloatComplex_ptr dwork, magma_int_t lddwork, magma_int_t nb );
```
"""
function magmablas_csetmatrix_transpose_v1(m, n, hA, lda, dAT, ldda, dwork, lddwork, nb)
    ccall((:magmablas_csetmatrix_transpose_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t), m, n, hA, lda, dAT, ldda, dwork, lddwork, nb)
end

"""
    magmablas_cprbt_v1(n, dA, ldda, du, dv)

RBT-related functions
### Prototype
```c
void magmablas_cprbt_v1( magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr du, magmaFloatComplex_ptr dv );
```
"""
function magmablas_cprbt_v1(n, dA, ldda, du, dv)
    ccall((:magmablas_cprbt_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr), n, dA, ldda, du, dv)
end

"""
    magmablas_cprbt_mv_v1(n, dv, db)


### Prototype
```c
void magmablas_cprbt_mv_v1( magma_int_t n, magmaFloatComplex_ptr dv, magmaFloatComplex_ptr db );
```
"""
function magmablas_cprbt_mv_v1(n, dv, db)
    ccall((:magmablas_cprbt_mv_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr), n, dv, db)
end

"""
    magmablas_cprbt_mtv_v1(n, du, db)


### Prototype
```c
void magmablas_cprbt_mtv_v1( magma_int_t n, magmaFloatComplex_ptr du, magmaFloatComplex_ptr db );
```
"""
function magmablas_cprbt_mtv_v1(n, du, db)
    ccall((:magmablas_cprbt_mtv_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr), n, du, db)
end

"""
    magma_cgetmatrix_1D_col_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)

Multi-GPU copy functions
### Prototype
```c
void magma_cgetmatrix_1D_col_bcyclic_v1( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr const dA[], magma_int_t ldda, magmaFloatComplex *hA, magma_int_t lda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_cgetmatrix_1D_col_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)
    ccall((:magma_cgetmatrix_1D_col_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex_const_ptr}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magma_int_t), m, n, dA, ldda, hA, lda, ngpu, nb)
end

"""
    magma_csetmatrix_1D_col_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)


### Prototype
```c
void magma_csetmatrix_1D_col_bcyclic_v1( magma_int_t m, magma_int_t n, const magmaFloatComplex *hA, magma_int_t lda, magmaFloatComplex_ptr dA[], magma_int_t ldda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_csetmatrix_1D_col_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)
    ccall((:magma_csetmatrix_1D_col_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t), m, n, hA, lda, dA, ldda, ngpu, nb)
end

"""
    magma_cgetmatrix_1D_row_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)


### Prototype
```c
void magma_cgetmatrix_1D_row_bcyclic_v1( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr const dA[], magma_int_t ldda, magmaFloatComplex *hA, magma_int_t lda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_cgetmatrix_1D_row_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)
    ccall((:magma_cgetmatrix_1D_row_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex_const_ptr}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magma_int_t), m, n, dA, ldda, hA, lda, ngpu, nb)
end

"""
    magma_csetmatrix_1D_row_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)


### Prototype
```c
void magma_csetmatrix_1D_row_bcyclic_v1( magma_int_t m, magma_int_t n, const magmaFloatComplex *hA, magma_int_t lda, magmaFloatComplex_ptr dA[], magma_int_t ldda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_csetmatrix_1D_row_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)
    ccall((:magma_csetmatrix_1D_row_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t), m, n, hA, lda, dA, ldda, ngpu, nb)
end

"""
    magmablas_cgeadd_v1(m, n, alpha, dA, ldda, dB, lddb)

LAPACK auxiliary functions (alphabetical order)
### Prototype
```c
void magmablas_cgeadd_v1( magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb );
```
"""
function magmablas_cgeadd_v1(m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magmablas_cgeadd_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magmablas_cgeadd2_v1(m, n, alpha, dA, ldda, beta, dB, lddb)


### Prototype
```c
void magmablas_cgeadd2_v1( magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex beta, magmaFloatComplex_ptr dB, magma_int_t lddb );
```
"""
function magmablas_cgeadd2_v1(m, n, alpha, dA, ldda, beta, dB, lddb)
    ccall((:magmablas_cgeadd2_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), m, n, alpha, dA, ldda, beta, dB, lddb)
end

"""
    magmablas_clacpy_v1(uplo, m, n, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_clacpy_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb );
```
"""
function magmablas_clacpy_v1(uplo, m, n, dA, ldda, dB, lddb)
    ccall((:magmablas_clacpy_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), uplo, m, n, dA, ldda, dB, lddb)
end

"""
    magmablas_clacpy_conj_v1(n, dA1, lda1, dA2, lda2)


### Prototype
```c
void magmablas_clacpy_conj_v1( magma_int_t n, magmaFloatComplex_ptr dA1, magma_int_t lda1, magmaFloatComplex_ptr dA2, magma_int_t lda2 );
```
"""
function magmablas_clacpy_conj_v1(n, dA1, lda1, dA2, lda2)
    ccall((:magmablas_clacpy_conj_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), n, dA1, lda1, dA2, lda2)
end

"""
    magmablas_clacpy_sym_in_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_clacpy_sym_in_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t *rows, magma_int_t *perm, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb );
```
"""
function magmablas_clacpy_sym_in_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)
    ccall((:magmablas_clacpy_sym_in_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), uplo, m, n, rows, perm, dA, ldda, dB, lddb)
end

"""
    magmablas_clacpy_sym_out_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_clacpy_sym_out_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t *rows, magma_int_t *perm, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb );
```
"""
function magmablas_clacpy_sym_out_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)
    ccall((:magmablas_clacpy_sym_out_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), uplo, m, n, rows, perm, dA, ldda, dB, lddb)
end

"""
    magmablas_clange_v1(norm, m, n, dA, ldda, dwork, lwork)


### Prototype
```c
float magmablas_clange_v1( magma_norm_t norm, magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dwork, magma_int_t lwork );
```
"""
function magmablas_clange_v1(norm, m, n, dA, ldda, dwork, lwork)
    ccall((:magmablas_clange_v1, libmagma), Cfloat, (magma_norm_t, magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), norm, m, n, dA, ldda, dwork, lwork)
end

"""
    magmablas_clanhe_v1(norm, uplo, n, dA, ldda, dwork, lwork)


### Prototype
```c
float magmablas_clanhe_v1( magma_norm_t norm, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dwork, magma_int_t lwork );
```
"""
function magmablas_clanhe_v1(norm, uplo, n, dA, ldda, dwork, lwork)
    ccall((:magmablas_clanhe_v1, libmagma), Cfloat, (magma_norm_t, magma_uplo_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), norm, uplo, n, dA, ldda, dwork, lwork)
end

"""
    magmablas_clansy_v1(norm, uplo, n, dA, ldda, dwork, lwork)


### Prototype
```c
float magmablas_clansy_v1( magma_norm_t norm, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloat_ptr dwork, magma_int_t lwork );
```
"""
function magmablas_clansy_v1(norm, uplo, n, dA, ldda, dwork, lwork)
    ccall((:magmablas_clansy_v1, libmagma), Cfloat, (magma_norm_t, magma_uplo_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t), norm, uplo, n, dA, ldda, dwork, lwork)
end

"""
    magmablas_clarfg_v1(n, dalpha, dx, incx, dtau)


### Prototype
```c
void magmablas_clarfg_v1( magma_int_t n, magmaFloatComplex_ptr dalpha, magmaFloatComplex_ptr dx, magma_int_t incx, magmaFloatComplex_ptr dtau );
```
"""
function magmablas_clarfg_v1(n, dalpha, dx, incx, dtau)
    ccall((:magmablas_clarfg_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr), n, dalpha, dx, incx, dtau)
end

"""
    magmablas_clascl_v1(type, kl, ku, cfrom, cto, m, n, dA, ldda, info)


### Prototype
```c
void magmablas_clascl_v1( magma_type_t type, magma_int_t kl, magma_int_t ku, float cfrom, float cto, magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_clascl_v1(type, kl, ku, cfrom, cto, m, n, dA, ldda, info)
    ccall((:magmablas_clascl_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), type, kl, ku, cfrom, cto, m, n, dA, ldda, info)
end

"""
    magmablas_clascl_2x2_v1(type, m, dW, lddw, dA, ldda, info)


### Prototype
```c
void magmablas_clascl_2x2_v1( magma_type_t type, magma_int_t m, magmaFloatComplex_const_ptr dW, magma_int_t lddw, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_clascl_2x2_v1(type, m, dW, lddw, dA, ldda, info)
    ccall((:magmablas_clascl_2x2_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), type, m, dW, lddw, dA, ldda, info)
end

"""
    magmablas_clascl2_v1(type, m, n, dD, dA, ldda, info)


### Prototype
```c
void magmablas_clascl2_v1( magma_type_t type, magma_int_t m, magma_int_t n, magmaFloat_const_ptr dD, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_clascl2_v1(type, m, n, dD, dA, ldda, info)
    ccall((:magmablas_clascl2_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magma_int_t, magmaFloat_const_ptr, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), type, m, n, dD, dA, ldda, info)
end

"""
    magmablas_clascl_diag_v1(type, m, n, dD, lddd, dA, ldda, info)


### Prototype
```c
void magmablas_clascl_diag_v1( magma_type_t type, magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dD, magma_int_t lddd, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_clascl_diag_v1(type, m, n, dD, lddd, dA, ldda, info)
    ccall((:magmablas_clascl_diag_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), type, m, n, dD, lddd, dA, ldda, info)
end

"""
    magmablas_claset_v1(uplo, m, n, offdiag, diag, dA, ldda)


### Prototype
```c
void magmablas_claset_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex offdiag, magmaFloatComplex diag, magmaFloatComplex_ptr dA, magma_int_t ldda );
```
"""
function magmablas_claset_v1(uplo, m, n, offdiag, diag, dA, ldda)
    ccall((:magmablas_claset_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), uplo, m, n, offdiag, diag, dA, ldda)
end

"""
    magmablas_claset_band_v1(uplo, m, n, k, offdiag, diag, dA, ldda)


### Prototype
```c
void magmablas_claset_band_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex offdiag, magmaFloatComplex diag, magmaFloatComplex_ptr dA, magma_int_t ldda );
```
"""
function magmablas_claset_band_v1(uplo, m, n, k, offdiag, diag, dA, ldda)
    ccall((:magmablas_claset_band_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), uplo, m, n, k, offdiag, diag, dA, ldda)
end

"""
    magmablas_claswp_v1(n, dAT, ldda, k1, k2, ipiv, inci)


### Prototype
```c
void magmablas_claswp_v1( magma_int_t n, magmaFloatComplex_ptr dAT, magma_int_t ldda, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci );
```
"""
function magmablas_claswp_v1(n, dAT, ldda, k1, k2, ipiv, inci)
    ccall((:magmablas_claswp_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, dAT, ldda, k1, k2, ipiv, inci)
end

"""
    magmablas_claswp2_v1(n, dAT, ldda, k1, k2, d_ipiv, inci)


### Prototype
```c
void magmablas_claswp2_v1( magma_int_t n, magmaFloatComplex_ptr dAT, magma_int_t ldda, magma_int_t k1, magma_int_t k2, magmaInt_const_ptr d_ipiv, magma_int_t inci );
```
"""
function magmablas_claswp2_v1(n, dAT, ldda, k1, k2, d_ipiv, inci)
    ccall((:magmablas_claswp2_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t, magma_int_t, magmaInt_const_ptr, magma_int_t), n, dAT, ldda, k1, k2, d_ipiv, inci)
end

"""
    magmablas_claswp_sym_v1(n, dA, ldda, k1, k2, ipiv, inci)


### Prototype
```c
void magmablas_claswp_sym_v1( magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci );
```
"""
function magmablas_claswp_sym_v1(n, dA, ldda, k1, k2, ipiv, inci)
    ccall((:magmablas_claswp_sym_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, dA, ldda, k1, k2, ipiv, inci)
end

"""
    magmablas_claswpx_v1(n, dA, ldx, ldy, k1, k2, ipiv, inci)


### Prototype
```c
void magmablas_claswpx_v1( magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldx, magma_int_t ldy, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci );
```
"""
function magmablas_claswpx_v1(n, dA, ldx, ldy, k1, k2, ipiv, inci)
    ccall((:magmablas_claswpx_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, dA, ldx, ldy, k1, k2, ipiv, inci)
end

"""
    magmablas_csymmetrize_v1(uplo, m, dA, ldda)


### Prototype
```c
void magmablas_csymmetrize_v1( magma_uplo_t uplo, magma_int_t m, magmaFloatComplex_ptr dA, magma_int_t ldda );
```
"""
function magmablas_csymmetrize_v1(uplo, m, dA, ldda)
    ccall((:magmablas_csymmetrize_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t), uplo, m, dA, ldda)
end

"""
    magmablas_csymmetrize_tiles_v1(uplo, m, dA, ldda, ntile, mstride, nstride)


### Prototype
```c
void magmablas_csymmetrize_tiles_v1( magma_uplo_t uplo, magma_int_t m, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t ntile, magma_int_t mstride, magma_int_t nstride );
```
"""
function magmablas_csymmetrize_tiles_v1(uplo, m, dA, ldda, ntile, mstride, nstride)
    ccall((:magmablas_csymmetrize_tiles_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t, magma_int_t, magma_int_t), uplo, m, dA, ldda, ntile, mstride, nstride)
end

"""
    magmablas_ctrtri_diag_v1(uplo, diag, n, dA, ldda, d_dinvA)


### Prototype
```c
void magmablas_ctrtri_diag_v1( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr d_dinvA );
```
"""
function magmablas_ctrtri_diag_v1(uplo, diag, n, dA, ldda, d_dinvA)
    ccall((:magmablas_ctrtri_diag_v1, libmagma), Cvoid, (magma_uplo_t, magma_diag_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr), uplo, diag, n, dA, ldda, d_dinvA)
end

"""
    magmablas_scnrm2_adjust_v1(k, dxnorm, dc)

to cleanup (alphabetical order)
### Prototype
```c
void magmablas_scnrm2_adjust_v1( magma_int_t k, magmaFloat_ptr dxnorm, magmaFloatComplex_ptr dc );
```
"""
function magmablas_scnrm2_adjust_v1(k, dxnorm, dc)
    ccall((:magmablas_scnrm2_adjust_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magmaFloatComplex_ptr), k, dxnorm, dc)
end

"""
    magmablas_scnrm2_check_v1(m, n, dA, ldda, dxnorm, dlsticc)


### Prototype
```c
void magmablas_scnrm2_check_v1( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloat_ptr dxnorm, magmaFloat_ptr dlsticc );
```
"""
function magmablas_scnrm2_check_v1(m, n, dA, ldda, dxnorm, dlsticc)
    ccall((:magmablas_scnrm2_check_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloat_ptr, magmaFloat_ptr), m, n, dA, ldda, dxnorm, dlsticc)
end

"""
    magmablas_scnrm2_cols_v1(m, n, dA, ldda, dxnorm)


### Prototype
```c
void magmablas_scnrm2_cols_v1( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloat_ptr dxnorm );
```
"""
function magmablas_scnrm2_cols_v1(m, n, dA, ldda, dxnorm)
    ccall((:magmablas_scnrm2_cols_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloat_ptr), m, n, dA, ldda, dxnorm)
end

"""
    magmablas_scnrm2_row_check_adjust_v1(k, tol, dxnorm, dxnorm2, dC, lddc, dlsticc)


### Prototype
```c
void magmablas_scnrm2_row_check_adjust_v1( magma_int_t k, float tol, magmaFloat_ptr dxnorm, magmaFloat_ptr dxnorm2, magmaFloatComplex_ptr dC, magma_int_t lddc, magmaFloat_ptr dlsticc );
```
"""
function magmablas_scnrm2_row_check_adjust_v1(k, tol, dxnorm, dxnorm2, dC, lddc, dlsticc)
    ccall((:magmablas_scnrm2_row_check_adjust_v1, libmagma), Cvoid, (magma_int_t, Cfloat, magmaFloat_ptr, magmaFloat_ptr, magmaFloatComplex_ptr, magma_int_t, magmaFloat_ptr), k, tol, dxnorm, dxnorm2, dC, lddc, dlsticc)
end

"""
    magma_clarfb_gpu_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork)


### Prototype
```c
magma_int_t magma_clarfb_gpu_v1( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex_const_ptr dV, magma_int_t lddv, magmaFloatComplex_const_ptr dT, magma_int_t lddt, magmaFloatComplex_ptr dC, magma_int_t lddc, magmaFloatComplex_ptr dwork, magma_int_t ldwork );
```
"""
function magma_clarfb_gpu_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork)
    ccall((:magma_clarfb_gpu_v1, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork)
end

"""
    magma_clarfb_gpu_gemm_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, dworkvt, ldworkvt)


### Prototype
```c
magma_int_t magma_clarfb_gpu_gemm_v1( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex_const_ptr dV, magma_int_t lddv, magmaFloatComplex_const_ptr dT, magma_int_t lddt, magmaFloatComplex_ptr dC, magma_int_t lddc, magmaFloatComplex_ptr dwork, magma_int_t ldwork, magmaFloatComplex_ptr dworkvt, magma_int_t ldworkvt );
```
"""
function magma_clarfb_gpu_gemm_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, dworkvt, ldworkvt)
    ccall((:magma_clarfb_gpu_gemm_v1, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, dworkvt, ldworkvt)
end

"""
    magma_clarfbx_gpu_v1(m, k, V, ldv, dT, ldt, c, dwork)


### Prototype
```c
void magma_clarfbx_gpu_v1( magma_int_t m, magma_int_t k, magmaFloatComplex_ptr V, magma_int_t ldv, magmaFloatComplex_ptr dT, magma_int_t ldt, magmaFloatComplex_ptr c, magmaFloatComplex_ptr dwork );
```
"""
function magma_clarfbx_gpu_v1(m, k, V, ldv, dT, ldt, c, dwork)
    ccall((:magma_clarfbx_gpu_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr), m, k, V, ldv, dT, ldt, c, dwork)
end

"""
    magma_clarfg_gpu_v1(n, dx0, dx, dtau, dxnorm, dAkk)


### Prototype
```c
void magma_clarfg_gpu_v1( magma_int_t n, magmaFloatComplex_ptr dx0, magmaFloatComplex_ptr dx, magmaFloatComplex_ptr dtau, magmaFloat_ptr dxnorm, magmaFloatComplex_ptr dAkk );
```
"""
function magma_clarfg_gpu_v1(n, dx0, dx, dtau, dxnorm, dAkk)
    ccall((:magma_clarfg_gpu_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloat_ptr, magmaFloatComplex_ptr), n, dx0, dx, dtau, dxnorm, dAkk)
end

"""
    magma_clarfgtx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter, V, ldv, T, ldt, dwork)


### Prototype
```c
void magma_clarfgtx_gpu_v1( magma_int_t n, magmaFloatComplex_ptr dx0, magmaFloatComplex_ptr dx, magmaFloatComplex_ptr dtau, magmaFloat_ptr dxnorm, magmaFloatComplex_ptr dA, magma_int_t iter, magmaFloatComplex_ptr V, magma_int_t ldv, magmaFloatComplex_ptr T, magma_int_t ldt, magmaFloatComplex_ptr dwork );
```
"""
function magma_clarfgtx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter, V, ldv, T, ldt, dwork)
    ccall((:magma_clarfgtx_gpu_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloat_ptr, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr), n, dx0, dx, dtau, dxnorm, dA, iter, V, ldv, T, ldt, dwork)
end

"""
    magma_clarfgx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter)


### Prototype
```c
void magma_clarfgx_gpu_v1( magma_int_t n, magmaFloatComplex_ptr dx0, magmaFloatComplex_ptr dx, magmaFloatComplex_ptr dtau, magmaFloat_ptr dxnorm, magmaFloatComplex_ptr dA, magma_int_t iter );
```
"""
function magma_clarfgx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter)
    ccall((:magma_clarfgx_gpu_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloat_ptr, magmaFloatComplex_ptr, magma_int_t), n, dx0, dx, dtau, dxnorm, dA, iter)
end

"""
    magma_clarfx_gpu_v1(m, n, v, tau, C, ldc, xnorm, dT, iter, work)


### Prototype
```c
void magma_clarfx_gpu_v1( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr v, magmaFloatComplex_ptr tau, magmaFloatComplex_ptr C, magma_int_t ldc, magmaFloat_ptr xnorm, magmaFloatComplex_ptr dT, magma_int_t iter, magmaFloatComplex_ptr work );
```
"""
function magma_clarfx_gpu_v1(m, n, v, tau, C, ldc, xnorm, dT, iter, work)
    ccall((:magma_clarfx_gpu_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magma_int_t, magmaFloat_ptr, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr), m, n, v, tau, C, ldc, xnorm, dT, iter, work)
end

"""
    magmablas_caxpycp_v1(m, dr, dx, db)

Level 1 BLAS (alphabetical order)
### Prototype
```c
void magmablas_caxpycp_v1( magma_int_t m, magmaFloatComplex_ptr dr, magmaFloatComplex_ptr dx, magmaFloatComplex_const_ptr db );
```
"""
function magmablas_caxpycp_v1(m, dr, dx, db)
    ccall((:magmablas_caxpycp_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloatComplex_const_ptr), m, dr, dx, db)
end

"""
    magmablas_cswap_v1(n, dx, incx, dy, incy)


### Prototype
```c
void magmablas_cswap_v1( magma_int_t n, magmaFloatComplex_ptr dx, magma_int_t incx, magmaFloatComplex_ptr dy, magma_int_t incy );
```
"""
function magmablas_cswap_v1(n, dx, incx, dy, incy)
    ccall((:magmablas_cswap_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magmablas_cswapblk_v1(order, n, dA, ldda, dB, lddb, i1, i2, ipiv, inci, offset)


### Prototype
```c
void magmablas_cswapblk_v1( magma_order_t order, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_int_t i1, magma_int_t i2, const magma_int_t *ipiv, magma_int_t inci, magma_int_t offset );
```
"""
function magmablas_cswapblk_v1(order, n, dA, ldda, dB, lddb, i1, i2, ipiv, inci, offset)
    ccall((:magmablas_cswapblk_v1, libmagma), Cvoid, (magma_order_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t), order, n, dA, ldda, dB, lddb, i1, i2, ipiv, inci, offset)
end

"""
    magmablas_cswapdblk_v1(n, nb, dA, ldda, inca, dB, lddb, incb)


### Prototype
```c
void magmablas_cswapdblk_v1( magma_int_t n, magma_int_t nb, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t inca, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_int_t incb );
```
"""
function magmablas_cswapdblk_v1(n, nb, dA, ldda, inca, dB, lddb, incb)
    ccall((:magmablas_cswapdblk_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t), n, nb, dA, ldda, inca, dB, lddb, incb)
end

"""
    magmablas_cgemv_v1(trans, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)

Level 2 BLAS (alphabetical order)
### Prototype
```c
void magmablas_cgemv_v1( magma_trans_t trans, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy, magma_int_t incy );
```
"""
function magmablas_cgemv_v1(trans, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_cgemv_v1, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), trans, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_cgemv_conj_v1(m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
void magmablas_cgemv_conj_v1( magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy, magma_int_t incy );
```
"""
function magmablas_cgemv_conj_v1(m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_cgemv_conj_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_chemv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
magma_int_t magmablas_chemv_v1( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy, magma_int_t incy );
```
"""
function magmablas_chemv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_chemv_v1, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_csymv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
magma_int_t magmablas_csymv_v1( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy, magma_int_t incy );
```
"""
function magmablas_csymv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_csymv_v1, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_cgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)

Level 3 BLAS (alphabetical order)
### Prototype
```c
void magmablas_cgemm_v1( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dB, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_cgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_cgemm_v1, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_cgemm_reduce_v1(m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_cgemm_reduce_v1( magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dB, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_cgemm_reduce_v1(m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_cgemm_reduce_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_chemm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_chemm_v1( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dB, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_chemm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_chemm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_csymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_csymm_v1( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dB, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_csymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_csymm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_csyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_csyr2k_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dB, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_csyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_csyr2k_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_cher2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_cher2k_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dB, magma_int_t lddb, float beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_cher2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_cher2k_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Cfloat, magmaFloatComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_csyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)


### Prototype
```c
void magmablas_csyrk_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_csyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
    ccall((:magmablas_csyrk_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
end

"""
    magmablas_cherk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)


### Prototype
```c
void magmablas_cherk_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, float beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_cherk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
    ccall((:magmablas_cherk_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, magmaFloatComplex_const_ptr, magma_int_t, Cfloat, magmaFloatComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
end

"""
    magmablas_ctrsm_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_ctrsm_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb );
```
"""
function magmablas_ctrsm_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magmablas_ctrsm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magmablas_ctrsm_outofplace_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)


### Prototype
```c
void magmablas_ctrsm_outofplace_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magmaFloatComplex_ptr dX, magma_int_t lddx, magma_int_t flag, magmaFloatComplex_ptr d_dinvA, magma_int_t dinvA_length );
```
"""
function magmablas_ctrsm_outofplace_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
    ccall((:magmablas_ctrsm_outofplace_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
end

"""
    magmablas_ctrsm_work_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)


### Prototype
```c
void magmablas_ctrsm_work_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magmaFloatComplex_ptr dX, magma_int_t lddx, magma_int_t flag, magmaFloatComplex_ptr d_dinvA, magma_int_t dinvA_length );
```
"""
function magmablas_ctrsm_work_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
    ccall((:magmablas_ctrsm_work_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
end

"""
    magma_icamax_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
magma_int_t magma_icamax_v1( magma_int_t n, magmaFloatComplex_const_ptr dx, magma_int_t incx );
```
"""
function magma_icamax_v1(n, dx, incx)
    ccall((:magma_icamax_v1, libmagma), magma_int_t, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_icamin_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
magma_int_t magma_icamin_v1( magma_int_t n, magmaFloatComplex_const_ptr dx, magma_int_t incx );
```
"""
function magma_icamin_v1(n, dx, incx)
    ccall((:magma_icamin_v1, libmagma), magma_int_t, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_scasum_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
float magma_scasum_v1( magma_int_t n, magmaFloatComplex_const_ptr dx, magma_int_t incx );
```
"""
function magma_scasum_v1(n, dx, incx)
    ccall((:magma_scasum_v1, libmagma), Cfloat, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_caxpy_v1(n, alpha, dx, incx, dy, incy)


### Prototype
```c
void magma_caxpy_v1( magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex_ptr dy, magma_int_t incy );
```
"""
function magma_caxpy_v1(n, alpha, dx, incx, dy, incy)
    ccall((:magma_caxpy_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), n, alpha, dx, incx, dy, incy)
end

"""
    magma_ccopy_v1(n, dx, incx, dy, incy)


### Prototype
```c
void magma_ccopy_v1( magma_int_t n, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex_ptr dy, magma_int_t incy );
```
"""
function magma_ccopy_v1(n, dx, incx, dy, incy)
    ccall((:magma_ccopy_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_cdotc_v1(n, dx, incx, dy, incy)

in cublas_v2, result returned through output argument
### Prototype
```c
magmaFloatComplex magma_cdotc_v1( magma_int_t n, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex_const_ptr dy, magma_int_t incy );
```
"""
function magma_cdotc_v1(n, dx, incx, dy, incy)
    ccall((:magma_cdotc_v1, libmagma), magmaFloatComplex, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_cdotu_v1(n, dx, incx, dy, incy)

in cublas_v2, result returned through output argument
### Prototype
```c
magmaFloatComplex magma_cdotu_v1( magma_int_t n, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex_const_ptr dy, magma_int_t incy );
```
"""
function magma_cdotu_v1(n, dx, incx, dy, incy)
    ccall((:magma_cdotu_v1, libmagma), magmaFloatComplex, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_scnrm2_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
float magma_scnrm2_v1( magma_int_t n, magmaFloatComplex_const_ptr dx, magma_int_t incx );
```
"""
function magma_scnrm2_v1(n, dx, incx)
    ccall((:magma_scnrm2_v1, libmagma), Cfloat, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_crot_v1(n, dx, incx, dy, incy, dc, ds)


### Prototype
```c
void magma_crot_v1( magma_int_t n, magmaFloatComplex_ptr dx, magma_int_t incx, magmaFloatComplex_ptr dy, magma_int_t incy, float dc, magmaFloatComplex ds );
```
"""
function magma_crot_v1(n, dx, incx, dy, incy, dc, ds)
    ccall((:magma_crot_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Cfloat, magmaFloatComplex), n, dx, incx, dy, incy, dc, ds)
end

"""
    magma_csrot_v1(n, dx, incx, dy, incy, dc, ds)


### Prototype
```c
void magma_csrot_v1( magma_int_t n, magmaFloatComplex_ptr dx, magma_int_t incx, magmaFloatComplex_ptr dy, magma_int_t incy, float dc, float ds );
```
"""
function magma_csrot_v1(n, dx, incx, dy, incy, dc, ds)
    ccall((:magma_csrot_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Cfloat, Cfloat), n, dx, incx, dy, incy, dc, ds)
end

"""
    magma_cscal_v1(n, alpha, dx, incx)


### Prototype
```c
void magma_cscal_v1( magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_ptr dx, magma_int_t incx );
```
"""
function magma_cscal_v1(n, alpha, dx, incx)
    ccall((:magma_cscal_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), n, alpha, dx, incx)
end

"""
    magma_csscal_v1(n, alpha, dx, incx)


### Prototype
```c
void magma_csscal_v1( magma_int_t n, float alpha, magmaFloatComplex_ptr dx, magma_int_t incx );
```
"""
function magma_csscal_v1(n, alpha, dx, incx)
    ccall((:magma_csscal_v1, libmagma), Cvoid, (magma_int_t, Cfloat, magmaFloatComplex_ptr, magma_int_t), n, alpha, dx, incx)
end

"""
    magma_cswap_v1(n, dx, incx, dy, incy)


### Prototype
```c
void magma_cswap_v1( magma_int_t n, magmaFloatComplex_ptr dx, magma_int_t incx, magmaFloatComplex_ptr dy, magma_int_t incy );
```
"""
function magma_cswap_v1(n, dx, incx, dy, incy)
    ccall((:magma_cswap_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_cgemv_v1(transA, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)

=============================================================================
Level 2 BLAS (alphabetical order)
### Prototype
```c
void magma_cgemv_v1( magma_trans_t transA, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy, magma_int_t incy );
```
"""
function magma_cgemv_v1(transA, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magma_cgemv_v1, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), transA, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magma_cgerc_v1(m, n, alpha, dx, incx, dy, incy, dA, ldda)


### Prototype
```c
void magma_cgerc_v1( magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex_const_ptr dy, magma_int_t incy, magmaFloatComplex_ptr dA, magma_int_t ldda );
```
"""
function magma_cgerc_v1(m, n, alpha, dx, incx, dy, incy, dA, ldda)
    ccall((:magma_cgerc_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), m, n, alpha, dx, incx, dy, incy, dA, ldda)
end

"""
    magma_cgeru_v1(m, n, alpha, dx, incx, dy, incy, dA, ldda)


### Prototype
```c
void magma_cgeru_v1( magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex_const_ptr dy, magma_int_t incy, magmaFloatComplex_ptr dA, magma_int_t ldda );
```
"""
function magma_cgeru_v1(m, n, alpha, dx, incx, dy, incy, dA, ldda)
    ccall((:magma_cgeru_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), m, n, alpha, dx, incx, dy, incy, dA, ldda)
end

"""
    magma_chemv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
void magma_chemv_v1( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy, magma_int_t incy );
```
"""
function magma_chemv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magma_chemv_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magma_cher_v1(uplo, n, alpha, dx, incx, dA, ldda)


### Prototype
```c
void magma_cher_v1( magma_uplo_t uplo, magma_int_t n, float alpha, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex_ptr dA, magma_int_t ldda );
```
"""
function magma_cher_v1(uplo, n, alpha, dx, incx, dA, ldda)
    ccall((:magma_cher_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Cfloat, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), uplo, n, alpha, dx, incx, dA, ldda)
end

"""
    magma_cher2_v1(uplo, n, alpha, dx, incx, dy, incy, dA, ldda)


### Prototype
```c
void magma_cher2_v1( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex_const_ptr dy, magma_int_t incy, magmaFloatComplex_ptr dA, magma_int_t ldda );
```
"""
function magma_cher2_v1(uplo, n, alpha, dx, incx, dy, incy, dA, ldda)
    ccall((:magma_cher2_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), uplo, n, alpha, dx, incx, dy, incy, dA, ldda)
end

"""
    magma_ctrmv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)


### Prototype
```c
void magma_ctrmv_v1( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dx, magma_int_t incx );
```
"""
function magma_ctrmv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)
    ccall((:magma_ctrmv_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), uplo, trans, diag, n, dA, ldda, dx, incx)
end

"""
    magma_ctrsv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)


### Prototype
```c
void magma_ctrsv_v1( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dx, magma_int_t incx );
```
"""
function magma_ctrsv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)
    ccall((:magma_ctrsv_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), uplo, trans, diag, n, dA, ldda, dx, incx)
end

"""
    magma_cgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)

=============================================================================
Level 3 BLAS (alphabetical order)
### Prototype
```c
void magma_cgemm_v1( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dB, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_cgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_cgemm_v1, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_csymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magma_csymm_v1( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dB, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_csymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_csymm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_chemm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magma_chemm_v1( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dB, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_chemm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_chemm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_csyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magma_csyr2k_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dB, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_csyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_csyr2k_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_cher2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magma_cher2k_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dB, magma_int_t lddb, float beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_cher2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_cher2k_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Cfloat, magmaFloatComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_csyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)


### Prototype
```c
void magma_csyrk_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_csyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
    ccall((:magma_csyrk_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
end

"""
    magma_cherk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)


### Prototype
```c
void magma_cherk_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, float beta, magmaFloatComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_cherk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
    ccall((:magma_cherk_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, magmaFloatComplex_const_ptr, magma_int_t, Cfloat, magmaFloatComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
end

"""
    magma_ctrmm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)


### Prototype
```c
void magma_ctrmm_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb );
```
"""
function magma_ctrmm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magma_ctrmm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magma_ctrsm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)


### Prototype
```c
void magma_ctrsm_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb );
```
"""
function magma_ctrsm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magma_ctrsm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t), side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magmablas_ztranspose_inplace_v1(n, dA, ldda)

Transpose functions
### Prototype
```c
void magmablas_ztranspose_inplace_v1( magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda );
```
"""
function magmablas_ztranspose_inplace_v1(n, dA, ldda)
    ccall((:magmablas_ztranspose_inplace_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t), n, dA, ldda)
end

"""
    magmablas_ztranspose_conj_inplace_v1(n, dA, ldda)


### Prototype
```c
void magmablas_ztranspose_conj_inplace_v1( magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda );
```
"""
function magmablas_ztranspose_conj_inplace_v1(n, dA, ldda)
    ccall((:magmablas_ztranspose_conj_inplace_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t), n, dA, ldda)
end

"""
    magmablas_ztranspose_v1(m, n, dA, ldda, dAT, lddat)


### Prototype
```c
void magmablas_ztranspose_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dAT, magma_int_t lddat );
```
"""
function magmablas_ztranspose_v1(m, n, dA, ldda, dAT, lddat)
    ccall((:magmablas_ztranspose_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), m, n, dA, ldda, dAT, lddat)
end

"""
    magmablas_ztranspose_conj_v1(m, n, dA, ldda, dAT, lddat)


### Prototype
```c
void magmablas_ztranspose_conj_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dAT, magma_int_t lddat );
```
"""
function magmablas_ztranspose_conj_v1(m, n, dA, ldda, dAT, lddat)
    ccall((:magmablas_ztranspose_conj_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), m, n, dA, ldda, dAT, lddat)
end

"""
    magmablas_zgetmatrix_transpose_v1(m, n, dAT, ldda, hA, lda, dwork, lddwork, nb)


### Prototype
```c
void magmablas_zgetmatrix_transpose_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dAT, magma_int_t ldda, magmaDoubleComplex *hA, magma_int_t lda, magmaDoubleComplex_ptr dwork, magma_int_t lddwork, magma_int_t nb );
```
"""
function magmablas_zgetmatrix_transpose_v1(m, n, dAT, ldda, hA, lda, dwork, lddwork, nb)
    ccall((:magmablas_zgetmatrix_transpose_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t), m, n, dAT, ldda, hA, lda, dwork, lddwork, nb)
end

"""
    magmablas_zsetmatrix_transpose_v1(m, n, hA, lda, dAT, ldda, dwork, lddwork, nb)


### Prototype
```c
void magmablas_zsetmatrix_transpose_v1( magma_int_t m, magma_int_t n, const magmaDoubleComplex *hA, magma_int_t lda, magmaDoubleComplex_ptr dAT, magma_int_t ldda, magmaDoubleComplex_ptr dwork, magma_int_t lddwork, magma_int_t nb );
```
"""
function magmablas_zsetmatrix_transpose_v1(m, n, hA, lda, dAT, ldda, dwork, lddwork, nb)
    ccall((:magmablas_zsetmatrix_transpose_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t), m, n, hA, lda, dAT, ldda, dwork, lddwork, nb)
end

"""
    magmablas_zprbt_v1(n, dA, ldda, du, dv)

RBT-related functions
### Prototype
```c
void magmablas_zprbt_v1( magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr du, magmaDoubleComplex_ptr dv );
```
"""
function magmablas_zprbt_v1(n, dA, ldda, du, dv)
    ccall((:magmablas_zprbt_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr), n, dA, ldda, du, dv)
end

"""
    magmablas_zprbt_mv_v1(n, dv, db)


### Prototype
```c
void magmablas_zprbt_mv_v1( magma_int_t n, magmaDoubleComplex_ptr dv, magmaDoubleComplex_ptr db );
```
"""
function magmablas_zprbt_mv_v1(n, dv, db)
    ccall((:magmablas_zprbt_mv_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr), n, dv, db)
end

"""
    magmablas_zprbt_mtv_v1(n, du, db)


### Prototype
```c
void magmablas_zprbt_mtv_v1( magma_int_t n, magmaDoubleComplex_ptr du, magmaDoubleComplex_ptr db );
```
"""
function magmablas_zprbt_mtv_v1(n, du, db)
    ccall((:magmablas_zprbt_mtv_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr), n, du, db)
end

"""
    magma_zgetmatrix_1D_col_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)

Multi-GPU copy functions
### Prototype
```c
void magma_zgetmatrix_1D_col_bcyclic_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr const dA[], magma_int_t ldda, magmaDoubleComplex *hA, magma_int_t lda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_zgetmatrix_1D_col_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)
    ccall((:magma_zgetmatrix_1D_col_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_const_ptr}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magma_int_t), m, n, dA, ldda, hA, lda, ngpu, nb)
end

"""
    magma_zsetmatrix_1D_col_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)


### Prototype
```c
void magma_zsetmatrix_1D_col_bcyclic_v1( magma_int_t m, magma_int_t n, const magmaDoubleComplex *hA, magma_int_t lda, magmaDoubleComplex_ptr dA[], magma_int_t ldda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_zsetmatrix_1D_col_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)
    ccall((:magma_zsetmatrix_1D_col_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t), m, n, hA, lda, dA, ldda, ngpu, nb)
end

"""
    magma_zgetmatrix_1D_row_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)


### Prototype
```c
void magma_zgetmatrix_1D_row_bcyclic_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr const dA[], magma_int_t ldda, magmaDoubleComplex *hA, magma_int_t lda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_zgetmatrix_1D_row_bcyclic_v1(m, n, dA, ldda, hA, lda, ngpu, nb)
    ccall((:magma_zgetmatrix_1D_row_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_const_ptr}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magma_int_t), m, n, dA, ldda, hA, lda, ngpu, nb)
end

"""
    magma_zsetmatrix_1D_row_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)


### Prototype
```c
void magma_zsetmatrix_1D_row_bcyclic_v1( magma_int_t m, magma_int_t n, const magmaDoubleComplex *hA, magma_int_t lda, magmaDoubleComplex_ptr dA[], magma_int_t ldda, magma_int_t ngpu, magma_int_t nb );
```
"""
function magma_zsetmatrix_1D_row_bcyclic_v1(m, n, hA, lda, dA, ldda, ngpu, nb)
    ccall((:magma_zsetmatrix_1D_row_bcyclic_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t), m, n, hA, lda, dA, ldda, ngpu, nb)
end

"""
    magmablas_zgeadd_v1(m, n, alpha, dA, ldda, dB, lddb)

LAPACK auxiliary functions (alphabetical order)
### Prototype
```c
void magmablas_zgeadd_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb );
```
"""
function magmablas_zgeadd_v1(m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magmablas_zgeadd_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magmablas_zgeadd2_v1(m, n, alpha, dA, ldda, beta, dB, lddb)


### Prototype
```c
void magmablas_zgeadd2_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex beta, magmaDoubleComplex_ptr dB, magma_int_t lddb );
```
"""
function magmablas_zgeadd2_v1(m, n, alpha, dA, ldda, beta, dB, lddb)
    ccall((:magmablas_zgeadd2_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), m, n, alpha, dA, ldda, beta, dB, lddb)
end

"""
    magmablas_zlacpy_v1(uplo, m, n, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_zlacpy_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb );
```
"""
function magmablas_zlacpy_v1(uplo, m, n, dA, ldda, dB, lddb)
    ccall((:magmablas_zlacpy_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), uplo, m, n, dA, ldda, dB, lddb)
end

"""
    magmablas_zlacpy_conj_v1(n, dA1, lda1, dA2, lda2)


### Prototype
```c
void magmablas_zlacpy_conj_v1( magma_int_t n, magmaDoubleComplex_ptr dA1, magma_int_t lda1, magmaDoubleComplex_ptr dA2, magma_int_t lda2 );
```
"""
function magmablas_zlacpy_conj_v1(n, dA1, lda1, dA2, lda2)
    ccall((:magmablas_zlacpy_conj_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), n, dA1, lda1, dA2, lda2)
end

"""
    magmablas_zlacpy_sym_in_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_zlacpy_sym_in_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t *rows, magma_int_t *perm, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb );
```
"""
function magmablas_zlacpy_sym_in_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)
    ccall((:magmablas_zlacpy_sym_in_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), uplo, m, n, rows, perm, dA, ldda, dB, lddb)
end

"""
    magmablas_zlacpy_sym_out_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_zlacpy_sym_out_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t *rows, magma_int_t *perm, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb );
```
"""
function magmablas_zlacpy_sym_out_v1(uplo, m, n, rows, perm, dA, ldda, dB, lddb)
    ccall((:magmablas_zlacpy_sym_out_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), uplo, m, n, rows, perm, dA, ldda, dB, lddb)
end

"""
    magmablas_zlange_v1(norm, m, n, dA, ldda, dwork, lwork)


### Prototype
```c
double magmablas_zlange_v1( magma_norm_t norm, magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dwork, magma_int_t lwork );
```
"""
function magmablas_zlange_v1(norm, m, n, dA, ldda, dwork, lwork)
    ccall((:magmablas_zlange_v1, libmagma), Cdouble, (magma_norm_t, magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), norm, m, n, dA, ldda, dwork, lwork)
end

"""
    magmablas_zlanhe_v1(norm, uplo, n, dA, ldda, dwork, lwork)


### Prototype
```c
double magmablas_zlanhe_v1( magma_norm_t norm, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dwork, magma_int_t lwork );
```
"""
function magmablas_zlanhe_v1(norm, uplo, n, dA, ldda, dwork, lwork)
    ccall((:magmablas_zlanhe_v1, libmagma), Cdouble, (magma_norm_t, magma_uplo_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), norm, uplo, n, dA, ldda, dwork, lwork)
end

"""
    magmablas_zlansy_v1(norm, uplo, n, dA, ldda, dwork, lwork)


### Prototype
```c
double magmablas_zlansy_v1( magma_norm_t norm, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDouble_ptr dwork, magma_int_t lwork );
```
"""
function magmablas_zlansy_v1(norm, uplo, n, dA, ldda, dwork, lwork)
    ccall((:magmablas_zlansy_v1, libmagma), Cdouble, (magma_norm_t, magma_uplo_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t), norm, uplo, n, dA, ldda, dwork, lwork)
end

"""
    magmablas_zlarfg_v1(n, dalpha, dx, incx, dtau)


### Prototype
```c
void magmablas_zlarfg_v1( magma_int_t n, magmaDoubleComplex_ptr dalpha, magmaDoubleComplex_ptr dx, magma_int_t incx, magmaDoubleComplex_ptr dtau );
```
"""
function magmablas_zlarfg_v1(n, dalpha, dx, incx, dtau)
    ccall((:magmablas_zlarfg_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr), n, dalpha, dx, incx, dtau)
end

"""
    magmablas_zlascl_v1(type, kl, ku, cfrom, cto, m, n, dA, ldda, info)


### Prototype
```c
void magmablas_zlascl_v1( magma_type_t type, magma_int_t kl, magma_int_t ku, double cfrom, double cto, magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_zlascl_v1(type, kl, ku, cfrom, cto, m, n, dA, ldda, info)
    ccall((:magmablas_zlascl_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), type, kl, ku, cfrom, cto, m, n, dA, ldda, info)
end

"""
    magmablas_zlascl_2x2_v1(type, m, dW, lddw, dA, ldda, info)


### Prototype
```c
void magmablas_zlascl_2x2_v1( magma_type_t type, magma_int_t m, magmaDoubleComplex_const_ptr dW, magma_int_t lddw, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_zlascl_2x2_v1(type, m, dW, lddw, dA, ldda, info)
    ccall((:magmablas_zlascl_2x2_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), type, m, dW, lddw, dA, ldda, info)
end

"""
    magmablas_zlascl2_v1(type, m, n, dD, dA, ldda, info)


### Prototype
```c
void magmablas_zlascl2_v1( magma_type_t type, magma_int_t m, magma_int_t n, magmaDouble_const_ptr dD, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_zlascl2_v1(type, m, n, dD, dA, ldda, info)
    ccall((:magmablas_zlascl2_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magma_int_t, magmaDouble_const_ptr, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), type, m, n, dD, dA, ldda, info)
end

"""
    magmablas_zlascl_diag_v1(type, m, n, dD, lddd, dA, ldda, info)


### Prototype
```c
void magmablas_zlascl_diag_v1( magma_type_t type, magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dD, magma_int_t lddd, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magmablas_zlascl_diag_v1(type, m, n, dD, lddd, dA, ldda, info)
    ccall((:magmablas_zlascl_diag_v1, libmagma), Cvoid, (magma_type_t, magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), type, m, n, dD, lddd, dA, ldda, info)
end

"""
    magmablas_zlaset_v1(uplo, m, n, offdiag, diag, dA, ldda)


### Prototype
```c
void magmablas_zlaset_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex offdiag, magmaDoubleComplex diag, magmaDoubleComplex_ptr dA, magma_int_t ldda );
```
"""
function magmablas_zlaset_v1(uplo, m, n, offdiag, diag, dA, ldda)
    ccall((:magmablas_zlaset_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), uplo, m, n, offdiag, diag, dA, ldda)
end

"""
    magmablas_zlaset_band_v1(uplo, m, n, k, offdiag, diag, dA, ldda)


### Prototype
```c
void magmablas_zlaset_band_v1( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex offdiag, magmaDoubleComplex diag, magmaDoubleComplex_ptr dA, magma_int_t ldda );
```
"""
function magmablas_zlaset_band_v1(uplo, m, n, k, offdiag, diag, dA, ldda)
    ccall((:magmablas_zlaset_band_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), uplo, m, n, k, offdiag, diag, dA, ldda)
end

"""
    magmablas_zlaswp_v1(n, dAT, ldda, k1, k2, ipiv, inci)


### Prototype
```c
void magmablas_zlaswp_v1( magma_int_t n, magmaDoubleComplex_ptr dAT, magma_int_t ldda, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci );
```
"""
function magmablas_zlaswp_v1(n, dAT, ldda, k1, k2, ipiv, inci)
    ccall((:magmablas_zlaswp_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, dAT, ldda, k1, k2, ipiv, inci)
end

"""
    magmablas_zlaswp2_v1(n, dAT, ldda, k1, k2, d_ipiv, inci)


### Prototype
```c
void magmablas_zlaswp2_v1( magma_int_t n, magmaDoubleComplex_ptr dAT, magma_int_t ldda, magma_int_t k1, magma_int_t k2, magmaInt_const_ptr d_ipiv, magma_int_t inci );
```
"""
function magmablas_zlaswp2_v1(n, dAT, ldda, k1, k2, d_ipiv, inci)
    ccall((:magmablas_zlaswp2_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t, magma_int_t, magmaInt_const_ptr, magma_int_t), n, dAT, ldda, k1, k2, d_ipiv, inci)
end

"""
    magmablas_zlaswp_sym_v1(n, dA, ldda, k1, k2, ipiv, inci)


### Prototype
```c
void magmablas_zlaswp_sym_v1( magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci );
```
"""
function magmablas_zlaswp_sym_v1(n, dA, ldda, k1, k2, ipiv, inci)
    ccall((:magmablas_zlaswp_sym_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, dA, ldda, k1, k2, ipiv, inci)
end

"""
    magmablas_zlaswpx_v1(n, dA, ldx, ldy, k1, k2, ipiv, inci)


### Prototype
```c
void magmablas_zlaswpx_v1( magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldx, magma_int_t ldy, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci );
```
"""
function magmablas_zlaswpx_v1(n, dA, ldx, ldy, k1, k2, ipiv, inci)
    ccall((:magmablas_zlaswpx_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, dA, ldx, ldy, k1, k2, ipiv, inci)
end

"""
    magmablas_zsymmetrize_v1(uplo, m, dA, ldda)


### Prototype
```c
void magmablas_zsymmetrize_v1( magma_uplo_t uplo, magma_int_t m, magmaDoubleComplex_ptr dA, magma_int_t ldda );
```
"""
function magmablas_zsymmetrize_v1(uplo, m, dA, ldda)
    ccall((:magmablas_zsymmetrize_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), uplo, m, dA, ldda)
end

"""
    magmablas_zsymmetrize_tiles_v1(uplo, m, dA, ldda, ntile, mstride, nstride)


### Prototype
```c
void magmablas_zsymmetrize_tiles_v1( magma_uplo_t uplo, magma_int_t m, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t ntile, magma_int_t mstride, magma_int_t nstride );
```
"""
function magmablas_zsymmetrize_tiles_v1(uplo, m, dA, ldda, ntile, mstride, nstride)
    ccall((:magmablas_zsymmetrize_tiles_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t, magma_int_t, magma_int_t), uplo, m, dA, ldda, ntile, mstride, nstride)
end

"""
    magmablas_ztrtri_diag_v1(uplo, diag, n, dA, ldda, d_dinvA)


### Prototype
```c
void magmablas_ztrtri_diag_v1( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr d_dinvA );
```
"""
function magmablas_ztrtri_diag_v1(uplo, diag, n, dA, ldda, d_dinvA)
    ccall((:magmablas_ztrtri_diag_v1, libmagma), Cvoid, (magma_uplo_t, magma_diag_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr), uplo, diag, n, dA, ldda, d_dinvA)
end

"""
    magmablas_dznrm2_adjust_v1(k, dxnorm, dc)

to cleanup (alphabetical order)
### Prototype
```c
void magmablas_dznrm2_adjust_v1( magma_int_t k, magmaDouble_ptr dxnorm, magmaDoubleComplex_ptr dc );
```
"""
function magmablas_dznrm2_adjust_v1(k, dxnorm, dc)
    ccall((:magmablas_dznrm2_adjust_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magmaDoubleComplex_ptr), k, dxnorm, dc)
end

"""
    magmablas_dznrm2_check_v1(m, n, dA, ldda, dxnorm, dlsticc)


### Prototype
```c
void magmablas_dznrm2_check_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDouble_ptr dxnorm, magmaDouble_ptr dlsticc );
```
"""
function magmablas_dznrm2_check_v1(m, n, dA, ldda, dxnorm, dlsticc)
    ccall((:magmablas_dznrm2_check_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDouble_ptr, magmaDouble_ptr), m, n, dA, ldda, dxnorm, dlsticc)
end

"""
    magmablas_dznrm2_cols_v1(m, n, dA, ldda, dxnorm)


### Prototype
```c
void magmablas_dznrm2_cols_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDouble_ptr dxnorm );
```
"""
function magmablas_dznrm2_cols_v1(m, n, dA, ldda, dxnorm)
    ccall((:magmablas_dznrm2_cols_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDouble_ptr), m, n, dA, ldda, dxnorm)
end

"""
    magmablas_dznrm2_row_check_adjust_v1(k, tol, dxnorm, dxnorm2, dC, lddc, dlsticc)


### Prototype
```c
void magmablas_dznrm2_row_check_adjust_v1( magma_int_t k, double tol, magmaDouble_ptr dxnorm, magmaDouble_ptr dxnorm2, magmaDoubleComplex_ptr dC, magma_int_t lddc, magmaDouble_ptr dlsticc );
```
"""
function magmablas_dznrm2_row_check_adjust_v1(k, tol, dxnorm, dxnorm2, dC, lddc, dlsticc)
    ccall((:magmablas_dznrm2_row_check_adjust_v1, libmagma), Cvoid, (magma_int_t, Cdouble, magmaDouble_ptr, magmaDouble_ptr, magmaDoubleComplex_ptr, magma_int_t, magmaDouble_ptr), k, tol, dxnorm, dxnorm2, dC, lddc, dlsticc)
end

"""
    magma_zlarfb_gpu_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork)


### Prototype
```c
magma_int_t magma_zlarfb_gpu_v1( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex_const_ptr dV, magma_int_t lddv, magmaDoubleComplex_const_ptr dT, magma_int_t lddt, magmaDoubleComplex_ptr dC, magma_int_t lddc, magmaDoubleComplex_ptr dwork, magma_int_t ldwork );
```
"""
function magma_zlarfb_gpu_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork)
    ccall((:magma_zlarfb_gpu_v1, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork)
end

"""
    magma_zlarfb_gpu_gemm_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, dworkvt, ldworkvt)


### Prototype
```c
magma_int_t magma_zlarfb_gpu_gemm_v1( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex_const_ptr dV, magma_int_t lddv, magmaDoubleComplex_const_ptr dT, magma_int_t lddt, magmaDoubleComplex_ptr dC, magma_int_t lddc, magmaDoubleComplex_ptr dwork, magma_int_t ldwork, magmaDoubleComplex_ptr dworkvt, magma_int_t ldworkvt );
```
"""
function magma_zlarfb_gpu_gemm_v1(side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, dworkvt, ldworkvt)
    ccall((:magma_zlarfb_gpu_gemm_v1, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), side, trans, direct, storev, m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, dworkvt, ldworkvt)
end

"""
    magma_zlarfbx_gpu_v1(m, k, V, ldv, dT, ldt, c, dwork)


### Prototype
```c
void magma_zlarfbx_gpu_v1( magma_int_t m, magma_int_t k, magmaDoubleComplex_ptr V, magma_int_t ldv, magmaDoubleComplex_ptr dT, magma_int_t ldt, magmaDoubleComplex_ptr c, magmaDoubleComplex_ptr dwork );
```
"""
function magma_zlarfbx_gpu_v1(m, k, V, ldv, dT, ldt, c, dwork)
    ccall((:magma_zlarfbx_gpu_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr), m, k, V, ldv, dT, ldt, c, dwork)
end

"""
    magma_zlarfg_gpu_v1(n, dx0, dx, dtau, dxnorm, dAkk)


### Prototype
```c
void magma_zlarfg_gpu_v1( magma_int_t n, magmaDoubleComplex_ptr dx0, magmaDoubleComplex_ptr dx, magmaDoubleComplex_ptr dtau, magmaDouble_ptr dxnorm, magmaDoubleComplex_ptr dAkk );
```
"""
function magma_zlarfg_gpu_v1(n, dx0, dx, dtau, dxnorm, dAkk)
    ccall((:magma_zlarfg_gpu_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDouble_ptr, magmaDoubleComplex_ptr), n, dx0, dx, dtau, dxnorm, dAkk)
end

"""
    magma_zlarfgtx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter, V, ldv, T, ldt, dwork)


### Prototype
```c
void magma_zlarfgtx_gpu_v1( magma_int_t n, magmaDoubleComplex_ptr dx0, magmaDoubleComplex_ptr dx, magmaDoubleComplex_ptr dtau, magmaDouble_ptr dxnorm, magmaDoubleComplex_ptr dA, magma_int_t iter, magmaDoubleComplex_ptr V, magma_int_t ldv, magmaDoubleComplex_ptr T, magma_int_t ldt, magmaDoubleComplex_ptr dwork );
```
"""
function magma_zlarfgtx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter, V, ldv, T, ldt, dwork)
    ccall((:magma_zlarfgtx_gpu_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDouble_ptr, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr), n, dx0, dx, dtau, dxnorm, dA, iter, V, ldv, T, ldt, dwork)
end

"""
    magma_zlarfgx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter)


### Prototype
```c
void magma_zlarfgx_gpu_v1( magma_int_t n, magmaDoubleComplex_ptr dx0, magmaDoubleComplex_ptr dx, magmaDoubleComplex_ptr dtau, magmaDouble_ptr dxnorm, magmaDoubleComplex_ptr dA, magma_int_t iter );
```
"""
function magma_zlarfgx_gpu_v1(n, dx0, dx, dtau, dxnorm, dA, iter)
    ccall((:magma_zlarfgx_gpu_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDouble_ptr, magmaDoubleComplex_ptr, magma_int_t), n, dx0, dx, dtau, dxnorm, dA, iter)
end

"""
    magma_zlarfx_gpu_v1(m, n, v, tau, C, ldc, xnorm, dT, iter, work)


### Prototype
```c
void magma_zlarfx_gpu_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr v, magmaDoubleComplex_ptr tau, magmaDoubleComplex_ptr C, magma_int_t ldc, magmaDouble_ptr xnorm, magmaDoubleComplex_ptr dT, magma_int_t iter, magmaDoubleComplex_ptr work );
```
"""
function magma_zlarfx_gpu_v1(m, n, v, tau, C, ldc, xnorm, dT, iter, work)
    ccall((:magma_zlarfx_gpu_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magma_int_t, magmaDouble_ptr, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr), m, n, v, tau, C, ldc, xnorm, dT, iter, work)
end

"""
    magmablas_zaxpycp_v1(m, dr, dx, db)

Level 1 BLAS (alphabetical order)
### Prototype
```c
void magmablas_zaxpycp_v1( magma_int_t m, magmaDoubleComplex_ptr dr, magmaDoubleComplex_ptr dx, magmaDoubleComplex_const_ptr db );
```
"""
function magmablas_zaxpycp_v1(m, dr, dx, db)
    ccall((:magmablas_zaxpycp_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDoubleComplex_const_ptr), m, dr, dx, db)
end

"""
    magmablas_zswap_v1(n, dx, incx, dy, incy)


### Prototype
```c
void magmablas_zswap_v1( magma_int_t n, magmaDoubleComplex_ptr dx, magma_int_t incx, magmaDoubleComplex_ptr dy, magma_int_t incy );
```
"""
function magmablas_zswap_v1(n, dx, incx, dy, incy)
    ccall((:magmablas_zswap_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magmablas_zswapblk_v1(order, n, dA, ldda, dB, lddb, i1, i2, ipiv, inci, offset)


### Prototype
```c
void magmablas_zswapblk_v1( magma_order_t order, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_int_t i1, magma_int_t i2, const magma_int_t *ipiv, magma_int_t inci, magma_int_t offset );
```
"""
function magmablas_zswapblk_v1(order, n, dA, ldda, dB, lddb, i1, i2, ipiv, inci, offset)
    ccall((:magmablas_zswapblk_v1, libmagma), Cvoid, (magma_order_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t), order, n, dA, ldda, dB, lddb, i1, i2, ipiv, inci, offset)
end

"""
    magmablas_zswapdblk_v1(n, nb, dA, ldda, inca, dB, lddb, incb)


### Prototype
```c
void magmablas_zswapdblk_v1( magma_int_t n, magma_int_t nb, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t inca, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_int_t incb );
```
"""
function magmablas_zswapdblk_v1(n, nb, dA, ldda, inca, dB, lddb, incb)
    ccall((:magmablas_zswapdblk_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t), n, nb, dA, ldda, inca, dB, lddb, incb)
end

"""
    magmablas_zgemv_v1(trans, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)

Level 2 BLAS (alphabetical order)
### Prototype
```c
void magmablas_zgemv_v1( magma_trans_t trans, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy, magma_int_t incy );
```
"""
function magmablas_zgemv_v1(trans, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_zgemv_v1, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), trans, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_zgemv_conj_v1(m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
void magmablas_zgemv_conj_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy, magma_int_t incy );
```
"""
function magmablas_zgemv_conj_v1(m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_zgemv_conj_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_zhemv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
magma_int_t magmablas_zhemv_v1( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy, magma_int_t incy );
```
"""
function magmablas_zhemv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_zhemv_v1, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_zsymv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
magma_int_t magmablas_zsymv_v1( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy, magma_int_t incy );
```
"""
function magmablas_zsymv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magmablas_zsymv_v1, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magmablas_zgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)

Level 3 BLAS (alphabetical order)
### Prototype
```c
void magmablas_zgemm_v1( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_zgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_zgemm_v1, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_zgemm_reduce_v1(m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_zgemm_reduce_v1( magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_zgemm_reduce_v1(m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_zgemm_reduce_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_zhemm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_zhemm_v1( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_zhemm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_zhemm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_zsymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_zsymm_v1( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_zsymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_zsymm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_zsyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_zsyr2k_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_zsyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_zsyr2k_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_zher2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magmablas_zher2k_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, double beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_zher2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magmablas_zher2k_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Cdouble, magmaDoubleComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magmablas_zsyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)


### Prototype
```c
void magmablas_zsyrk_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_zsyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
    ccall((:magmablas_zsyrk_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
end

"""
    magmablas_zherk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)


### Prototype
```c
void magmablas_zherk_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, double beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magmablas_zherk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
    ccall((:magmablas_zherk_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, magmaDoubleComplex_const_ptr, magma_int_t, Cdouble, magmaDoubleComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
end

"""
    magmablas_ztrsm_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb)


### Prototype
```c
void magmablas_ztrsm_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb );
```
"""
function magmablas_ztrsm_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magmablas_ztrsm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magmablas_ztrsm_outofplace_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)


### Prototype
```c
void magmablas_ztrsm_outofplace_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex_ptr dX, magma_int_t lddx, magma_int_t flag, magmaDoubleComplex_ptr d_dinvA, magma_int_t dinvA_length );
```
"""
function magmablas_ztrsm_outofplace_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
    ccall((:magmablas_ztrsm_outofplace_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
end

"""
    magmablas_ztrsm_work_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)


### Prototype
```c
void magmablas_ztrsm_work_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex_ptr dX, magma_int_t lddx, magma_int_t flag, magmaDoubleComplex_ptr d_dinvA, magma_int_t dinvA_length );
```
"""
function magmablas_ztrsm_work_v1(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
    ccall((:magmablas_ztrsm_work_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, dX, lddx, flag, d_dinvA, dinvA_length)
end

"""
    magma_izamax_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
magma_int_t magma_izamax_v1( magma_int_t n, magmaDoubleComplex_const_ptr dx, magma_int_t incx );
```
"""
function magma_izamax_v1(n, dx, incx)
    ccall((:magma_izamax_v1, libmagma), magma_int_t, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_izamin_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
magma_int_t magma_izamin_v1( magma_int_t n, magmaDoubleComplex_const_ptr dx, magma_int_t incx );
```
"""
function magma_izamin_v1(n, dx, incx)
    ccall((:magma_izamin_v1, libmagma), magma_int_t, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_dzasum_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
double magma_dzasum_v1( magma_int_t n, magmaDoubleComplex_const_ptr dx, magma_int_t incx );
```
"""
function magma_dzasum_v1(n, dx, incx)
    ccall((:magma_dzasum_v1, libmagma), Cdouble, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_zaxpy_v1(n, alpha, dx, incx, dy, incy)


### Prototype
```c
void magma_zaxpy_v1( magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex_ptr dy, magma_int_t incy );
```
"""
function magma_zaxpy_v1(n, alpha, dx, incx, dy, incy)
    ccall((:magma_zaxpy_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), n, alpha, dx, incx, dy, incy)
end

"""
    magma_zcopy_v1(n, dx, incx, dy, incy)


### Prototype
```c
void magma_zcopy_v1( magma_int_t n, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex_ptr dy, magma_int_t incy );
```
"""
function magma_zcopy_v1(n, dx, incx, dy, incy)
    ccall((:magma_zcopy_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_zdotc_v1(n, dx, incx, dy, incy)

in cublas_v2, result returned through output argument
### Prototype
```c
magmaDoubleComplex magma_zdotc_v1( magma_int_t n, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex_const_ptr dy, magma_int_t incy );
```
"""
function magma_zdotc_v1(n, dx, incx, dy, incy)
    ccall((:magma_zdotc_v1, libmagma), magmaDoubleComplex, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_zdotu_v1(n, dx, incx, dy, incy)

in cublas_v2, result returned through output argument
### Prototype
```c
magmaDoubleComplex magma_zdotu_v1( magma_int_t n, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex_const_ptr dy, magma_int_t incy );
```
"""
function magma_zdotu_v1(n, dx, incx, dy, incy)
    ccall((:magma_zdotu_v1, libmagma), magmaDoubleComplex, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_dznrm2_v1(n, dx, incx)

in cublas_v2, result returned through output argument
### Prototype
```c
double magma_dznrm2_v1( magma_int_t n, magmaDoubleComplex_const_ptr dx, magma_int_t incx );
```
"""
function magma_dznrm2_v1(n, dx, incx)
    ccall((:magma_dznrm2_v1, libmagma), Cdouble, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t), n, dx, incx)
end

"""
    magma_zrot_v1(n, dx, incx, dy, incy, dc, ds)


### Prototype
```c
void magma_zrot_v1( magma_int_t n, magmaDoubleComplex_ptr dx, magma_int_t incx, magmaDoubleComplex_ptr dy, magma_int_t incy, double dc, magmaDoubleComplex ds );
```
"""
function magma_zrot_v1(n, dx, incx, dy, incy, dc, ds)
    ccall((:magma_zrot_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Cdouble, magmaDoubleComplex), n, dx, incx, dy, incy, dc, ds)
end

"""
    magma_zdrot_v1(n, dx, incx, dy, incy, dc, ds)


### Prototype
```c
void magma_zdrot_v1( magma_int_t n, magmaDoubleComplex_ptr dx, magma_int_t incx, magmaDoubleComplex_ptr dy, magma_int_t incy, double dc, double ds );
```
"""
function magma_zdrot_v1(n, dx, incx, dy, incy, dc, ds)
    ccall((:magma_zdrot_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Cdouble, Cdouble), n, dx, incx, dy, incy, dc, ds)
end

"""
    magma_zscal_v1(n, alpha, dx, incx)


### Prototype
```c
void magma_zscal_v1( magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dx, magma_int_t incx );
```
"""
function magma_zscal_v1(n, alpha, dx, incx)
    ccall((:magma_zscal_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), n, alpha, dx, incx)
end

"""
    magma_zdscal_v1(n, alpha, dx, incx)


### Prototype
```c
void magma_zdscal_v1( magma_int_t n, double alpha, magmaDoubleComplex_ptr dx, magma_int_t incx );
```
"""
function magma_zdscal_v1(n, alpha, dx, incx)
    ccall((:magma_zdscal_v1, libmagma), Cvoid, (magma_int_t, Cdouble, magmaDoubleComplex_ptr, magma_int_t), n, alpha, dx, incx)
end

"""
    magma_zswap_v1(n, dx, incx, dy, incy)


### Prototype
```c
void magma_zswap_v1( magma_int_t n, magmaDoubleComplex_ptr dx, magma_int_t incx, magmaDoubleComplex_ptr dy, magma_int_t incy );
```
"""
function magma_zswap_v1(n, dx, incx, dy, incy)
    ccall((:magma_zswap_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), n, dx, incx, dy, incy)
end

"""
    magma_zgemv_v1(transA, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)

=============================================================================
Level 2 BLAS (alphabetical order)
### Prototype
```c
void magma_zgemv_v1( magma_trans_t transA, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy, magma_int_t incy );
```
"""
function magma_zgemv_v1(transA, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magma_zgemv_v1, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), transA, m, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magma_zgerc_v1(m, n, alpha, dx, incx, dy, incy, dA, ldda)


### Prototype
```c
void magma_zgerc_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex_const_ptr dy, magma_int_t incy, magmaDoubleComplex_ptr dA, magma_int_t ldda );
```
"""
function magma_zgerc_v1(m, n, alpha, dx, incx, dy, incy, dA, ldda)
    ccall((:magma_zgerc_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), m, n, alpha, dx, incx, dy, incy, dA, ldda)
end

"""
    magma_zgeru_v1(m, n, alpha, dx, incx, dy, incy, dA, ldda)


### Prototype
```c
void magma_zgeru_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex_const_ptr dy, magma_int_t incy, magmaDoubleComplex_ptr dA, magma_int_t ldda );
```
"""
function magma_zgeru_v1(m, n, alpha, dx, incx, dy, incy, dA, ldda)
    ccall((:magma_zgeru_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), m, n, alpha, dx, incx, dy, incy, dA, ldda)
end

"""
    magma_zhemv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)


### Prototype
```c
void magma_zhemv_v1( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy, magma_int_t incy );
```
"""
function magma_zhemv_v1(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
    ccall((:magma_zhemv_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy)
end

"""
    magma_zher_v1(uplo, n, alpha, dx, incx, dA, ldda)


### Prototype
```c
void magma_zher_v1( magma_uplo_t uplo, magma_int_t n, double alpha, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex_ptr dA, magma_int_t ldda );
```
"""
function magma_zher_v1(uplo, n, alpha, dx, incx, dA, ldda)
    ccall((:magma_zher_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Cdouble, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), uplo, n, alpha, dx, incx, dA, ldda)
end

"""
    magma_zher2_v1(uplo, n, alpha, dx, incx, dy, incy, dA, ldda)


### Prototype
```c
void magma_zher2_v1( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex_const_ptr dy, magma_int_t incy, magmaDoubleComplex_ptr dA, magma_int_t ldda );
```
"""
function magma_zher2_v1(uplo, n, alpha, dx, incx, dy, incy, dA, ldda)
    ccall((:magma_zher2_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), uplo, n, alpha, dx, incx, dy, incy, dA, ldda)
end

"""
    magma_ztrmv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)


### Prototype
```c
void magma_ztrmv_v1( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dx, magma_int_t incx );
```
"""
function magma_ztrmv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)
    ccall((:magma_ztrmv_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), uplo, trans, diag, n, dA, ldda, dx, incx)
end

"""
    magma_ztrsv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)


### Prototype
```c
void magma_ztrsv_v1( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dx, magma_int_t incx );
```
"""
function magma_ztrsv_v1(uplo, trans, diag, n, dA, ldda, dx, incx)
    ccall((:magma_ztrsv_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), uplo, trans, diag, n, dA, ldda, dx, incx)
end

"""
    magma_zgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)

=============================================================================
Level 3 BLAS (alphabetical order)
### Prototype
```c
void magma_zgemm_v1( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_zgemm_v1(transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_zgemm_v1, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), transA, transB, m, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_zsymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magma_zsymm_v1( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_zsymm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_zsymm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_zhemm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magma_zhemm_v1( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_zhemm_v1(side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_zhemm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), side, uplo, m, n, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_zsyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magma_zsyr2k_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_zsyr2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_zsyr2k_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_zher2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)


### Prototype
```c
void magma_zher2k_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, double beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_zher2k_v1(uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
    ccall((:magma_zher2k_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Cdouble, magmaDoubleComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, dB, lddb, beta, dC, lddc)
end

"""
    magma_zsyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)


### Prototype
```c
void magma_zsyrk_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_zsyrk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
    ccall((:magma_zsyrk_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
end

"""
    magma_zherk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)


### Prototype
```c
void magma_zherk_v1( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, double beta, magmaDoubleComplex_ptr dC, magma_int_t lddc );
```
"""
function magma_zherk_v1(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
    ccall((:magma_zherk_v1, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, magmaDoubleComplex_const_ptr, magma_int_t, Cdouble, magmaDoubleComplex_ptr, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc)
end

"""
    magma_ztrmm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)


### Prototype
```c
void magma_ztrmm_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb );
```
"""
function magma_ztrmm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magma_ztrmm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magma_ztrsm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)


### Prototype
```c
void magma_ztrsm_v1( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb );
```
"""
function magma_ztrsm_v1(side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
    ccall((:magma_ztrsm_v1, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), side, uplo, trans, diag, m, n, alpha, dA, ldda, dB, lddb)
end

"""
    magmablas_dsaxpycp_v1(m, r, x, b, w)

Mixed precision 
### Prototype
```c
void magmablas_dsaxpycp_v1( magma_int_t m, magmaFloat_ptr r, magmaDouble_ptr x, magmaDouble_const_ptr b, magmaDouble_ptr w );
```
"""
function magmablas_dsaxpycp_v1(m, r, x, b, w)
    ccall((:magmablas_dsaxpycp_v1, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magmaDouble_ptr, magmaDouble_const_ptr, magmaDouble_ptr), m, r, x, b, w)
end

"""
    magmablas_dslaswp_v1(n, A, lda, SA, m, ipiv, incx)


### Prototype
```c
void magmablas_dslaswp_v1( magma_int_t n, magmaDouble_ptr A, magma_int_t lda, magmaFloat_ptr SA, magma_int_t m, const magma_int_t *ipiv, magma_int_t incx );
```
"""
function magmablas_dslaswp_v1(n, A, lda, SA, m, ipiv, incx)
    ccall((:magmablas_dslaswp_v1, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, A, lda, SA, m, ipiv, incx)
end

"""
    magmablas_dlag2s_v1(m, n, A, lda, SA, ldsa, info)


### Prototype
```c
void magmablas_dlag2s_v1( magma_int_t m, magma_int_t n, magmaDouble_const_ptr A, magma_int_t lda, magmaFloat_ptr SA, magma_int_t ldsa, magma_int_t *info );
```
"""
function magmablas_dlag2s_v1(m, n, A, lda, SA, ldsa, info)
    ccall((:magmablas_dlag2s_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, SA, ldsa, info)
end

"""
    magmablas_slag2d_v1(m, n, SA, ldsa, A, lda, info)


### Prototype
```c
void magmablas_slag2d_v1( magma_int_t m, magma_int_t n, magmaFloat_const_ptr SA, magma_int_t ldsa, magmaDouble_ptr A, magma_int_t lda, magma_int_t *info );
```
"""
function magmablas_slag2d_v1(m, n, SA, ldsa, A, lda, info)
    ccall((:magmablas_slag2d_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), m, n, SA, ldsa, A, lda, info)
end

"""
    magmablas_dlat2s_v1(uplo, n, A, lda, SA, ldsa, info)


### Prototype
```c
void magmablas_dlat2s_v1( magma_uplo_t uplo, magma_int_t n, magmaDouble_const_ptr A, magma_int_t lda, magmaFloat_ptr SA, magma_int_t ldsa, magma_int_t *info );
```
"""
function magmablas_dlat2s_v1(uplo, n, A, lda, SA, ldsa, info)
    ccall((:magmablas_dlat2s_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, SA, ldsa, info)
end

"""
    magmablas_slat2d_v1(uplo, n, SA, ldsa, A, lda, info)


### Prototype
```c
void magmablas_slat2d_v1( magma_uplo_t uplo, magma_int_t n, magmaFloat_const_ptr SA, magma_int_t ldsa, magmaDouble_ptr A, magma_int_t lda, magma_int_t *info );
```
"""
function magmablas_slat2d_v1(uplo, n, SA, ldsa, A, lda, info)
    ccall((:magmablas_slat2d_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, SA, ldsa, A, lda, info)
end

"""
    magmablas_zcaxpycp_v1(m, r, x, b, w)

Mixed precision 
### Prototype
```c
void magmablas_zcaxpycp_v1( magma_int_t m, magmaFloatComplex_ptr r, magmaDoubleComplex_ptr x, magmaDoubleComplex_const_ptr b, magmaDoubleComplex_ptr w );
```
"""
function magmablas_zcaxpycp_v1(m, r, x, b, w)
    ccall((:magmablas_zcaxpycp_v1, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magmaDoubleComplex_ptr, magmaDoubleComplex_const_ptr, magmaDoubleComplex_ptr), m, r, x, b, w)
end

"""
    magmablas_zclaswp_v1(n, A, lda, SA, m, ipiv, incx)


### Prototype
```c
void magmablas_zclaswp_v1( magma_int_t n, magmaDoubleComplex_ptr A, magma_int_t lda, magmaFloatComplex_ptr SA, magma_int_t m, const magma_int_t *ipiv, magma_int_t incx );
```
"""
function magmablas_zclaswp_v1(n, A, lda, SA, m, ipiv, incx)
    ccall((:magmablas_zclaswp_v1, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t), n, A, lda, SA, m, ipiv, incx)
end

"""
    magmablas_zlag2c_v1(m, n, A, lda, SA, ldsa, info)


### Prototype
```c
void magmablas_zlag2c_v1( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr A, magma_int_t lda, magmaFloatComplex_ptr SA, magma_int_t ldsa, magma_int_t *info );
```
"""
function magmablas_zlag2c_v1(m, n, A, lda, SA, ldsa, info)
    ccall((:magmablas_zlag2c_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, SA, ldsa, info)
end

"""
    magmablas_clag2z_v1(m, n, SA, ldsa, A, lda, info)


### Prototype
```c
void magmablas_clag2z_v1( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr SA, magma_int_t ldsa, magmaDoubleComplex_ptr A, magma_int_t lda, magma_int_t *info );
```
"""
function magmablas_clag2z_v1(m, n, SA, ldsa, A, lda, info)
    ccall((:magmablas_clag2z_v1, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), m, n, SA, ldsa, A, lda, info)
end

"""
    magmablas_zlat2c_v1(uplo, n, A, lda, SA, ldsa, info)


### Prototype
```c
void magmablas_zlat2c_v1( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_const_ptr A, magma_int_t lda, magmaFloatComplex_ptr SA, magma_int_t ldsa, magma_int_t *info );
```
"""
function magmablas_zlat2c_v1(uplo, n, A, lda, SA, ldsa, info)
    ccall((:magmablas_zlat2c_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, SA, ldsa, info)
end

"""
    magmablas_clat2z_v1(uplo, n, SA, ldsa, A, lda, info)


### Prototype
```c
void magmablas_clat2z_v1( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_const_ptr SA, magma_int_t ldsa, magmaDoubleComplex_ptr A, magma_int_t lda, magma_int_t *info );
```
"""
function magmablas_clat2z_v1(uplo, n, SA, ldsa, A, lda, info)
    ccall((:magmablas_clat2z_v1, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, SA, ldsa, A, lda, info)
end

"""
Define new type that the precision generator will not change (matches PLASMA)
"""
const real_Double_t = Cdouble

const magma_event_t = Cint

"""
use short for cuda older than 7.5
corresponding routines would not work anyway since there is no half precision
"""
const magmaHalf = Cshort

"""
    magma_queue_get_cuda_stream(queue)


### Prototype
```c
cudaStream_t magma_queue_get_cuda_stream ( magma_queue_t queue );
```
"""
function magma_queue_get_cuda_stream(queue)
    ccall((:magma_queue_get_cuda_stream, libmagma), Cint, (magma_queue_t,), queue)
end

"""
    magma_queue_get_cublas_handle(queue)


### Prototype
```c
cublasHandle_t magma_queue_get_cublas_handle ( magma_queue_t queue );
```
"""
function magma_queue_get_cublas_handle(queue)
    ccall((:magma_queue_get_cublas_handle, libmagma), Cint, (magma_queue_t,), queue)
end

"""
    magma_queue_get_cusparse_handle(queue)


### Prototype
```c
cusparseHandle_t magma_queue_get_cusparse_handle( magma_queue_t queue );
```
"""
function magma_queue_get_cusparse_handle(queue)
    ccall((:magma_queue_get_cusparse_handle, libmagma), Cint, (magma_queue_t,), queue)
end

"""
    magma_cabs(x)

for MAGMA_[CZ]_ABS
### Prototype
```c
double magma_cabs ( magmaDoubleComplex x );
```
"""
function magma_cabs(x)
    ccall((:magma_cabs, libmagma), Cdouble, (magmaDoubleComplex,), x)
end

"""
    magma_cabsf(x)


### Prototype
```c
float magma_cabsf( magmaFloatComplex x );
```
"""
function magma_cabsf(x)
    ccall((:magma_cabsf, libmagma), Cfloat, (magmaFloatComplex,), x)
end

const magmaHalf_ptr = Ptr{magmaHalf}

const magmaHalf_const_ptr = Ptr{magmaHalf}

"""
    magma_bool_t

-----------------------------------------------------------------------------
parameter constants
numbering is consistent with CBLAS and PLASMA; see plasma/include/plasma.h
also with lapack_cwrapper/include/lapack_enum.h
see http://www.netlib.org/lapack/lapwrapc/
"""
@enum magma_bool_t::UInt32 begin
    MagmaFalse = 0
    MagmaTrue = 1
end

@enum magma_dist_t::UInt32 begin
    MagmaDistUniform = 201
    MagmaDistSymmetric = 202
    MagmaDistNormal = 203
end

@enum magma_sym_t::UInt32 begin
    MagmaHermGeev = 241
    MagmaHermPoev = 242
    MagmaNonsymPosv = 243
    MagmaSymPosv = 244
end

@enum magma_pack_t::UInt32 begin
    MagmaNoPacking = 291
    MagmaPackSubdiag = 292
    MagmaPackSupdiag = 293
    MagmaPackColumn = 294
    MagmaPackRow = 295
    MagmaPackLowerBand = 296
    MagmaPackUpeprBand = 297
    MagmaPackAll = 298
end

@enum magma_vec_t::UInt32 begin
    MagmaNoVec = 301
    MagmaVec = 302
    MagmaIVec = 303
    MagmaAllVec = 304
    MagmaSomeVec = 305
    MagmaOverwriteVec = 306
    MagmaBacktransVec = 307
end

@enum magma_range_t::UInt32 begin
    MagmaRangeAll = 311
    MagmaRangeV = 312
    MagmaRangeI = 313
end

@enum magma_vect_t::UInt32 begin
    MagmaQ = 322
    MagmaP = 323
end

@enum magma_mode_t::UInt32 begin
    MagmaHybrid = 701
    MagmaNative = 702
end

"""
    magma_storage_t

-----------------------------------------------------------------------------
sparse
"""
@enum magma_storage_t::UInt32 begin
    Magma_CSR = 611
    Magma_ELLPACKT = 612
    Magma_ELL = 613
    Magma_DENSE = 614
    Magma_BCSR = 615
    Magma_CSC = 616
    Magma_HYB = 617
    Magma_COO = 618
    Magma_ELLRT = 619
    Magma_SPMVFUNCTION = 620
    Magma_SELLP = 621
    Magma_ELLD = 622
    Magma_CSRLIST = 623
    Magma_CSRD = 624
    Magma_CSRL = 627
    Magma_CSRU = 628
    Magma_CSRCOO = 629
    Magma_CUCSR = 630
    Magma_COOLIST = 631
    Magma_CSR5 = 632
end

@enum magma_solver_type::UInt32 begin
    Magma_CG = 431
    Magma_CGMERGE = 432
    Magma_GMRES = 433
    Magma_BICGSTAB = 434
    Magma_BICGSTABMERGE = 435
    Magma_BICGSTABMERGE2 = 436
    Magma_JACOBI = 437
    Magma_GS = 438
    Magma_ITERREF = 439
    Magma_BCSRLU = 440
    Magma_PCG = 441
    Magma_PGMRES = 442
    Magma_PBICGSTAB = 443
    Magma_PASTIX = 444
    Magma_ILU = 445
    Magma_ICC = 446
    Magma_PARILU = 447
    Magma_PARIC = 448
    Magma_BAITER = 449
    Magma_LOBPCG = 450
    Magma_NONE = 451
    Magma_FUNCTION = 452
    Magma_IDR = 453
    Magma_PIDR = 454
    Magma_CGS = 455
    Magma_PCGS = 456
    Magma_CGSMERGE = 457
    Magma_PCGSMERGE = 458
    Magma_TFQMR = 459
    Magma_PTFQMR = 460
    Magma_TFQMRMERGE = 461
    Magma_PTFQMRMERGE = 462
    Magma_QMR = 463
    Magma_PQMR = 464
    Magma_QMRMERGE = 465
    Magma_PQMRMERGE = 466
    Magma_BOMBARD = 490
    Magma_BOMBARDMERGE = 491
    Magma_PCGMERGE = 492
    Magma_BAITERO = 493
    Magma_IDRMERGE = 494
    Magma_PBICGSTABMERGE = 495
    Magma_PARICT = 496
    Magma_CUSTOMIC = 497
    Magma_CUSTOMILU = 498
    Magma_PIDRMERGE = 499
    Magma_BICG = 500
    Magma_BICGMERGE = 501
    Magma_PBICG = 502
    Magma_PBICGMERGE = 503
    Magma_LSQR = 504
    Magma_PARILUT = 505
    Magma_ISAI = 506
    Magma_CUSOLVE = 507
    Magma_VBJACOBI = 508
    Magma_PARDISO = 509
    Magma_SYNCFREESOLVE = 510
    Magma_ILUT = 511
end

@enum magma_ortho_t::UInt32 begin
    Magma_CGSO = 561
    Magma_FUSED_CGSO = 562
    Magma_MGSO = 563
end

@enum magma_location_t::UInt32 begin
    Magma_CPU = 571
    Magma_DEV = 572
end

@enum magma_symmetry_t::UInt32 begin
    Magma_GENERAL = 581
    Magma_SYMMETRIC = 582
end

@enum magma_diagorder_t::UInt32 begin
    Magma_ORDERED = 591
    Magma_DIAGFIRST = 592
    Magma_UNITY = 593
    Magma_VALUE = 594
end

@enum magma_precision::UInt32 begin
    Magma_DCOMPLEX = 501
    Magma_FCOMPLEX = 502
    Magma_DOUBLE = 503
    Magma_FLOAT = 504
end

@enum magma_scale_t::UInt32 begin
    Magma_NOSCALE = 511
    Magma_UNITROW = 512
    Magma_UNITDIAG = 513
    Magma_UNITCOL = 514
    Magma_UNITROWCOL = 515
    Magma_UNITDIAGCOL = 516
end

@enum magma_operation_t::UInt32 begin
    Magma_SOLVE = 801
    Magma_SETUPSOLVE = 802
    Magma_APPLYSOLVE = 803
    Magma_DESTROYSOLVE = 804
    Magma_INFOSOLVE = 805
    Magma_GENERATEPREC = 806
    Magma_PRECONDLEFT = 807
    Magma_PRECONDRIGHT = 808
    Magma_TRANSPOSE = 809
    Magma_SPMV = 810
end

@enum magma_refinement_t::UInt32 begin
    Magma_PREC_SS = 900
    Magma_PREC_SST = 901
    Magma_PREC_HS = 902
    Magma_PREC_HST = 903
    Magma_PREC_SH = 904
    Magma_PREC_SHT = 905
    Magma_PREC_XHS_H = 910
    Magma_PREC_XHS_HTC = 911
    Magma_PREC_XHS_161616 = 912
    Magma_PREC_XHS_161616TC = 913
    Magma_PREC_XHS_161632TC = 914
    Magma_PREC_XSH_S = 915
    Magma_PREC_XSH_STC = 916
    Magma_PREC_XSH_163232TC = 917
    Magma_PREC_XSH_323232TC = 918
    Magma_REFINE_IRSTRS = 920
    Magma_REFINE_IRDTRS = 921
    Magma_REFINE_IRGMSTRS = 922
    Magma_REFINE_IRGMDTRS = 923
    Magma_REFINE_GMSTRS = 924
    Magma_REFINE_GMDTRS = 925
    Magma_REFINE_GMGMSTRS = 926
    Magma_REFINE_GMGMDTRS = 927
    Magma_PREC_HD = 930
end

@enum magma_mp_type_t::UInt32 begin
    Magma_MP_BASE_SS = 950
    Magma_MP_BASE_DD = 951
    Magma_MP_BASE_XHS = 952
    Magma_MP_BASE_XSH = 953
    Magma_MP_BASE_XHD = 954
    Magma_MP_BASE_XDH = 955
    Magma_MP_ENABLE_DFLT_MATH = 960
    Magma_MP_ENABLE_TC_MATH = 961
    Magma_MP_SGEMM = 962
    Magma_MP_HGEMM = 963
    Magma_MP_GEMEX_I32_O32_C32 = 964
    Magma_MP_GEMEX_I16_O32_C32 = 965
    Magma_MP_GEMEX_I16_O16_C32 = 966
    Magma_MP_GEMEX_I16_O16_C16 = 967
    Magma_MP_TC_SGEMM = 968
    Magma_MP_TC_HGEMM = 969
    Magma_MP_TC_GEMEX_I32_O32_C32 = 970
    Magma_MP_TC_GEMEX_I16_O32_C32 = 971
    Magma_MP_TC_GEMEX_I16_O16_C32 = 972
    Magma_MP_TC_GEMEX_I16_O16_C16 = 973
end

"""
    magma_bool_const(lapack_char)

-----------------------------------------------------------------------------
Convert LAPACK character constants to MAGMA constants.
This is a one-to-many mapping, requiring multiple translators
(e.g., "N" can be NoTrans or NonUnit or NoVec).
### Prototype
```c
magma_bool_t magma_bool_const ( char lapack_char );
```
"""
function magma_bool_const(lapack_char)
    ccall((:magma_bool_const, libmagma), magma_bool_t, (Cchar,), lapack_char)
end

"""
    magma_order_const(lapack_char)


### Prototype
```c
magma_order_t magma_order_const ( char lapack_char );
```
"""
function magma_order_const(lapack_char)
    ccall((:magma_order_const, libmagma), magma_order_t, (Cchar,), lapack_char)
end

"""
    magma_trans_const(lapack_char)


### Prototype
```c
magma_trans_t magma_trans_const ( char lapack_char );
```
"""
function magma_trans_const(lapack_char)
    ccall((:magma_trans_const, libmagma), magma_trans_t, (Cchar,), lapack_char)
end

"""
    magma_uplo_const(lapack_char)


### Prototype
```c
magma_uplo_t magma_uplo_const ( char lapack_char );
```
"""
function magma_uplo_const(lapack_char)
    ccall((:magma_uplo_const, libmagma), magma_uplo_t, (Cchar,), lapack_char)
end

"""
    magma_diag_const(lapack_char)


### Prototype
```c
magma_diag_t magma_diag_const ( char lapack_char );
```
"""
function magma_diag_const(lapack_char)
    ccall((:magma_diag_const, libmagma), magma_diag_t, (Cchar,), lapack_char)
end

"""
    magma_side_const(lapack_char)


### Prototype
```c
magma_side_t magma_side_const ( char lapack_char );
```
"""
function magma_side_const(lapack_char)
    ccall((:magma_side_const, libmagma), magma_side_t, (Cchar,), lapack_char)
end

"""
    magma_norm_const(lapack_char)


### Prototype
```c
magma_norm_t magma_norm_const ( char lapack_char );
```
"""
function magma_norm_const(lapack_char)
    ccall((:magma_norm_const, libmagma), magma_norm_t, (Cchar,), lapack_char)
end

"""
    magma_dist_const(lapack_char)


### Prototype
```c
magma_dist_t magma_dist_const ( char lapack_char );
```
"""
function magma_dist_const(lapack_char)
    ccall((:magma_dist_const, libmagma), magma_dist_t, (Cchar,), lapack_char)
end

"""
    magma_sym_const(lapack_char)


### Prototype
```c
magma_sym_t magma_sym_const ( char lapack_char );
```
"""
function magma_sym_const(lapack_char)
    ccall((:magma_sym_const, libmagma), magma_sym_t, (Cchar,), lapack_char)
end

"""
    magma_pack_const(lapack_char)


### Prototype
```c
magma_pack_t magma_pack_const ( char lapack_char );
```
"""
function magma_pack_const(lapack_char)
    ccall((:magma_pack_const, libmagma), magma_pack_t, (Cchar,), lapack_char)
end

"""
    magma_vec_const(lapack_char)


### Prototype
```c
magma_vec_t magma_vec_const ( char lapack_char );
```
"""
function magma_vec_const(lapack_char)
    ccall((:magma_vec_const, libmagma), magma_vec_t, (Cchar,), lapack_char)
end

"""
    magma_range_const(lapack_char)


### Prototype
```c
magma_range_t magma_range_const ( char lapack_char );
```
"""
function magma_range_const(lapack_char)
    ccall((:magma_range_const, libmagma), magma_range_t, (Cchar,), lapack_char)
end

"""
    magma_vect_const(lapack_char)


### Prototype
```c
magma_vect_t magma_vect_const ( char lapack_char );
```
"""
function magma_vect_const(lapack_char)
    ccall((:magma_vect_const, libmagma), magma_vect_t, (Cchar,), lapack_char)
end

"""
    magma_direct_const(lapack_char)


### Prototype
```c
magma_direct_t magma_direct_const( char lapack_char );
```
"""
function magma_direct_const(lapack_char)
    ccall((:magma_direct_const, libmagma), magma_direct_t, (Cchar,), lapack_char)
end

"""
    magma_storev_const(lapack_char)


### Prototype
```c
magma_storev_t magma_storev_const( char lapack_char );
```
"""
function magma_storev_const(lapack_char)
    ccall((:magma_storev_const, libmagma), magma_storev_t, (Cchar,), lapack_char)
end

"""
    lapack_const_str(magma_const)

magma  defines lapack_const_str, which returns char* to call lapack (Fortran interface).
plasma defines lapack_const, which is roughly the same as MAGMA's lapacke_const
(returns a char instead of char*) to call lapacke (C interface).
### Prototype
```c
const char* lapack_const_str ( int magma_const );
```
"""
function lapack_const_str(magma_const)
    ccall((:lapack_const_str, libmagma), Ptr{Cchar}, (Cint,), magma_const)
end

"""
    lapack_bool_const(magma_const)


### Prototype
```c
const char* lapack_bool_const ( magma_bool_t magma_const );
```
"""
function lapack_bool_const(magma_const)
    ccall((:lapack_bool_const, libmagma), Ptr{Cchar}, (magma_bool_t,), magma_const)
end

"""
    lapack_order_const(magma_const)


### Prototype
```c
const char* lapack_order_const ( magma_order_t magma_const );
```
"""
function lapack_order_const(magma_const)
    ccall((:lapack_order_const, libmagma), Ptr{Cchar}, (magma_order_t,), magma_const)
end

"""
    lapack_trans_const(magma_const)


### Prototype
```c
const char* lapack_trans_const ( magma_trans_t magma_const );
```
"""
function lapack_trans_const(magma_const)
    ccall((:lapack_trans_const, libmagma), Ptr{Cchar}, (magma_trans_t,), magma_const)
end

"""
    lapack_uplo_const(magma_const)


### Prototype
```c
const char* lapack_uplo_const ( magma_uplo_t magma_const );
```
"""
function lapack_uplo_const(magma_const)
    ccall((:lapack_uplo_const, libmagma), Ptr{Cchar}, (magma_uplo_t,), magma_const)
end

"""
    lapack_diag_const(magma_const)


### Prototype
```c
const char* lapack_diag_const ( magma_diag_t magma_const );
```
"""
function lapack_diag_const(magma_const)
    ccall((:lapack_diag_const, libmagma), Ptr{Cchar}, (magma_diag_t,), magma_const)
end

"""
    lapack_side_const(magma_const)


### Prototype
```c
const char* lapack_side_const ( magma_side_t magma_const );
```
"""
function lapack_side_const(magma_const)
    ccall((:lapack_side_const, libmagma), Ptr{Cchar}, (magma_side_t,), magma_const)
end

"""
    lapack_norm_const(magma_const)


### Prototype
```c
const char* lapack_norm_const ( magma_norm_t magma_const );
```
"""
function lapack_norm_const(magma_const)
    ccall((:lapack_norm_const, libmagma), Ptr{Cchar}, (magma_norm_t,), magma_const)
end

"""
    lapack_dist_const(magma_const)


### Prototype
```c
const char* lapack_dist_const ( magma_dist_t magma_const );
```
"""
function lapack_dist_const(magma_const)
    ccall((:lapack_dist_const, libmagma), Ptr{Cchar}, (magma_dist_t,), magma_const)
end

"""
    lapack_sym_const(magma_const)


### Prototype
```c
const char* lapack_sym_const ( magma_sym_t magma_const );
```
"""
function lapack_sym_const(magma_const)
    ccall((:lapack_sym_const, libmagma), Ptr{Cchar}, (magma_sym_t,), magma_const)
end

"""
    lapack_pack_const(magma_const)


### Prototype
```c
const char* lapack_pack_const ( magma_pack_t magma_const );
```
"""
function lapack_pack_const(magma_const)
    ccall((:lapack_pack_const, libmagma), Ptr{Cchar}, (magma_pack_t,), magma_const)
end

"""
    lapack_vec_const(magma_const)


### Prototype
```c
const char* lapack_vec_const ( magma_vec_t magma_const );
```
"""
function lapack_vec_const(magma_const)
    ccall((:lapack_vec_const, libmagma), Ptr{Cchar}, (magma_vec_t,), magma_const)
end

"""
    lapack_range_const(magma_const)


### Prototype
```c
const char* lapack_range_const ( magma_range_t magma_const );
```
"""
function lapack_range_const(magma_const)
    ccall((:lapack_range_const, libmagma), Ptr{Cchar}, (magma_range_t,), magma_const)
end

"""
    lapack_vect_const(magma_const)


### Prototype
```c
const char* lapack_vect_const ( magma_vect_t magma_const );
```
"""
function lapack_vect_const(magma_const)
    ccall((:lapack_vect_const, libmagma), Ptr{Cchar}, (magma_vect_t,), magma_const)
end

"""
    lapack_direct_const(magma_const)


### Prototype
```c
const char* lapack_direct_const( magma_direct_t magma_const );
```
"""
function lapack_direct_const(magma_const)
    ccall((:lapack_direct_const, libmagma), Ptr{Cchar}, (magma_direct_t,), magma_const)
end

"""
    lapack_storev_const(magma_const)


### Prototype
```c
const char* lapack_storev_const( magma_storev_t magma_const );
```
"""
function lapack_storev_const(magma_const)
    ccall((:lapack_storev_const, libmagma), Ptr{Cchar}, (magma_storev_t,), magma_const)
end

"""
    lapacke_const(magma_const)


### Prototype
```c
static inline char lapacke_const ( int magma_const );
```
"""
function lapacke_const(magma_const)
    ccall((:lapacke_const, libmagma), Cchar, (Cint,), magma_const)
end

"""
    lapacke_bool_const(magma_const)


### Prototype
```c
static inline char lapacke_bool_const ( magma_bool_t magma_const );
```
"""
function lapacke_bool_const(magma_const)
    ccall((:lapacke_bool_const, libmagma), Cchar, (magma_bool_t,), magma_const)
end

"""
    lapacke_order_const(magma_const)


### Prototype
```c
static inline char lapacke_order_const ( magma_order_t magma_const );
```
"""
function lapacke_order_const(magma_const)
    ccall((:lapacke_order_const, libmagma), Cchar, (magma_order_t,), magma_const)
end

"""
    lapacke_trans_const(magma_const)


### Prototype
```c
static inline char lapacke_trans_const ( magma_trans_t magma_const );
```
"""
function lapacke_trans_const(magma_const)
    ccall((:lapacke_trans_const, libmagma), Cchar, (magma_trans_t,), magma_const)
end

"""
    lapacke_uplo_const(magma_const)


### Prototype
```c
static inline char lapacke_uplo_const ( magma_uplo_t magma_const );
```
"""
function lapacke_uplo_const(magma_const)
    ccall((:lapacke_uplo_const, libmagma), Cchar, (magma_uplo_t,), magma_const)
end

"""
    lapacke_diag_const(magma_const)


### Prototype
```c
static inline char lapacke_diag_const ( magma_diag_t magma_const );
```
"""
function lapacke_diag_const(magma_const)
    ccall((:lapacke_diag_const, libmagma), Cchar, (magma_diag_t,), magma_const)
end

"""
    lapacke_side_const(magma_const)


### Prototype
```c
static inline char lapacke_side_const ( magma_side_t magma_const );
```
"""
function lapacke_side_const(magma_const)
    ccall((:lapacke_side_const, libmagma), Cchar, (magma_side_t,), magma_const)
end

"""
    lapacke_norm_const(magma_const)


### Prototype
```c
static inline char lapacke_norm_const ( magma_norm_t magma_const );
```
"""
function lapacke_norm_const(magma_const)
    ccall((:lapacke_norm_const, libmagma), Cchar, (magma_norm_t,), magma_const)
end

"""
    lapacke_dist_const(magma_const)


### Prototype
```c
static inline char lapacke_dist_const ( magma_dist_t magma_const );
```
"""
function lapacke_dist_const(magma_const)
    ccall((:lapacke_dist_const, libmagma), Cchar, (magma_dist_t,), magma_const)
end

"""
    lapacke_sym_const(magma_const)


### Prototype
```c
static inline char lapacke_sym_const ( magma_sym_t magma_const );
```
"""
function lapacke_sym_const(magma_const)
    ccall((:lapacke_sym_const, libmagma), Cchar, (magma_sym_t,), magma_const)
end

"""
    lapacke_pack_const(magma_const)


### Prototype
```c
static inline char lapacke_pack_const ( magma_pack_t magma_const );
```
"""
function lapacke_pack_const(magma_const)
    ccall((:lapacke_pack_const, libmagma), Cchar, (magma_pack_t,), magma_const)
end

"""
    lapacke_vec_const(magma_const)


### Prototype
```c
static inline char lapacke_vec_const ( magma_vec_t magma_const );
```
"""
function lapacke_vec_const(magma_const)
    ccall((:lapacke_vec_const, libmagma), Cchar, (magma_vec_t,), magma_const)
end

"""
    lapacke_range_const(magma_const)


### Prototype
```c
static inline char lapacke_range_const ( magma_range_t magma_const );
```
"""
function lapacke_range_const(magma_const)
    ccall((:lapacke_range_const, libmagma), Cchar, (magma_range_t,), magma_const)
end

"""
    lapacke_vect_const(magma_const)


### Prototype
```c
static inline char lapacke_vect_const ( magma_vect_t magma_const );
```
"""
function lapacke_vect_const(magma_const)
    ccall((:lapacke_vect_const, libmagma), Cchar, (magma_vect_t,), magma_const)
end

"""
    lapacke_direct_const(magma_const)


### Prototype
```c
static inline char lapacke_direct_const( magma_direct_t magma_const );
```
"""
function lapacke_direct_const(magma_const)
    ccall((:lapacke_direct_const, libmagma), Cchar, (magma_direct_t,), magma_const)
end

"""
    lapacke_storev_const(magma_const)


### Prototype
```c
static inline char lapacke_storev_const( magma_storev_t magma_const );
```
"""
function lapacke_storev_const(magma_const)
    ccall((:lapacke_storev_const, libmagma), Cchar, (magma_storev_t,), magma_const)
end

"""
    magmablas_zgetmatrix_transpose_mgpu(ngpu, m, n, nb, dAT, ldda, hA, lda, dwork, lddw, queues)


### Prototype
```c
void magmablas_zgetmatrix_transpose_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magma_int_t nb, magmaDoubleComplex_const_ptr const dAT[], magma_int_t ldda, magmaDoubleComplex *hA, magma_int_t lda, magmaDoubleComplex_ptr dwork[], magma_int_t lddw, magma_queue_t queues[][2] );
```
"""
function magmablas_zgetmatrix_transpose_mgpu(ngpu, m, n, nb, dAT, ldda, hA, lda, dwork, lddw, queues)
    ccall((:magmablas_zgetmatrix_transpose_mgpu, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_const_ptr}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{NTuple{2, magma_queue_t}}), ngpu, m, n, nb, dAT, ldda, hA, lda, dwork, lddw, queues)
end

"""
    magmablas_zsetmatrix_transpose_mgpu(ngpu, m, n, nb, hA, lda, dAT, ldda, dwork, lddw, queues)


### Prototype
```c
void magmablas_zsetmatrix_transpose_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magma_int_t nb, const magmaDoubleComplex *hA, magma_int_t lda, magmaDoubleComplex_ptr dAT[], magma_int_t ldda, magmaDoubleComplex_ptr dwork[], magma_int_t lddw, magma_queue_t queues[][2] );
```
"""
function magmablas_zsetmatrix_transpose_mgpu(ngpu, m, n, nb, hA, lda, dAT, ldda, dwork, lddw, queues)
    ccall((:magmablas_zsetmatrix_transpose_mgpu, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{NTuple{2, magma_queue_t}}), ngpu, m, n, nb, hA, lda, dAT, ldda, dwork, lddw, queues)
end

"""
    magma_zhtodhe(ngpu, uplo, n, nb, A, lda, dA, ldda, queues, info)

in src/zhetrd_mgpu.cpp
TODO rename zsetmatrix_sy or similar
### Prototype
```c
magma_int_t magma_zhtodhe( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex_ptr dA[], magma_int_t ldda, magma_queue_t queues[][10], magma_int_t *info );
```
"""
function magma_zhtodhe(ngpu, uplo, n, nb, A, lda, dA, ldda, queues, info)
    ccall((:magma_zhtodhe, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{NTuple{10, magma_queue_t}}, Ptr{magma_int_t}), ngpu, uplo, n, nb, A, lda, dA, ldda, queues, info)
end

"""
    magma_zhtodpo(ngpu, uplo, m, n, off_i, off_j, nb, A, lda, dA, ldda, queues, info)

in src/zpotrf3_mgpu.cpp
TODO same as magma_zhtodhe?
### Prototype
```c
magma_int_t magma_zhtodpo( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t off_i, magma_int_t off_j, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex_ptr dA[], magma_int_t ldda, magma_queue_t queues[][3], magma_int_t *info );
```
"""
function magma_zhtodpo(ngpu, uplo, m, n, off_i, off_j, nb, A, lda, dA, ldda, queues, info)
    ccall((:magma_zhtodpo, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{NTuple{3, magma_queue_t}}, Ptr{magma_int_t}), ngpu, uplo, m, n, off_i, off_j, nb, A, lda, dA, ldda, queues, info)
end

"""
    magma_zdtohpo(ngpu, uplo, m, n, off_i, off_j, nb, NB, A, lda, dA, ldda, queues, info)

in src/zpotrf3_mgpu.cpp
TODO rename zgetmatrix_sy or similar
### Prototype
```c
magma_int_t magma_zdtohpo( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t off_i, magma_int_t off_j, magma_int_t nb, magma_int_t NB, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex_ptr dA[], magma_int_t ldda, magma_queue_t queues[][3], magma_int_t *info );
```
"""
function magma_zdtohpo(ngpu, uplo, m, n, off_i, off_j, nb, NB, A, lda, dA, ldda, queues, info)
    ccall((:magma_zdtohpo, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{NTuple{3, magma_queue_t}}, Ptr{magma_int_t}), ngpu, uplo, m, n, off_i, off_j, nb, NB, A, lda, dA, ldda, queues, info)
end

"""
    magmablas_zhemm_mgpu(side, uplo, m, n, alpha, dA, ldda, offset, dB, lddb, beta, dC, lddc, dwork, dworksiz, ngpu, nb, queues, nqueue, events, nevents, gnode, ncmplx)

Multi-GPU BLAS functions (alphabetical order)
### Prototype
```c
void magmablas_zhemm_mgpu( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dA[], magma_int_t ldda, magma_int_t offset, magmaDoubleComplex_ptr dB[], magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC[], magma_int_t lddc, magmaDoubleComplex_ptr dwork[], magma_int_t dworksiz, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[][20], magma_int_t nqueue, magma_event_t events[][MagmaMaxGPUs*MagmaMaxGPUs+10], magma_int_t nevents, magma_int_t gnode[MagmaMaxGPUs][MagmaMaxGPUs+2], magma_int_t ncmplx );
```
"""
function magmablas_zhemm_mgpu(side, uplo, m, n, alpha, dA, ldda, offset, dB, lddb, beta, dC, lddc, dwork, dworksiz, ngpu, nb, queues, nqueue, events, nevents, gnode, ncmplx)
    ccall((:magmablas_zhemm_mgpu, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{20, magma_queue_t}}, magma_int_t, Ptr{NTuple{74, magma_event_t}}, magma_int_t, Ptr{NTuple{10, magma_int_t}}, magma_int_t), side, uplo, m, n, alpha, dA, ldda, offset, dB, lddb, beta, dC, lddc, dwork, dworksiz, ngpu, nb, queues, nqueue, events, nevents, gnode, ncmplx)
end

"""
    magmablas_zhemv_mgpu(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)


### Prototype
```c
magma_int_t magmablas_zhemv_mgpu( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr const d_lA[], magma_int_t ldda, magma_int_t offset, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy, magma_int_t incy, magmaDoubleComplex *hwork, magma_int_t lhwork, magmaDoubleComplex_ptr dwork[], magma_int_t ldwork, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[] );
```
"""
function magmablas_zhemv_mgpu(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
    ccall((:magmablas_zhemv_mgpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex_const_ptr}, magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_queue_t}), uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
end

"""
    magmablas_zhemv_mgpu_sync(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)


### Prototype
```c
magma_int_t magmablas_zhemv_mgpu_sync( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr const d_lA[], magma_int_t ldda, magma_int_t offset, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy, magma_int_t incy, magmaDoubleComplex *hwork, magma_int_t lhwork, magmaDoubleComplex_ptr dwork[], magma_int_t ldwork, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[] );
```
"""
function magmablas_zhemv_mgpu_sync(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
    ccall((:magmablas_zhemv_mgpu_sync, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex_const_ptr}, magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_queue_t}), uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
end

"""
    magma_zhetrs_gpu(uplo, n, nrhs, dA, ldda, ipiv, dB, lddb, info, queue)


### Prototype
```c
magma_int_t magma_zhetrs_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex *dA, magma_int_t ldda, magma_int_t *ipiv, magmaDoubleComplex *dB, magma_int_t lddb, magma_int_t *info, magma_queue_t queue );
```
"""
function magma_zhetrs_gpu(uplo, n, nrhs, dA, ldda, ipiv, dB, lddb, info, queue)
    ccall((:magma_zhetrs_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, magma_queue_t), uplo, n, nrhs, dA, ldda, ipiv, dB, lddb, info, queue)
end

"""
    magma_zher2k_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)

Ichi's version, in src/zhetrd_mgpu.cpp
### Prototype
```c
void magma_zher2k_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_trans_t trans, magma_int_t nb, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dB[], magma_int_t lddb, magma_int_t b_offset, double beta, magmaDoubleComplex_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t nqueue, magma_queue_t queues[][10] );
```
"""
function magma_zher2k_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
    ccall((:magma_zher2k_mgpu, libmagma), Cvoid, (magma_int_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{10, magma_queue_t}}), ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
end

"""
    magmablas_zher2k_mgpu2(uplo, trans, n, k, alpha, dA, ldda, a_offset, dB, lddb, b_offset, beta, dC, lddc, c_offset, ngpu, nb, queues, nqueue)


### Prototype
```c
void magmablas_zher2k_mgpu2( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dA[], magma_int_t ldda, magma_int_t a_offset, magmaDoubleComplex_ptr dB[], magma_int_t lddb, magma_int_t b_offset, double beta, magmaDoubleComplex_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[][20], magma_int_t nqueue );
```
"""
function magmablas_zher2k_mgpu2(uplo, trans, n, k, alpha, dA, ldda, a_offset, dB, lddb, b_offset, beta, dC, lddc, c_offset, ngpu, nb, queues, nqueue)
    ccall((:magmablas_zher2k_mgpu2, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{20, magma_queue_t}}, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, a_offset, dB, lddb, b_offset, beta, dC, lddc, c_offset, ngpu, nb, queues, nqueue)
end

"""
    magma_zherk_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)

in src/zpotrf_mgpu_right.cpp
### Prototype
```c
void magma_zherk_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_trans_t trans, magma_int_t nb, magma_int_t n, magma_int_t k, double alpha, magmaDoubleComplex_ptr dB[], magma_int_t lddb, magma_int_t b_offset, double beta, magmaDoubleComplex_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t nqueue, magma_queue_t queues[][10] );
```
"""
function magma_zherk_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
    ccall((:magma_zherk_mgpu, libmagma), Cvoid, (magma_int_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{10, magma_queue_t}}), ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
end

"""
    magma_zherk_mgpu2(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)

in src/zpotrf_mgpu_right.cpp
### Prototype
```c
void magma_zherk_mgpu2( magma_int_t ngpu, magma_uplo_t uplo, magma_trans_t trans, magma_int_t nb, magma_int_t n, magma_int_t k, double alpha, magmaDoubleComplex_ptr dB[], magma_int_t lddb, magma_int_t b_offset, double beta, magmaDoubleComplex_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t nqueue, magma_queue_t queues[][10] );
```
"""
function magma_zherk_mgpu2(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
    ccall((:magma_zherk_mgpu2, libmagma), Cvoid, (magma_int_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{10, magma_queue_t}}), ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
end

"""
    magmablas_zdiinertia(n, dA, ldda, dneig, queue)

LAPACK auxiliary functions (alphabetical order)
### Prototype
```c
magma_int_t magmablas_zdiinertia( magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, int *dneig, magma_queue_t queue );
```
"""
function magmablas_zdiinertia(n, dA, ldda, dneig, queue)
    ccall((:magmablas_zdiinertia, libmagma), magma_int_t, (magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{Cint}, magma_queue_t), n, dA, ldda, dneig, queue)
end

"""
    magmablas_zgeam(transA, transB, m, n, alpha, dA, ldda, beta, dB, lddb, dC, lddc, queue)


### Prototype
```c
void magmablas_zgeam( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex beta, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, magmaDoubleComplex_ptr dC, magma_int_t lddc, magma_queue_t queue );
```
"""
function magmablas_zgeam(transA, transB, m, n, alpha, dA, ldda, beta, dB, lddb, dC, lddc, queue)
    ccall((:magmablas_zgeam, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t), transA, transB, m, n, alpha, dA, ldda, beta, dB, lddb, dC, lddc, queue)
end

"""
    magmablas_zheinertia(uplo, n, dA, ldda, ipiv, dneig, queue)


### Prototype
```c
magma_int_t magmablas_zheinertia( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magma_int_t *ipiv, int *dneig, magma_queue_t queue );
```
"""
function magmablas_zheinertia(uplo, n, dA, ldda, ipiv, dneig, queue)
    ccall((:magmablas_zheinertia, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{Cint}, magma_queue_t), uplo, n, dA, ldda, ipiv, dneig, queue)
end

"""
    magma_zlaswp_rowparallel_native(n, input, ldi, output, ldo, k1, k2, pivinfo, queue)


### Prototype
```c
void magma_zlaswp_rowparallel_native( magma_int_t n, magmaDoubleComplex* input, magma_int_t ldi, magmaDoubleComplex* output, magma_int_t ldo, magma_int_t k1, magma_int_t k2, magma_int_t *pivinfo, magma_queue_t queue);
```
"""
function magma_zlaswp_rowparallel_native(n, input, ldi, output, ldo, k1, k2, pivinfo, queue)
    ccall((:magma_zlaswp_rowparallel_native, libmagma), Cvoid, (magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), n, input, ldi, output, ldo, k1, k2, pivinfo, queue)
end

"""
    magma_zlaswp_columnserial(n, dA, lda, k1, k2, dipiv, queue)


### Prototype
```c
void magma_zlaswp_columnserial( magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t lda, magma_int_t k1, magma_int_t k2, magma_int_t *dipiv, magma_queue_t queue);
```
"""
function magma_zlaswp_columnserial(n, dA, lda, k1, k2, dipiv, queue)
    ccall((:magma_zlaswp_columnserial, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), n, dA, lda, k1, k2, dipiv, queue)
end

"""
    magmablas_ztrsv(uplo, transA, diag, n, dA, ldda, db, incb, queue)

Level 2 BLAS (alphabetical order)
/
trsv were always queue versions
### Prototype
```c
void magmablas_ztrsv( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr db, magma_int_t incb, magma_queue_t queue );
```
"""
function magmablas_ztrsv(uplo, transA, diag, n, dA, ldda, db, incb, queue)
    ccall((:magmablas_ztrsv, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t), uplo, transA, diag, n, dA, ldda, db, incb, queue)
end

"""
    magmablas_ztrsv_outofplace(uplo, transA, diag, n, dA, ldda, db, incb, dx, queue, flag)

todo: move flag before queue?
### Prototype
```c
void magmablas_ztrsv_outofplace( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr db, magma_int_t incb, magmaDoubleComplex_ptr dx, magma_queue_t queue, magma_int_t flag );
```
"""
function magmablas_ztrsv_outofplace(uplo, transA, diag, n, dA, ldda, db, incb, dx, queue, flag)
    ccall((:magmablas_ztrsv_outofplace, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_queue_t, magma_int_t), uplo, transA, diag, n, dA, ldda, db, incb, dx, queue, flag)
end

"""
    magmablas_zhemv_work(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)

hemv/symv_work were always queue versions
### Prototype
```c
magma_int_t magmablas_zhemv_work( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy, magma_int_t incy, magmaDoubleComplex_ptr dwork, magma_int_t lwork, magma_queue_t queue );
```
"""
function magmablas_zhemv_work(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)
    ccall((:magmablas_zhemv_work, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)
end

"""
    magmablas_zsymv_work(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)


### Prototype
```c
magma_int_t magmablas_zsymv_work( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy, magma_int_t incy, magmaDoubleComplex_ptr dwork, magma_int_t lwork, magma_queue_t queue );
```
"""
function magmablas_zsymv_work(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)
    ccall((:magmablas_zsymv_work, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)
end

"""
    magma_izamax_native(length, x, incx, ipiv, info, step, gbstep, queue)


### Prototype
```c
magma_int_t magma_izamax_native( magma_int_t length, magmaDoubleComplex_ptr x, magma_int_t incx, magma_int_t* ipiv, magma_int_t *info, magma_int_t step, magma_int_t gbstep, magma_queue_t queue);
```
"""
function magma_izamax_native(length, x, incx, ipiv, info, step, gbstep, queue)
    ccall((:magma_izamax_native, libmagma), magma_int_t, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), length, x, incx, ipiv, info, step, gbstep, queue)
end

"""
    magma_zrotg(a, b, c, s, queue)


### Prototype
```c
void magma_zrotg( magmaDoubleComplex_ptr a, magmaDoubleComplex_ptr b, magmaDouble_ptr c, magmaDoubleComplex_ptr s, magma_queue_t queue );
```
"""
function magma_zrotg(a, b, c, s, queue)
    ccall((:magma_zrotg, libmagma), Cvoid, (magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDouble_ptr, magmaDoubleComplex_ptr, magma_queue_t), a, b, c, s, queue)
end

"""
    magma_zscal_zgeru_native(m, n, dA, lda, info, step, gbstep, queue)


### Prototype
```c
magma_int_t magma_zscal_zgeru_native( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t lda, magma_int_t *info, magma_int_t step, magma_int_t gbstep, magma_queue_t queue);
```
"""
function magma_zscal_zgeru_native(m, n, dA, lda, info, step, gbstep, queue)
    ccall((:magma_zscal_zgeru_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA, lda, info, step, gbstep, queue)
end

"""
    magma_zswap_native(n, x, incx, step, ipiv, queue)


### Prototype
```c
void magma_zswap_native( magma_int_t n, magmaDoubleComplex_ptr x, magma_int_t incx, magma_int_t step, magma_int_t* ipiv, magma_queue_t queue);
```
"""
function magma_zswap_native(n, x, incx, step, ipiv, queue)
    ccall((:magma_zswap_native, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), n, x, incx, step, ipiv, queue)
end

"""
    magma_zsymv(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, queue)


### Prototype
```c
void magma_zsymv( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy, magma_int_t incy, magma_queue_t queue );
```
"""
function magma_zsymv(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, queue)
    ccall((:magma_zsymv, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, queue)
end

"""
    magma_zsyr(uplo, n, alpha, dx, incx, dA, ldda, queue)


### Prototype
```c
void magma_zsyr( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_queue_t queue );
```
"""
function magma_zsyr(uplo, n, alpha, dx, incx, dA, ldda, queue)
    ccall((:magma_zsyr, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t), uplo, n, alpha, dx, incx, dA, ldda, queue)
end

"""
    magma_zsyr2(uplo, n, alpha, dx, incx, dy, incy, dA, ldda, queue)


### Prototype
```c
void magma_zsyr2( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr dx, magma_int_t incx, magmaDoubleComplex_const_ptr dy, magma_int_t incy, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_queue_t queue );
```
"""
function magma_zsyr2(uplo, n, alpha, dx, incx, dy, incy, dA, ldda, queue)
    ccall((:magma_zsyr2, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t), uplo, n, alpha, dx, incx, dy, incy, dA, ldda, queue)
end

"""
    magmablas_ztrmv(uplo, trans, diag, n, dA, ldda, dx, incx, queue)


### Prototype
```c
void magmablas_ztrmv( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t n, magmaDoubleComplex *dA, magma_int_t ldda, magmaDoubleComplex *dx, magma_int_t incx, magma_queue_t queue );
```
"""
function magmablas_ztrmv(uplo, trans, diag, n, dA, ldda, dx, incx, queue)
    ccall((:magmablas_ztrmv, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_queue_t), uplo, trans, diag, n, dA, ldda, dx, incx, queue)
end

"""
    magmablas_zherk_internal(uplo, trans, n, k, nb, alpha, dA, ldda, dB, lddb, beta, dC, lddc, conjugate, queue)


### Prototype
```c
void magmablas_zherk_internal( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magma_int_t nb, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex_ptr dC, magma_int_t lddc, magma_int_t conjugate, magma_queue_t queue);
```
"""
function magmablas_zherk_internal(uplo, trans, n, k, nb, alpha, dA, ldda, dB, lddb, beta, dC, lddc, conjugate, queue)
    ccall((:magmablas_zherk_internal, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex, magmaDoubleComplex_ptr, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, nb, alpha, dA, ldda, dB, lddb, beta, dC, lddc, conjugate, queue)
end

"""
    magmablas_zherk_small_reduce(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc, nthread_blocks, queue)


### Prototype
```c
void magmablas_zherk_small_reduce( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, magmaDoubleComplex* dA, magma_int_t ldda, double beta, magmaDoubleComplex* dC, magma_int_t lddc, magma_int_t nthread_blocks, magma_queue_t queue );
```
"""
function magmablas_zherk_small_reduce(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc, nthread_blocks, queue)
    ccall((:magmablas_zherk_small_reduce, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc, nthread_blocks, queue)
end

"""
    magmablas_ztrmm(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, queue)


### Prototype
```c
void magmablas_ztrmm( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex *dA, magma_int_t ldda, magmaDoubleComplex *dB, magma_int_t lddb, magma_queue_t queue );
```
"""
function magmablas_ztrmm(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, queue)
    ccall((:magmablas_ztrmm, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, queue)
end

"""
    magma_zgetf2trsm_2d_native(m, n, dA, ldda, dB, lddb, queue)


### Prototype
```c
void magma_zgetf2trsm_2d_native( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_queue_t queue);
```
"""
function magma_zgetf2trsm_2d_native(m, n, dA, ldda, dB, lddb, queue)
    ccall((:magma_zgetf2trsm_2d_native, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t), m, n, dA, ldda, dB, lddb, queue)
end

"""
    magma_zpotf2_lpout(uplo, n, dA, lda, gbstep, dinfo, queue)


### Prototype
```c
magma_int_t magma_zpotf2_lpout( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *dA, magma_int_t lda, magma_int_t gbstep, magma_int_t *dinfo, magma_queue_t queue);
```
"""
function magma_zpotf2_lpout(uplo, n, dA, lda, gbstep, dinfo, queue)
    ccall((:magma_zpotf2_lpout, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), uplo, n, dA, lda, gbstep, dinfo, queue)
end

"""
    magma_zpotf2_lpin(uplo, n, dA, lda, gbstep, dinfo, queue)


### Prototype
```c
magma_int_t magma_zpotf2_lpin( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *dA, magma_int_t lda, magma_int_t gbstep, magma_int_t *dinfo, magma_queue_t queue);
```
"""
function magma_zpotf2_lpin(uplo, n, dA, lda, gbstep, dinfo, queue)
    ccall((:magma_zpotf2_lpin, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), uplo, n, dA, lda, gbstep, dinfo, queue)
end

"""
    magmablas_cgetmatrix_transpose_mgpu(ngpu, m, n, nb, dAT, ldda, hA, lda, dwork, lddw, queues)


### Prototype
```c
void magmablas_cgetmatrix_transpose_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magma_int_t nb, magmaFloatComplex_const_ptr const dAT[], magma_int_t ldda, magmaFloatComplex *hA, magma_int_t lda, magmaFloatComplex_ptr dwork[], magma_int_t lddw, magma_queue_t queues[][2] );
```
"""
function magmablas_cgetmatrix_transpose_mgpu(ngpu, m, n, nb, dAT, ldda, hA, lda, dwork, lddw, queues)
    ccall((:magmablas_cgetmatrix_transpose_mgpu, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_const_ptr}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{NTuple{2, magma_queue_t}}), ngpu, m, n, nb, dAT, ldda, hA, lda, dwork, lddw, queues)
end

"""
    magmablas_csetmatrix_transpose_mgpu(ngpu, m, n, nb, hA, lda, dAT, ldda, dwork, lddw, queues)


### Prototype
```c
void magmablas_csetmatrix_transpose_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magma_int_t nb, const magmaFloatComplex *hA, magma_int_t lda, magmaFloatComplex_ptr dAT[], magma_int_t ldda, magmaFloatComplex_ptr dwork[], magma_int_t lddw, magma_queue_t queues[][2] );
```
"""
function magmablas_csetmatrix_transpose_mgpu(ngpu, m, n, nb, hA, lda, dAT, ldda, dwork, lddw, queues)
    ccall((:magmablas_csetmatrix_transpose_mgpu, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{NTuple{2, magma_queue_t}}), ngpu, m, n, nb, hA, lda, dAT, ldda, dwork, lddw, queues)
end

"""
    magma_chtodhe(ngpu, uplo, n, nb, A, lda, dA, ldda, queues, info)

in src/chetrd_mgpu.cpp
TODO rename csetmatrix_sy or similar
### Prototype
```c
magma_int_t magma_chtodhe( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex_ptr dA[], magma_int_t ldda, magma_queue_t queues[][10], magma_int_t *info );
```
"""
function magma_chtodhe(ngpu, uplo, n, nb, A, lda, dA, ldda, queues, info)
    ccall((:magma_chtodhe, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{NTuple{10, magma_queue_t}}, Ptr{magma_int_t}), ngpu, uplo, n, nb, A, lda, dA, ldda, queues, info)
end

"""
    magma_chtodpo(ngpu, uplo, m, n, off_i, off_j, nb, A, lda, dA, ldda, queues, info)

in src/cpotrf3_mgpu.cpp
TODO same as magma_chtodhe?
### Prototype
```c
magma_int_t magma_chtodpo( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t off_i, magma_int_t off_j, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex_ptr dA[], magma_int_t ldda, magma_queue_t queues[][3], magma_int_t *info );
```
"""
function magma_chtodpo(ngpu, uplo, m, n, off_i, off_j, nb, A, lda, dA, ldda, queues, info)
    ccall((:magma_chtodpo, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{NTuple{3, magma_queue_t}}, Ptr{magma_int_t}), ngpu, uplo, m, n, off_i, off_j, nb, A, lda, dA, ldda, queues, info)
end

"""
    magma_cdtohpo(ngpu, uplo, m, n, off_i, off_j, nb, NB, A, lda, dA, ldda, queues, info)

in src/cpotrf3_mgpu.cpp
TODO rename cgetmatrix_sy or similar
### Prototype
```c
magma_int_t magma_cdtohpo( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t off_i, magma_int_t off_j, magma_int_t nb, magma_int_t NB, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex_ptr dA[], magma_int_t ldda, magma_queue_t queues[][3], magma_int_t *info );
```
"""
function magma_cdtohpo(ngpu, uplo, m, n, off_i, off_j, nb, NB, A, lda, dA, ldda, queues, info)
    ccall((:magma_cdtohpo, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{NTuple{3, magma_queue_t}}, Ptr{magma_int_t}), ngpu, uplo, m, n, off_i, off_j, nb, NB, A, lda, dA, ldda, queues, info)
end

"""
    magmablas_chemm_mgpu(side, uplo, m, n, alpha, dA, ldda, offset, dB, lddb, beta, dC, lddc, dwork, dworksiz, ngpu, nb, queues, nqueue, events, nevents, gnode, ncmplx)

Multi-GPU BLAS functions (alphabetical order)
### Prototype
```c
void magmablas_chemm_mgpu( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_ptr dA[], magma_int_t ldda, magma_int_t offset, magmaFloatComplex_ptr dB[], magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex_ptr dC[], magma_int_t lddc, magmaFloatComplex_ptr dwork[], magma_int_t dworksiz, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[][20], magma_int_t nqueue, magma_event_t events[][MagmaMaxGPUs*MagmaMaxGPUs+10], magma_int_t nevents, magma_int_t gnode[MagmaMaxGPUs][MagmaMaxGPUs+2], magma_int_t ncmplx );
```
"""
function magmablas_chemm_mgpu(side, uplo, m, n, alpha, dA, ldda, offset, dB, lddb, beta, dC, lddc, dwork, dworksiz, ngpu, nb, queues, nqueue, events, nevents, gnode, ncmplx)
    ccall((:magmablas_chemm_mgpu, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{20, magma_queue_t}}, magma_int_t, Ptr{NTuple{74, magma_event_t}}, magma_int_t, Ptr{NTuple{10, magma_int_t}}, magma_int_t), side, uplo, m, n, alpha, dA, ldda, offset, dB, lddb, beta, dC, lddc, dwork, dworksiz, ngpu, nb, queues, nqueue, events, nevents, gnode, ncmplx)
end

"""
    magmablas_chemv_mgpu(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)


### Prototype
```c
magma_int_t magmablas_chemv_mgpu( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr const d_lA[], magma_int_t ldda, magma_int_t offset, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy, magma_int_t incy, magmaFloatComplex *hwork, magma_int_t lhwork, magmaFloatComplex_ptr dwork[], magma_int_t ldwork, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[] );
```
"""
function magmablas_chemv_mgpu(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
    ccall((:magmablas_chemv_mgpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex_const_ptr}, magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_queue_t}), uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
end

"""
    magmablas_chemv_mgpu_sync(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)


### Prototype
```c
magma_int_t magmablas_chemv_mgpu_sync( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr const d_lA[], magma_int_t ldda, magma_int_t offset, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy, magma_int_t incy, magmaFloatComplex *hwork, magma_int_t lhwork, magmaFloatComplex_ptr dwork[], magma_int_t ldwork, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[] );
```
"""
function magmablas_chemv_mgpu_sync(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
    ccall((:magmablas_chemv_mgpu_sync, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex_const_ptr}, magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_queue_t}), uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
end

"""
    magma_chetrs_gpu(uplo, n, nrhs, dA, ldda, ipiv, dB, lddb, info, queue)


### Prototype
```c
magma_int_t magma_chetrs_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloatComplex *dA, magma_int_t ldda, magma_int_t *ipiv, magmaFloatComplex *dB, magma_int_t lddb, magma_int_t *info, magma_queue_t queue );
```
"""
function magma_chetrs_gpu(uplo, n, nrhs, dA, ldda, ipiv, dB, lddb, info, queue)
    ccall((:magma_chetrs_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, magma_queue_t), uplo, n, nrhs, dA, ldda, ipiv, dB, lddb, info, queue)
end

"""
    magma_cher2k_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)

Ichi's version, in src/chetrd_mgpu.cpp
### Prototype
```c
void magma_cher2k_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_trans_t trans, magma_int_t nb, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex_ptr dB[], magma_int_t lddb, magma_int_t b_offset, float beta, magmaFloatComplex_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t nqueue, magma_queue_t queues[][10] );
```
"""
function magma_cher2k_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
    ccall((:magma_cher2k_mgpu, libmagma), Cvoid, (magma_int_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{10, magma_queue_t}}), ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
end

"""
    magmablas_cher2k_mgpu2(uplo, trans, n, k, alpha, dA, ldda, a_offset, dB, lddb, b_offset, beta, dC, lddc, c_offset, ngpu, nb, queues, nqueue)


### Prototype
```c
void magmablas_cher2k_mgpu2( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex_ptr dA[], magma_int_t ldda, magma_int_t a_offset, magmaFloatComplex_ptr dB[], magma_int_t lddb, magma_int_t b_offset, float beta, magmaFloatComplex_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[][20], magma_int_t nqueue );
```
"""
function magmablas_cher2k_mgpu2(uplo, trans, n, k, alpha, dA, ldda, a_offset, dB, lddb, b_offset, beta, dC, lddc, c_offset, ngpu, nb, queues, nqueue)
    ccall((:magmablas_cher2k_mgpu2, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{20, magma_queue_t}}, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, a_offset, dB, lddb, b_offset, beta, dC, lddc, c_offset, ngpu, nb, queues, nqueue)
end

"""
    magma_cherk_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)

in src/cpotrf_mgpu_right.cpp
### Prototype
```c
void magma_cherk_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_trans_t trans, magma_int_t nb, magma_int_t n, magma_int_t k, float alpha, magmaFloatComplex_ptr dB[], magma_int_t lddb, magma_int_t b_offset, float beta, magmaFloatComplex_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t nqueue, magma_queue_t queues[][10] );
```
"""
function magma_cherk_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
    ccall((:magma_cherk_mgpu, libmagma), Cvoid, (magma_int_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{10, magma_queue_t}}), ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
end

"""
    magma_cherk_mgpu2(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)

in src/cpotrf_mgpu_right.cpp
### Prototype
```c
void magma_cherk_mgpu2( magma_int_t ngpu, magma_uplo_t uplo, magma_trans_t trans, magma_int_t nb, magma_int_t n, magma_int_t k, float alpha, magmaFloatComplex_ptr dB[], magma_int_t lddb, magma_int_t b_offset, float beta, magmaFloatComplex_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t nqueue, magma_queue_t queues[][10] );
```
"""
function magma_cherk_mgpu2(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
    ccall((:magma_cherk_mgpu2, libmagma), Cvoid, (magma_int_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{10, magma_queue_t}}), ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
end

"""
    magmablas_cdiinertia(n, dA, ldda, dneig, queue)

LAPACK auxiliary functions (alphabetical order)
### Prototype
```c
magma_int_t magmablas_cdiinertia( magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, int *dneig, magma_queue_t queue );
```
"""
function magmablas_cdiinertia(n, dA, ldda, dneig, queue)
    ccall((:magmablas_cdiinertia, libmagma), magma_int_t, (magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{Cint}, magma_queue_t), n, dA, ldda, dneig, queue)
end

"""
    magmablas_cgeam(transA, transB, m, n, alpha, dA, ldda, beta, dB, lddb, dC, lddc, queue)


### Prototype
```c
void magmablas_cgeam( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex beta, magmaFloatComplex_const_ptr dB, magma_int_t lddb, magmaFloatComplex_ptr dC, magma_int_t lddc, magma_queue_t queue );
```
"""
function magmablas_cgeam(transA, transB, m, n, alpha, dA, ldda, beta, dB, lddb, dC, lddc, queue)
    ccall((:magmablas_cgeam, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t), transA, transB, m, n, alpha, dA, ldda, beta, dB, lddb, dC, lddc, queue)
end

"""
    magmablas_cheinertia(uplo, n, dA, ldda, ipiv, dneig, queue)


### Prototype
```c
magma_int_t magmablas_cheinertia( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magma_int_t *ipiv, int *dneig, magma_queue_t queue );
```
"""
function magmablas_cheinertia(uplo, n, dA, ldda, ipiv, dneig, queue)
    ccall((:magmablas_cheinertia, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{Cint}, magma_queue_t), uplo, n, dA, ldda, ipiv, dneig, queue)
end

"""
    magma_claswp_rowparallel_native(n, input, ldi, output, ldo, k1, k2, pivinfo, queue)


### Prototype
```c
void magma_claswp_rowparallel_native( magma_int_t n, magmaFloatComplex* input, magma_int_t ldi, magmaFloatComplex* output, magma_int_t ldo, magma_int_t k1, magma_int_t k2, magma_int_t *pivinfo, magma_queue_t queue);
```
"""
function magma_claswp_rowparallel_native(n, input, ldi, output, ldo, k1, k2, pivinfo, queue)
    ccall((:magma_claswp_rowparallel_native, libmagma), Cvoid, (magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), n, input, ldi, output, ldo, k1, k2, pivinfo, queue)
end

"""
    magma_claswp_columnserial(n, dA, lda, k1, k2, dipiv, queue)


### Prototype
```c
void magma_claswp_columnserial( magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t lda, magma_int_t k1, magma_int_t k2, magma_int_t *dipiv, magma_queue_t queue);
```
"""
function magma_claswp_columnserial(n, dA, lda, k1, k2, dipiv, queue)
    ccall((:magma_claswp_columnserial, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), n, dA, lda, k1, k2, dipiv, queue)
end

"""
    magmablas_ctrsv(uplo, transA, diag, n, dA, ldda, db, incb, queue)

Level 2 BLAS (alphabetical order)
/
trsv were always queue versions
### Prototype
```c
void magmablas_ctrsv( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr db, magma_int_t incb, magma_queue_t queue );
```
"""
function magmablas_ctrsv(uplo, transA, diag, n, dA, ldda, db, incb, queue)
    ccall((:magmablas_ctrsv, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t), uplo, transA, diag, n, dA, ldda, db, incb, queue)
end

"""
    magmablas_ctrsv_outofplace(uplo, transA, diag, n, dA, ldda, db, incb, dx, queue, flag)

todo: move flag before queue?
### Prototype
```c
void magmablas_ctrsv_outofplace( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr db, magma_int_t incb, magmaFloatComplex_ptr dx, magma_queue_t queue, magma_int_t flag );
```
"""
function magmablas_ctrsv_outofplace(uplo, transA, diag, n, dA, ldda, db, incb, dx, queue, flag)
    ccall((:magmablas_ctrsv_outofplace, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_queue_t, magma_int_t), uplo, transA, diag, n, dA, ldda, db, incb, dx, queue, flag)
end

"""
    magmablas_chemv_work(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)

hemv/symv_work were always queue versions
### Prototype
```c
magma_int_t magmablas_chemv_work( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy, magma_int_t incy, magmaFloatComplex_ptr dwork, magma_int_t lwork, magma_queue_t queue );
```
"""
function magmablas_chemv_work(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)
    ccall((:magmablas_chemv_work, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)
end

"""
    magmablas_csymv_work(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)


### Prototype
```c
magma_int_t magmablas_csymv_work( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy, magma_int_t incy, magmaFloatComplex_ptr dwork, magma_int_t lwork, magma_queue_t queue );
```
"""
function magmablas_csymv_work(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)
    ccall((:magmablas_csymv_work, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)
end

"""
    magma_icamax_native(length, x, incx, ipiv, info, step, gbstep, queue)


### Prototype
```c
magma_int_t magma_icamax_native( magma_int_t length, magmaFloatComplex_ptr x, magma_int_t incx, magma_int_t* ipiv, magma_int_t *info, magma_int_t step, magma_int_t gbstep, magma_queue_t queue);
```
"""
function magma_icamax_native(length, x, incx, ipiv, info, step, gbstep, queue)
    ccall((:magma_icamax_native, libmagma), magma_int_t, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), length, x, incx, ipiv, info, step, gbstep, queue)
end

"""
    magma_crotg(a, b, c, s, queue)


### Prototype
```c
void magma_crotg( magmaFloatComplex_ptr a, magmaFloatComplex_ptr b, magmaFloat_ptr c, magmaFloatComplex_ptr s, magma_queue_t queue );
```
"""
function magma_crotg(a, b, c, s, queue)
    ccall((:magma_crotg, libmagma), Cvoid, (magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloat_ptr, magmaFloatComplex_ptr, magma_queue_t), a, b, c, s, queue)
end

"""
    magma_cscal_cgeru_native(m, n, dA, lda, info, step, gbstep, queue)


### Prototype
```c
magma_int_t magma_cscal_cgeru_native( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t lda, magma_int_t *info, magma_int_t step, magma_int_t gbstep, magma_queue_t queue);
```
"""
function magma_cscal_cgeru_native(m, n, dA, lda, info, step, gbstep, queue)
    ccall((:magma_cscal_cgeru_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA, lda, info, step, gbstep, queue)
end

"""
    magma_cswap_native(n, x, incx, step, ipiv, queue)


### Prototype
```c
void magma_cswap_native( magma_int_t n, magmaFloatComplex_ptr x, magma_int_t incx, magma_int_t step, magma_int_t* ipiv, magma_queue_t queue);
```
"""
function magma_cswap_native(n, x, incx, step, ipiv, queue)
    ccall((:magma_cswap_native, libmagma), Cvoid, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), n, x, incx, step, ipiv, queue)
end

"""
    magma_csymv(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, queue)


### Prototype
```c
void magma_csymv( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy, magma_int_t incy, magma_queue_t queue );
```
"""
function magma_csymv(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, queue)
    ccall((:magma_csymv, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t, magma_queue_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, queue)
end

"""
    magma_csyr(uplo, n, alpha, dx, incx, dA, ldda, queue)


### Prototype
```c
void magma_csyr( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_queue_t queue );
```
"""
function magma_csyr(uplo, n, alpha, dx, incx, dA, ldda, queue)
    ccall((:magma_csyr, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t), uplo, n, alpha, dx, incx, dA, ldda, queue)
end

"""
    magma_csyr2(uplo, n, alpha, dx, incx, dy, incy, dA, ldda, queue)


### Prototype
```c
void magma_csyr2( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr dx, magma_int_t incx, magmaFloatComplex_const_ptr dy, magma_int_t incy, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_queue_t queue );
```
"""
function magma_csyr2(uplo, n, alpha, dx, incx, dy, incy, dA, ldda, queue)
    ccall((:magma_csyr2, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t), uplo, n, alpha, dx, incx, dy, incy, dA, ldda, queue)
end

"""
    magmablas_ctrmv(uplo, trans, diag, n, dA, ldda, dx, incx, queue)


### Prototype
```c
void magmablas_ctrmv( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t n, magmaFloatComplex *dA, magma_int_t ldda, magmaFloatComplex *dx, magma_int_t incx, magma_queue_t queue );
```
"""
function magmablas_ctrmv(uplo, trans, diag, n, dA, ldda, dx, incx, queue)
    ccall((:magmablas_ctrmv, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_queue_t), uplo, trans, diag, n, dA, ldda, dx, incx, queue)
end

"""
    magmablas_cherk_internal(uplo, trans, n, k, nb, alpha, dA, ldda, dB, lddb, beta, dC, lddc, conjugate, queue)


### Prototype
```c
void magmablas_cherk_internal( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magma_int_t nb, magmaFloatComplex alpha, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex_ptr dC, magma_int_t lddc, magma_int_t conjugate, magma_queue_t queue);
```
"""
function magmablas_cherk_internal(uplo, trans, n, k, nb, alpha, dA, ldda, dB, lddb, beta, dC, lddc, conjugate, queue)
    ccall((:magmablas_cherk_internal, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex, magmaFloatComplex_ptr, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, nb, alpha, dA, ldda, dB, lddb, beta, dC, lddc, conjugate, queue)
end

"""
    magmablas_cherk_small_reduce(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc, nthread_blocks, queue)


### Prototype
```c
void magmablas_cherk_small_reduce( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, magmaFloatComplex* dA, magma_int_t ldda, float beta, magmaFloatComplex* dC, magma_int_t lddc, magma_int_t nthread_blocks, magma_queue_t queue );
```
"""
function magmablas_cherk_small_reduce(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc, nthread_blocks, queue)
    ccall((:magmablas_cherk_small_reduce, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc, nthread_blocks, queue)
end

"""
    magmablas_ctrmm(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, queue)


### Prototype
```c
void magmablas_ctrmm( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex *dA, magma_int_t ldda, magmaFloatComplex *dB, magma_int_t lddb, magma_queue_t queue );
```
"""
function magmablas_ctrmm(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, queue)
    ccall((:magmablas_ctrmm, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, queue)
end

"""
    magma_cgetf2trsm_2d_native(m, n, dA, ldda, dB, lddb, queue)


### Prototype
```c
void magma_cgetf2trsm_2d_native( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_queue_t queue);
```
"""
function magma_cgetf2trsm_2d_native(m, n, dA, ldda, dB, lddb, queue)
    ccall((:magma_cgetf2trsm_2d_native, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t), m, n, dA, ldda, dB, lddb, queue)
end

"""
    magma_cpotf2_lpout(uplo, n, dA, lda, gbstep, dinfo, queue)


### Prototype
```c
magma_int_t magma_cpotf2_lpout( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *dA, magma_int_t lda, magma_int_t gbstep, magma_int_t *dinfo, magma_queue_t queue);
```
"""
function magma_cpotf2_lpout(uplo, n, dA, lda, gbstep, dinfo, queue)
    ccall((:magma_cpotf2_lpout, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), uplo, n, dA, lda, gbstep, dinfo, queue)
end

"""
    magma_cpotf2_lpin(uplo, n, dA, lda, gbstep, dinfo, queue)


### Prototype
```c
magma_int_t magma_cpotf2_lpin( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *dA, magma_int_t lda, magma_int_t gbstep, magma_int_t *dinfo, magma_queue_t queue);
```
"""
function magma_cpotf2_lpin(uplo, n, dA, lda, gbstep, dinfo, queue)
    ccall((:magma_cpotf2_lpin, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), uplo, n, dA, lda, gbstep, dinfo, queue)
end

"""
    magmablas_dgetmatrix_transpose_mgpu(ngpu, m, n, nb, dAT, ldda, hA, lda, dwork, lddw, queues)


### Prototype
```c
void magmablas_dgetmatrix_transpose_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magma_int_t nb, magmaDouble_const_ptr const dAT[], magma_int_t ldda, double *hA, magma_int_t lda, magmaDouble_ptr dwork[], magma_int_t lddw, magma_queue_t queues[][2] );
```
"""
function magmablas_dgetmatrix_transpose_mgpu(ngpu, m, n, nb, dAT, ldda, hA, lda, dwork, lddw, queues)
    ccall((:magmablas_dgetmatrix_transpose_mgpu, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDouble_const_ptr}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{NTuple{2, magma_queue_t}}), ngpu, m, n, nb, dAT, ldda, hA, lda, dwork, lddw, queues)
end

"""
    magmablas_dsetmatrix_transpose_mgpu(ngpu, m, n, nb, hA, lda, dAT, ldda, dwork, lddw, queues)


### Prototype
```c
void magmablas_dsetmatrix_transpose_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magma_int_t nb, const double *hA, magma_int_t lda, magmaDouble_ptr dAT[], magma_int_t ldda, magmaDouble_ptr dwork[], magma_int_t lddw, magma_queue_t queues[][2] );
```
"""
function magmablas_dsetmatrix_transpose_mgpu(ngpu, m, n, nb, hA, lda, dAT, ldda, dwork, lddw, queues)
    ccall((:magmablas_dsetmatrix_transpose_mgpu, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{NTuple{2, magma_queue_t}}), ngpu, m, n, nb, hA, lda, dAT, ldda, dwork, lddw, queues)
end

"""
    magma_dhtodhe(ngpu, uplo, n, nb, A, lda, dA, ldda, queues, info)

in src/dsytrd_mgpu.cpp
TODO rename dsetmatrix_sy or similar
### Prototype
```c
magma_int_t magma_dhtodhe( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, magmaDouble_ptr dA[], magma_int_t ldda, magma_queue_t queues[][10], magma_int_t *info );
```
"""
function magma_dhtodhe(ngpu, uplo, n, nb, A, lda, dA, ldda, queues, info)
    ccall((:magma_dhtodhe, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{NTuple{10, magma_queue_t}}, Ptr{magma_int_t}), ngpu, uplo, n, nb, A, lda, dA, ldda, queues, info)
end

"""
    magma_dhtodpo(ngpu, uplo, m, n, off_i, off_j, nb, A, lda, dA, ldda, queues, info)

in src/dpotrf3_mgpu.cpp
TODO same as magma_dhtodhe?
### Prototype
```c
magma_int_t magma_dhtodpo( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t off_i, magma_int_t off_j, magma_int_t nb, double *A, magma_int_t lda, magmaDouble_ptr dA[], magma_int_t ldda, magma_queue_t queues[][3], magma_int_t *info );
```
"""
function magma_dhtodpo(ngpu, uplo, m, n, off_i, off_j, nb, A, lda, dA, ldda, queues, info)
    ccall((:magma_dhtodpo, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{NTuple{3, magma_queue_t}}, Ptr{magma_int_t}), ngpu, uplo, m, n, off_i, off_j, nb, A, lda, dA, ldda, queues, info)
end

"""
    magma_ddtohpo(ngpu, uplo, m, n, off_i, off_j, nb, NB, A, lda, dA, ldda, queues, info)

in src/dpotrf3_mgpu.cpp
TODO rename dgetmatrix_sy or similar
### Prototype
```c
magma_int_t magma_ddtohpo( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t off_i, magma_int_t off_j, magma_int_t nb, magma_int_t NB, double *A, magma_int_t lda, magmaDouble_ptr dA[], magma_int_t ldda, magma_queue_t queues[][3], magma_int_t *info );
```
"""
function magma_ddtohpo(ngpu, uplo, m, n, off_i, off_j, nb, NB, A, lda, dA, ldda, queues, info)
    ccall((:magma_ddtohpo, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{NTuple{3, magma_queue_t}}, Ptr{magma_int_t}), ngpu, uplo, m, n, off_i, off_j, nb, NB, A, lda, dA, ldda, queues, info)
end

"""
    magmablas_dsymm_mgpu(side, uplo, m, n, alpha, dA, ldda, offset, dB, lddb, beta, dC, lddc, dwork, dworksiz, ngpu, nb, queues, nqueue, events, nevents, gnode, ncmplx)

Multi-GPU BLAS functions (alphabetical order)
### Prototype
```c
void magmablas_dsymm_mgpu( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, double alpha, magmaDouble_ptr dA[], magma_int_t ldda, magma_int_t offset, magmaDouble_ptr dB[], magma_int_t lddb, double beta, magmaDouble_ptr dC[], magma_int_t lddc, magmaDouble_ptr dwork[], magma_int_t dworksiz, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[][20], magma_int_t nqueue, magma_event_t events[][MagmaMaxGPUs*MagmaMaxGPUs+10], magma_int_t nevents, magma_int_t gnode[MagmaMaxGPUs][MagmaMaxGPUs+2], magma_int_t ncmplx );
```
"""
function magmablas_dsymm_mgpu(side, uplo, m, n, alpha, dA, ldda, offset, dB, lddb, beta, dC, lddc, dwork, dworksiz, ngpu, nb, queues, nqueue, events, nevents, gnode, ncmplx)
    ccall((:magmablas_dsymm_mgpu, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{20, magma_queue_t}}, magma_int_t, Ptr{NTuple{74, magma_event_t}}, magma_int_t, Ptr{NTuple{10, magma_int_t}}, magma_int_t), side, uplo, m, n, alpha, dA, ldda, offset, dB, lddb, beta, dC, lddc, dwork, dworksiz, ngpu, nb, queues, nqueue, events, nevents, gnode, ncmplx)
end

"""
    magmablas_dsymv_mgpu(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)


### Prototype
```c
magma_int_t magmablas_dsymv_mgpu( magma_uplo_t uplo, magma_int_t n, double alpha, magmaDouble_const_ptr const d_lA[], magma_int_t ldda, magma_int_t offset, magmaDouble_const_ptr dx, magma_int_t incx, double beta, magmaDouble_ptr dy, magma_int_t incy, double *hwork, magma_int_t lhwork, magmaDouble_ptr dwork[], magma_int_t ldwork, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[] );
```
"""
function magmablas_dsymv_mgpu(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
    ccall((:magmablas_dsymv_mgpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Cdouble, Ptr{magmaDouble_const_ptr}, magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_queue_t}), uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
end

"""
    magmablas_dsymv_mgpu_sync(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)


### Prototype
```c
magma_int_t magmablas_dsymv_mgpu_sync( magma_uplo_t uplo, magma_int_t n, double alpha, magmaDouble_const_ptr const d_lA[], magma_int_t ldda, magma_int_t offset, magmaDouble_const_ptr dx, magma_int_t incx, double beta, magmaDouble_ptr dy, magma_int_t incy, double *hwork, magma_int_t lhwork, magmaDouble_ptr dwork[], magma_int_t ldwork, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[] );
```
"""
function magmablas_dsymv_mgpu_sync(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
    ccall((:magmablas_dsymv_mgpu_sync, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Cdouble, Ptr{magmaDouble_const_ptr}, magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_queue_t}), uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
end

"""
    magma_dsytrs_gpu(uplo, n, nrhs, dA, ldda, ipiv, dB, lddb, info, queue)


### Prototype
```c
magma_int_t magma_dsytrs_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, double *dA, magma_int_t ldda, magma_int_t *ipiv, double *dB, magma_int_t lddb, magma_int_t *info, magma_queue_t queue );
```
"""
function magma_dsytrs_gpu(uplo, n, nrhs, dA, ldda, ipiv, dB, lddb, info, queue)
    ccall((:magma_dsytrs_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_queue_t), uplo, n, nrhs, dA, ldda, ipiv, dB, lddb, info, queue)
end

"""
    magma_dsyr2k_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)

Ichi's version, in src/dsytrd_mgpu.cpp
### Prototype
```c
void magma_dsyr2k_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_trans_t trans, magma_int_t nb, magma_int_t n, magma_int_t k, double alpha, magmaDouble_ptr dB[], magma_int_t lddb, magma_int_t b_offset, double beta, magmaDouble_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t nqueue, magma_queue_t queues[][10] );
```
"""
function magma_dsyr2k_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
    ccall((:magma_dsyr2k_mgpu, libmagma), Cvoid, (magma_int_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{10, magma_queue_t}}), ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
end

"""
    magmablas_dsyr2k_mgpu2(uplo, trans, n, k, alpha, dA, ldda, a_offset, dB, lddb, b_offset, beta, dC, lddc, c_offset, ngpu, nb, queues, nqueue)


### Prototype
```c
void magmablas_dsyr2k_mgpu2( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, magmaDouble_ptr dA[], magma_int_t ldda, magma_int_t a_offset, magmaDouble_ptr dB[], magma_int_t lddb, magma_int_t b_offset, double beta, magmaDouble_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[][20], magma_int_t nqueue );
```
"""
function magmablas_dsyr2k_mgpu2(uplo, trans, n, k, alpha, dA, ldda, a_offset, dB, lddb, b_offset, beta, dC, lddc, c_offset, ngpu, nb, queues, nqueue)
    ccall((:magmablas_dsyr2k_mgpu2, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{20, magma_queue_t}}, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, a_offset, dB, lddb, b_offset, beta, dC, lddc, c_offset, ngpu, nb, queues, nqueue)
end

"""
    magma_dsyrk_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)

in src/dpotrf_mgpu_right.cpp
### Prototype
```c
void magma_dsyrk_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_trans_t trans, magma_int_t nb, magma_int_t n, magma_int_t k, double alpha, magmaDouble_ptr dB[], magma_int_t lddb, magma_int_t b_offset, double beta, magmaDouble_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t nqueue, magma_queue_t queues[][10] );
```
"""
function magma_dsyrk_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
    ccall((:magma_dsyrk_mgpu, libmagma), Cvoid, (magma_int_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{10, magma_queue_t}}), ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
end

"""
    magma_dsyrk_mgpu2(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)

in src/dpotrf_mgpu_right.cpp
### Prototype
```c
void magma_dsyrk_mgpu2( magma_int_t ngpu, magma_uplo_t uplo, magma_trans_t trans, magma_int_t nb, magma_int_t n, magma_int_t k, double alpha, magmaDouble_ptr dB[], magma_int_t lddb, magma_int_t b_offset, double beta, magmaDouble_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t nqueue, magma_queue_t queues[][10] );
```
"""
function magma_dsyrk_mgpu2(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
    ccall((:magma_dsyrk_mgpu2, libmagma), Cvoid, (magma_int_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{10, magma_queue_t}}), ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
end

"""
    magmablas_ddiinertia(n, dA, ldda, dneig, queue)

LAPACK auxiliary functions (alphabetical order)
### Prototype
```c
magma_int_t magmablas_ddiinertia( magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, int *dneig, magma_queue_t queue );
```
"""
function magmablas_ddiinertia(n, dA, ldda, dneig, queue)
    ccall((:magmablas_ddiinertia, libmagma), magma_int_t, (magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{Cint}, magma_queue_t), n, dA, ldda, dneig, queue)
end

"""
    magmablas_dgeam(transA, transB, m, n, alpha, dA, ldda, beta, dB, lddb, dC, lddc, queue)


### Prototype
```c
void magmablas_dgeam( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, double beta, magmaDouble_const_ptr dB, magma_int_t lddb, magmaDouble_ptr dC, magma_int_t lddc, magma_queue_t queue );
```
"""
function magmablas_dgeam(transA, transB, m, n, alpha, dA, ldda, beta, dB, lddb, dC, lddc, queue)
    ccall((:magmablas_dgeam, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t), transA, transB, m, n, alpha, dA, ldda, beta, dB, lddb, dC, lddc, queue)
end

"""
    magmablas_dsiinertia(uplo, n, dA, ldda, ipiv, dneig, queue)


### Prototype
```c
magma_int_t magmablas_dsiinertia( magma_uplo_t uplo, magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, magma_int_t *ipiv, int *dneig, magma_queue_t queue );
```
"""
function magmablas_dsiinertia(uplo, n, dA, ldda, ipiv, dneig, queue)
    ccall((:magmablas_dsiinertia, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{Cint}, magma_queue_t), uplo, n, dA, ldda, ipiv, dneig, queue)
end

"""
    magma_dlaswp_rowparallel_native(n, input, ldi, output, ldo, k1, k2, pivinfo, queue)


### Prototype
```c
void magma_dlaswp_rowparallel_native( magma_int_t n, double* input, magma_int_t ldi, double* output, magma_int_t ldo, magma_int_t k1, magma_int_t k2, magma_int_t *pivinfo, magma_queue_t queue);
```
"""
function magma_dlaswp_rowparallel_native(n, input, ldi, output, ldo, k1, k2, pivinfo, queue)
    ccall((:magma_dlaswp_rowparallel_native, libmagma), Cvoid, (magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), n, input, ldi, output, ldo, k1, k2, pivinfo, queue)
end

"""
    magma_dlaswp_columnserial(n, dA, lda, k1, k2, dipiv, queue)


### Prototype
```c
void magma_dlaswp_columnserial( magma_int_t n, magmaDouble_ptr dA, magma_int_t lda, magma_int_t k1, magma_int_t k2, magma_int_t *dipiv, magma_queue_t queue);
```
"""
function magma_dlaswp_columnserial(n, dA, lda, k1, k2, dipiv, queue)
    ccall((:magma_dlaswp_columnserial, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), n, dA, lda, k1, k2, dipiv, queue)
end

"""
    magmablas_dtrsv(uplo, transA, diag, n, dA, ldda, db, incb, queue)

Level 2 BLAS (alphabetical order)
/
trsv were always queue versions
### Prototype
```c
void magmablas_dtrsv( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr db, magma_int_t incb, magma_queue_t queue );
```
"""
function magmablas_dtrsv(uplo, transA, diag, n, dA, ldda, db, incb, queue)
    ccall((:magmablas_dtrsv, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t), uplo, transA, diag, n, dA, ldda, db, incb, queue)
end

"""
    magmablas_dtrsv_outofplace(uplo, transA, diag, n, dA, ldda, db, incb, dx, queue, flag)

todo: move flag before queue?
### Prototype
```c
void magmablas_dtrsv_outofplace( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_ptr db, magma_int_t incb, magmaDouble_ptr dx, magma_queue_t queue, magma_int_t flag );
```
"""
function magmablas_dtrsv_outofplace(uplo, transA, diag, n, dA, ldda, db, incb, dx, queue, flag)
    ccall((:magmablas_dtrsv_outofplace, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_queue_t, magma_int_t), uplo, transA, diag, n, dA, ldda, db, incb, dx, queue, flag)
end

"""
    magmablas_dsymv_work(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)

hemv/symv_work were always queue versions
### Prototype
```c
magma_int_t magmablas_dsymv_work( magma_uplo_t uplo, magma_int_t n, double alpha, magmaDouble_const_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dx, magma_int_t incx, double beta, magmaDouble_ptr dy, magma_int_t incy, magmaDouble_ptr dwork, magma_int_t lwork, magma_queue_t queue );
```
"""
function magmablas_dsymv_work(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)
    ccall((:magmablas_dsymv_work, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Cdouble, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)
end

"""
    magma_idamax_native(length, x, incx, ipiv, info, step, gbstep, queue)


### Prototype
```c
magma_int_t magma_idamax_native( magma_int_t length, magmaDouble_ptr x, magma_int_t incx, magma_int_t* ipiv, magma_int_t *info, magma_int_t step, magma_int_t gbstep, magma_queue_t queue);
```
"""
function magma_idamax_native(length, x, incx, ipiv, info, step, gbstep, queue)
    ccall((:magma_idamax_native, libmagma), magma_int_t, (magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), length, x, incx, ipiv, info, step, gbstep, queue)
end

"""
    magma_drotg(a, b, c, s, queue)


### Prototype
```c
void magma_drotg( magmaDouble_ptr a, magmaDouble_ptr b, magmaDouble_ptr c, magmaDouble_ptr s, magma_queue_t queue );
```
"""
function magma_drotg(a, b, c, s, queue)
    ccall((:magma_drotg, libmagma), Cvoid, (magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magma_queue_t), a, b, c, s, queue)
end

"""
    magma_dscal_dger_native(m, n, dA, lda, info, step, gbstep, queue)


### Prototype
```c
magma_int_t magma_dscal_dger_native( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t lda, magma_int_t *info, magma_int_t step, magma_int_t gbstep, magma_queue_t queue);
```
"""
function magma_dscal_dger_native(m, n, dA, lda, info, step, gbstep, queue)
    ccall((:magma_dscal_dger_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA, lda, info, step, gbstep, queue)
end

"""
    magma_dswap_native(n, x, incx, step, ipiv, queue)


### Prototype
```c
void magma_dswap_native( magma_int_t n, magmaDouble_ptr x, magma_int_t incx, magma_int_t step, magma_int_t* ipiv, magma_queue_t queue);
```
"""
function magma_dswap_native(n, x, incx, step, ipiv, queue)
    ccall((:magma_dswap_native, libmagma), Cvoid, (magma_int_t, magmaDouble_ptr, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), n, x, incx, step, ipiv, queue)
end

"""
    magmablas_dtrmv(uplo, trans, diag, n, dA, ldda, dx, incx, queue)


### Prototype
```c
void magmablas_dtrmv( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t n, double *dA, magma_int_t ldda, double *dx, magma_int_t incx, magma_queue_t queue );
```
"""
function magmablas_dtrmv(uplo, trans, diag, n, dA, ldda, dx, incx, queue)
    ccall((:magmablas_dtrmv, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t), uplo, trans, diag, n, dA, ldda, dx, incx, queue)
end

"""
    magmablas_dsyrk_internal(uplo, trans, n, k, nb, alpha, dA, ldda, dB, lddb, beta, dC, lddc, conjugate, queue)


### Prototype
```c
void magmablas_dsyrk_internal( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magma_int_t nb, double alpha, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, double beta, magmaDouble_ptr dC, magma_int_t lddc, magma_int_t conjugate, magma_queue_t queue);
```
"""
function magmablas_dsyrk_internal(uplo, trans, n, k, nb, alpha, dA, ldda, dB, lddb, beta, dC, lddc, conjugate, queue)
    ccall((:magmablas_dsyrk_internal, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Cdouble, magmaDouble_ptr, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, nb, alpha, dA, ldda, dB, lddb, beta, dC, lddc, conjugate, queue)
end

"""
    magmablas_dsyrk_small_reduce(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc, nthread_blocks, queue)


### Prototype
```c
void magmablas_dsyrk_small_reduce( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, double* dA, magma_int_t ldda, double beta, double* dC, magma_int_t lddc, magma_int_t nthread_blocks, magma_queue_t queue );
```
"""
function magmablas_dsyrk_small_reduce(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc, nthread_blocks, queue)
    ccall((:magmablas_dsyrk_small_reduce, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{Cdouble}, magma_int_t, Cdouble, Ptr{Cdouble}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc, nthread_blocks, queue)
end

"""
    magmablas_dtrmm(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, queue)


### Prototype
```c
void magmablas_dtrmm( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, double *dA, magma_int_t ldda, double *dB, magma_int_t lddb, magma_queue_t queue );
```
"""
function magmablas_dtrmm(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, queue)
    ccall((:magmablas_dtrmm, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, queue)
end

"""
    magma_dgetf2trsm_2d_native(m, n, dA, ldda, dB, lddb, queue)


### Prototype
```c
void magma_dgetf2trsm_2d_native( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magma_queue_t queue);
```
"""
function magma_dgetf2trsm_2d_native(m, n, dA, ldda, dB, lddb, queue)
    ccall((:magma_dgetf2trsm_2d_native, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t), m, n, dA, ldda, dB, lddb, queue)
end

"""
    magma_dpotf2_lpout(uplo, n, dA, lda, gbstep, dinfo, queue)


### Prototype
```c
magma_int_t magma_dpotf2_lpout( magma_uplo_t uplo, magma_int_t n, double *dA, magma_int_t lda, magma_int_t gbstep, magma_int_t *dinfo, magma_queue_t queue);
```
"""
function magma_dpotf2_lpout(uplo, n, dA, lda, gbstep, dinfo, queue)
    ccall((:magma_dpotf2_lpout, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), uplo, n, dA, lda, gbstep, dinfo, queue)
end

"""
    magma_dpotf2_lpin(uplo, n, dA, lda, gbstep, dinfo, queue)


### Prototype
```c
magma_int_t magma_dpotf2_lpin( magma_uplo_t uplo, magma_int_t n, double *dA, magma_int_t lda, magma_int_t gbstep, magma_int_t *dinfo, magma_queue_t queue);
```
"""
function magma_dpotf2_lpin(uplo, n, dA, lda, gbstep, dinfo, queue)
    ccall((:magma_dpotf2_lpin, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), uplo, n, dA, lda, gbstep, dinfo, queue)
end

"""
    magmablas_sgetmatrix_transpose_mgpu(ngpu, m, n, nb, dAT, ldda, hA, lda, dwork, lddw, queues)


### Prototype
```c
void magmablas_sgetmatrix_transpose_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magma_int_t nb, magmaFloat_const_ptr const dAT[], magma_int_t ldda, float *hA, magma_int_t lda, magmaFloat_ptr dwork[], magma_int_t lddw, magma_queue_t queues[][2] );
```
"""
function magmablas_sgetmatrix_transpose_mgpu(ngpu, m, n, nb, dAT, ldda, hA, lda, dwork, lddw, queues)
    ccall((:magmablas_sgetmatrix_transpose_mgpu, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloat_const_ptr}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{NTuple{2, magma_queue_t}}), ngpu, m, n, nb, dAT, ldda, hA, lda, dwork, lddw, queues)
end

"""
    magmablas_ssetmatrix_transpose_mgpu(ngpu, m, n, nb, hA, lda, dAT, ldda, dwork, lddw, queues)


### Prototype
```c
void magmablas_ssetmatrix_transpose_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magma_int_t nb, const float *hA, magma_int_t lda, magmaFloat_ptr dAT[], magma_int_t ldda, magmaFloat_ptr dwork[], magma_int_t lddw, magma_queue_t queues[][2] );
```
"""
function magmablas_ssetmatrix_transpose_mgpu(ngpu, m, n, nb, hA, lda, dAT, ldda, dwork, lddw, queues)
    ccall((:magmablas_ssetmatrix_transpose_mgpu, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{NTuple{2, magma_queue_t}}), ngpu, m, n, nb, hA, lda, dAT, ldda, dwork, lddw, queues)
end

"""
    magma_shtodhe(ngpu, uplo, n, nb, A, lda, dA, ldda, queues, info)

in src/ssytrd_mgpu.cpp
TODO rename ssetmatrix_sy or similar
### Prototype
```c
magma_int_t magma_shtodhe( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, magmaFloat_ptr dA[], magma_int_t ldda, magma_queue_t queues[][10], magma_int_t *info );
```
"""
function magma_shtodhe(ngpu, uplo, n, nb, A, lda, dA, ldda, queues, info)
    ccall((:magma_shtodhe, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{NTuple{10, magma_queue_t}}, Ptr{magma_int_t}), ngpu, uplo, n, nb, A, lda, dA, ldda, queues, info)
end

"""
    magma_shtodpo(ngpu, uplo, m, n, off_i, off_j, nb, A, lda, dA, ldda, queues, info)

in src/spotrf3_mgpu.cpp
TODO same as magma_shtodhe?
### Prototype
```c
magma_int_t magma_shtodpo( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t off_i, magma_int_t off_j, magma_int_t nb, float *A, magma_int_t lda, magmaFloat_ptr dA[], magma_int_t ldda, magma_queue_t queues[][3], magma_int_t *info );
```
"""
function magma_shtodpo(ngpu, uplo, m, n, off_i, off_j, nb, A, lda, dA, ldda, queues, info)
    ccall((:magma_shtodpo, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{NTuple{3, magma_queue_t}}, Ptr{magma_int_t}), ngpu, uplo, m, n, off_i, off_j, nb, A, lda, dA, ldda, queues, info)
end

"""
    magma_sdtohpo(ngpu, uplo, m, n, off_i, off_j, nb, NB, A, lda, dA, ldda, queues, info)

in src/spotrf3_mgpu.cpp
TODO rename sgetmatrix_sy or similar
### Prototype
```c
magma_int_t magma_sdtohpo( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t off_i, magma_int_t off_j, magma_int_t nb, magma_int_t NB, float *A, magma_int_t lda, magmaFloat_ptr dA[], magma_int_t ldda, magma_queue_t queues[][3], magma_int_t *info );
```
"""
function magma_sdtohpo(ngpu, uplo, m, n, off_i, off_j, nb, NB, A, lda, dA, ldda, queues, info)
    ccall((:magma_sdtohpo, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{NTuple{3, magma_queue_t}}, Ptr{magma_int_t}), ngpu, uplo, m, n, off_i, off_j, nb, NB, A, lda, dA, ldda, queues, info)
end

"""
    magmablas_ssymm_mgpu(side, uplo, m, n, alpha, dA, ldda, offset, dB, lddb, beta, dC, lddc, dwork, dworksiz, ngpu, nb, queues, nqueue, events, nevents, gnode, ncmplx)

Multi-GPU BLAS functions (alphabetical order)
### Prototype
```c
void magmablas_ssymm_mgpu( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, float alpha, magmaFloat_ptr dA[], magma_int_t ldda, magma_int_t offset, magmaFloat_ptr dB[], magma_int_t lddb, float beta, magmaFloat_ptr dC[], magma_int_t lddc, magmaFloat_ptr dwork[], magma_int_t dworksiz, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[][20], magma_int_t nqueue, magma_event_t events[][MagmaMaxGPUs*MagmaMaxGPUs+10], magma_int_t nevents, magma_int_t gnode[MagmaMaxGPUs][MagmaMaxGPUs+2], magma_int_t ncmplx );
```
"""
function magmablas_ssymm_mgpu(side, uplo, m, n, alpha, dA, ldda, offset, dB, lddb, beta, dC, lddc, dwork, dworksiz, ngpu, nb, queues, nqueue, events, nevents, gnode, ncmplx)
    ccall((:magmablas_ssymm_mgpu, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{20, magma_queue_t}}, magma_int_t, Ptr{NTuple{74, magma_event_t}}, magma_int_t, Ptr{NTuple{10, magma_int_t}}, magma_int_t), side, uplo, m, n, alpha, dA, ldda, offset, dB, lddb, beta, dC, lddc, dwork, dworksiz, ngpu, nb, queues, nqueue, events, nevents, gnode, ncmplx)
end

"""
    magmablas_ssymv_mgpu(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)


### Prototype
```c
magma_int_t magmablas_ssymv_mgpu( magma_uplo_t uplo, magma_int_t n, float alpha, magmaFloat_const_ptr const d_lA[], magma_int_t ldda, magma_int_t offset, magmaFloat_const_ptr dx, magma_int_t incx, float beta, magmaFloat_ptr dy, magma_int_t incy, float *hwork, magma_int_t lhwork, magmaFloat_ptr dwork[], magma_int_t ldwork, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[] );
```
"""
function magmablas_ssymv_mgpu(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
    ccall((:magmablas_ssymv_mgpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Cfloat, Ptr{magmaFloat_const_ptr}, magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_queue_t}), uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
end

"""
    magmablas_ssymv_mgpu_sync(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)


### Prototype
```c
magma_int_t magmablas_ssymv_mgpu_sync( magma_uplo_t uplo, magma_int_t n, float alpha, magmaFloat_const_ptr const d_lA[], magma_int_t ldda, magma_int_t offset, magmaFloat_const_ptr dx, magma_int_t incx, float beta, magmaFloat_ptr dy, magma_int_t incy, float *hwork, magma_int_t lhwork, magmaFloat_ptr dwork[], magma_int_t ldwork, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[] );
```
"""
function magmablas_ssymv_mgpu_sync(uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
    ccall((:magmablas_ssymv_mgpu_sync, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Cfloat, Ptr{magmaFloat_const_ptr}, magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_queue_t}), uplo, n, alpha, d_lA, ldda, offset, dx, incx, beta, dy, incy, hwork, lhwork, dwork, ldwork, ngpu, nb, queues)
end

"""
    magma_ssytrs_gpu(uplo, n, nrhs, dA, ldda, ipiv, dB, lddb, info, queue)


### Prototype
```c
magma_int_t magma_ssytrs_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, float *dA, magma_int_t ldda, magma_int_t *ipiv, float *dB, magma_int_t lddb, magma_int_t *info, magma_queue_t queue );
```
"""
function magma_ssytrs_gpu(uplo, n, nrhs, dA, ldda, ipiv, dB, lddb, info, queue)
    ccall((:magma_ssytrs_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_queue_t), uplo, n, nrhs, dA, ldda, ipiv, dB, lddb, info, queue)
end

"""
    magma_ssyr2k_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)

Ichi's version, in src/ssytrd_mgpu.cpp
### Prototype
```c
void magma_ssyr2k_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_trans_t trans, magma_int_t nb, magma_int_t n, magma_int_t k, float alpha, magmaFloat_ptr dB[], magma_int_t lddb, magma_int_t b_offset, float beta, magmaFloat_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t nqueue, magma_queue_t queues[][10] );
```
"""
function magma_ssyr2k_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
    ccall((:magma_ssyr2k_mgpu, libmagma), Cvoid, (magma_int_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{10, magma_queue_t}}), ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
end

"""
    magmablas_ssyr2k_mgpu2(uplo, trans, n, k, alpha, dA, ldda, a_offset, dB, lddb, b_offset, beta, dC, lddc, c_offset, ngpu, nb, queues, nqueue)


### Prototype
```c
void magmablas_ssyr2k_mgpu2( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, magmaFloat_ptr dA[], magma_int_t ldda, magma_int_t a_offset, magmaFloat_ptr dB[], magma_int_t lddb, magma_int_t b_offset, float beta, magmaFloat_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t ngpu, magma_int_t nb, magma_queue_t queues[][20], magma_int_t nqueue );
```
"""
function magmablas_ssyr2k_mgpu2(uplo, trans, n, k, alpha, dA, ldda, a_offset, dB, lddb, b_offset, beta, dC, lddc, c_offset, ngpu, nb, queues, nqueue)
    ccall((:magmablas_ssyr2k_mgpu2, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{20, magma_queue_t}}, magma_int_t), uplo, trans, n, k, alpha, dA, ldda, a_offset, dB, lddb, b_offset, beta, dC, lddc, c_offset, ngpu, nb, queues, nqueue)
end

"""
    magma_ssyrk_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)

in src/spotrf_mgpu_right.cpp
### Prototype
```c
void magma_ssyrk_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_trans_t trans, magma_int_t nb, magma_int_t n, magma_int_t k, float alpha, magmaFloat_ptr dB[], magma_int_t lddb, magma_int_t b_offset, float beta, magmaFloat_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t nqueue, magma_queue_t queues[][10] );
```
"""
function magma_ssyrk_mgpu(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
    ccall((:magma_ssyrk_mgpu, libmagma), Cvoid, (magma_int_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{10, magma_queue_t}}), ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
end

"""
    magma_ssyrk_mgpu2(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)

in src/spotrf_mgpu_right.cpp
### Prototype
```c
void magma_ssyrk_mgpu2( magma_int_t ngpu, magma_uplo_t uplo, magma_trans_t trans, magma_int_t nb, magma_int_t n, magma_int_t k, float alpha, magmaFloat_ptr dB[], magma_int_t lddb, magma_int_t b_offset, float beta, magmaFloat_ptr dC[], magma_int_t lddc, magma_int_t c_offset, magma_int_t nqueue, magma_queue_t queues[][10] );
```
"""
function magma_ssyrk_mgpu2(ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
    ccall((:magma_ssyrk_mgpu2, libmagma), Cvoid, (magma_int_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{10, magma_queue_t}}), ngpu, uplo, trans, nb, n, k, alpha, dB, lddb, b_offset, beta, dC, lddc, c_offset, nqueue, queues)
end

"""
    magmablas_sdiinertia(n, dA, ldda, dneig, queue)

LAPACK auxiliary functions (alphabetical order)
### Prototype
```c
magma_int_t magmablas_sdiinertia( magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, int *dneig, magma_queue_t queue );
```
"""
function magmablas_sdiinertia(n, dA, ldda, dneig, queue)
    ccall((:magmablas_sdiinertia, libmagma), magma_int_t, (magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{Cint}, magma_queue_t), n, dA, ldda, dneig, queue)
end

"""
    magmablas_sgeam(transA, transB, m, n, alpha, dA, ldda, beta, dB, lddb, dC, lddc, queue)


### Prototype
```c
void magmablas_sgeam( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, float beta, magmaFloat_const_ptr dB, magma_int_t lddb, magmaFloat_ptr dC, magma_int_t lddc, magma_queue_t queue );
```
"""
function magmablas_sgeam(transA, transB, m, n, alpha, dA, ldda, beta, dB, lddb, dC, lddc, queue)
    ccall((:magmablas_sgeam, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t), transA, transB, m, n, alpha, dA, ldda, beta, dB, lddb, dC, lddc, queue)
end

"""
    magmablas_ssiinertia(uplo, n, dA, ldda, ipiv, dneig, queue)


### Prototype
```c
magma_int_t magmablas_ssiinertia( magma_uplo_t uplo, magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, magma_int_t *ipiv, int *dneig, magma_queue_t queue );
```
"""
function magmablas_ssiinertia(uplo, n, dA, ldda, ipiv, dneig, queue)
    ccall((:magmablas_ssiinertia, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{Cint}, magma_queue_t), uplo, n, dA, ldda, ipiv, dneig, queue)
end

"""
    magma_slaswp_rowparallel_native(n, input, ldi, output, ldo, k1, k2, pivinfo, queue)


### Prototype
```c
void magma_slaswp_rowparallel_native( magma_int_t n, float* input, magma_int_t ldi, float* output, magma_int_t ldo, magma_int_t k1, magma_int_t k2, magma_int_t *pivinfo, magma_queue_t queue);
```
"""
function magma_slaswp_rowparallel_native(n, input, ldi, output, ldo, k1, k2, pivinfo, queue)
    ccall((:magma_slaswp_rowparallel_native, libmagma), Cvoid, (magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), n, input, ldi, output, ldo, k1, k2, pivinfo, queue)
end

"""
    magma_slaswp_columnserial(n, dA, lda, k1, k2, dipiv, queue)


### Prototype
```c
void magma_slaswp_columnserial( magma_int_t n, magmaFloat_ptr dA, magma_int_t lda, magma_int_t k1, magma_int_t k2, magma_int_t *dipiv, magma_queue_t queue);
```
"""
function magma_slaswp_columnserial(n, dA, lda, k1, k2, dipiv, queue)
    ccall((:magma_slaswp_columnserial, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), n, dA, lda, k1, k2, dipiv, queue)
end

"""
    magmablas_strsv(uplo, transA, diag, n, dA, ldda, db, incb, queue)

Level 2 BLAS (alphabetical order)
/
trsv were always queue versions
### Prototype
```c
void magmablas_strsv( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr db, magma_int_t incb, magma_queue_t queue );
```
"""
function magmablas_strsv(uplo, transA, diag, n, dA, ldda, db, incb, queue)
    ccall((:magmablas_strsv, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t), uplo, transA, diag, n, dA, ldda, db, incb, queue)
end

"""
    magmablas_strsv_outofplace(uplo, transA, diag, n, dA, ldda, db, incb, dx, queue, flag)

todo: move flag before queue?
### Prototype
```c
void magmablas_strsv_outofplace( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_ptr db, magma_int_t incb, magmaFloat_ptr dx, magma_queue_t queue, magma_int_t flag );
```
"""
function magmablas_strsv_outofplace(uplo, transA, diag, n, dA, ldda, db, incb, dx, queue, flag)
    ccall((:magmablas_strsv_outofplace, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_queue_t, magma_int_t), uplo, transA, diag, n, dA, ldda, db, incb, dx, queue, flag)
end

"""
    magmablas_ssymv_work(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)

hemv/symv_work were always queue versions
### Prototype
```c
magma_int_t magmablas_ssymv_work( magma_uplo_t uplo, magma_int_t n, float alpha, magmaFloat_const_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dx, magma_int_t incx, float beta, magmaFloat_ptr dy, magma_int_t incy, magmaFloat_ptr dwork, magma_int_t lwork, magma_queue_t queue );
```
"""
function magmablas_ssymv_work(uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)
    ccall((:magmablas_ssymv_work, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Cfloat, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t), uplo, n, alpha, dA, ldda, dx, incx, beta, dy, incy, dwork, lwork, queue)
end

"""
    magma_isamax_native(length, x, incx, ipiv, info, step, gbstep, queue)


### Prototype
```c
magma_int_t magma_isamax_native( magma_int_t length, magmaFloat_ptr x, magma_int_t incx, magma_int_t* ipiv, magma_int_t *info, magma_int_t step, magma_int_t gbstep, magma_queue_t queue);
```
"""
function magma_isamax_native(length, x, incx, ipiv, info, step, gbstep, queue)
    ccall((:magma_isamax_native, libmagma), magma_int_t, (magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), length, x, incx, ipiv, info, step, gbstep, queue)
end

"""
    magma_srotg(a, b, c, s, queue)


### Prototype
```c
void magma_srotg( magmaFloat_ptr a, magmaFloat_ptr b, magmaFloat_ptr c, magmaFloat_ptr s, magma_queue_t queue );
```
"""
function magma_srotg(a, b, c, s, queue)
    ccall((:magma_srotg, libmagma), Cvoid, (magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magma_queue_t), a, b, c, s, queue)
end

"""
    magma_sscal_sger_native(m, n, dA, lda, info, step, gbstep, queue)


### Prototype
```c
magma_int_t magma_sscal_sger_native( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t lda, magma_int_t *info, magma_int_t step, magma_int_t gbstep, magma_queue_t queue);
```
"""
function magma_sscal_sger_native(m, n, dA, lda, info, step, gbstep, queue)
    ccall((:magma_sscal_sger_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA, lda, info, step, gbstep, queue)
end

"""
    magma_sswap_native(n, x, incx, step, ipiv, queue)


### Prototype
```c
void magma_sswap_native( magma_int_t n, magmaFloat_ptr x, magma_int_t incx, magma_int_t step, magma_int_t* ipiv, magma_queue_t queue);
```
"""
function magma_sswap_native(n, x, incx, step, ipiv, queue)
    ccall((:magma_sswap_native, libmagma), Cvoid, (magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), n, x, incx, step, ipiv, queue)
end

"""
    magmablas_strmv(uplo, trans, diag, n, dA, ldda, dx, incx, queue)


### Prototype
```c
void magmablas_strmv( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_int_t n, float *dA, magma_int_t ldda, float *dx, magma_int_t incx, magma_queue_t queue );
```
"""
function magmablas_strmv(uplo, trans, diag, n, dA, ldda, dx, incx, queue)
    ccall((:magmablas_strmv, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t), uplo, trans, diag, n, dA, ldda, dx, incx, queue)
end

"""
    magmablas_ssyrk_internal(uplo, trans, n, k, nb, alpha, dA, ldda, dB, lddb, beta, dC, lddc, conjugate, queue)


### Prototype
```c
void magmablas_ssyrk_internal( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magma_int_t nb, float alpha, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, float beta, magmaFloat_ptr dC, magma_int_t lddc, magma_int_t conjugate, magma_queue_t queue);
```
"""
function magmablas_ssyrk_internal(uplo, trans, n, k, nb, alpha, dA, ldda, dB, lddb, beta, dC, lddc, conjugate, queue)
    ccall((:magmablas_ssyrk_internal, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Cfloat, magmaFloat_ptr, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, nb, alpha, dA, ldda, dB, lddb, beta, dC, lddc, conjugate, queue)
end

"""
    magmablas_ssyrk_small_reduce(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc, nthread_blocks, queue)


### Prototype
```c
void magmablas_ssyrk_small_reduce( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, float* dA, magma_int_t ldda, float beta, float* dC, magma_int_t lddc, magma_int_t nthread_blocks, magma_queue_t queue );
```
"""
function magmablas_ssyrk_small_reduce(uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc, nthread_blocks, queue)
    ccall((:magmablas_ssyrk_small_reduce, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{Cfloat}, magma_int_t, Cfloat, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA, ldda, beta, dC, lddc, nthread_blocks, queue)
end

"""
    magmablas_strmm(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, queue)


### Prototype
```c
void magmablas_strmm( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, float *dA, magma_int_t ldda, float *dB, magma_int_t lddb, magma_queue_t queue );
```
"""
function magmablas_strmm(side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, queue)
    ccall((:magmablas_strmm, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA, ldda, dB, lddb, queue)
end

"""
    magma_sgetf2trsm_2d_native(m, n, dA, ldda, dB, lddb, queue)


### Prototype
```c
void magma_sgetf2trsm_2d_native( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, magma_queue_t queue);
```
"""
function magma_sgetf2trsm_2d_native(m, n, dA, ldda, dB, lddb, queue)
    ccall((:magma_sgetf2trsm_2d_native, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t), m, n, dA, ldda, dB, lddb, queue)
end

"""
    magma_spotf2_lpout(uplo, n, dA, lda, gbstep, dinfo, queue)


### Prototype
```c
magma_int_t magma_spotf2_lpout( magma_uplo_t uplo, magma_int_t n, float *dA, magma_int_t lda, magma_int_t gbstep, magma_int_t *dinfo, magma_queue_t queue);
```
"""
function magma_spotf2_lpout(uplo, n, dA, lda, gbstep, dinfo, queue)
    ccall((:magma_spotf2_lpout, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), uplo, n, dA, lda, gbstep, dinfo, queue)
end

"""
    magma_spotf2_lpin(uplo, n, dA, lda, gbstep, dinfo, queue)


### Prototype
```c
magma_int_t magma_spotf2_lpin( magma_uplo_t uplo, magma_int_t n, float *dA, magma_int_t lda, magma_int_t gbstep, magma_int_t *dinfo, magma_queue_t queue);
```
"""
function magma_spotf2_lpin(uplo, n, dA, lda, gbstep, dinfo, queue)
    ccall((:magma_spotf2_lpin, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_queue_t), uplo, n, dA, lda, gbstep, dinfo, queue)
end

"""
    magma_zset_pointer(output_array, input, lda, row, column, batch_offset, batchCount, queue)

 local auxiliary routines
### Prototype
```c
void magma_zset_pointer( magmaDoubleComplex **output_array, magmaDoubleComplex *input, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batch_offset, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zset_pointer(output_array, input, lda, row, column, batch_offset, batchCount, queue)
    ccall((:magma_zset_pointer, libmagma), Cvoid, (Ptr{Ptr{magmaDoubleComplex}}, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input, lda, row, column, batch_offset, batchCount, queue)
end

"""
    magma_zdisplace_pointers(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_zdisplace_pointers( magmaDoubleComplex **output_array, magmaDoubleComplex **input_array, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zdisplace_pointers(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_zdisplace_pointers, libmagma), Cvoid, (Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_zrecommend_cublas_gemm_batched(transa, transb, m, n, k)


### Prototype
```c
magma_int_t magma_zrecommend_cublas_gemm_batched( magma_trans_t transa, magma_trans_t transb, magma_int_t m, magma_int_t n, magma_int_t k);
```
"""
function magma_zrecommend_cublas_gemm_batched(transa, transb, m, n, k)
    ccall((:magma_zrecommend_cublas_gemm_batched, libmagma), magma_int_t, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t), transa, transb, m, n, k)
end

"""
    magma_zrecommend_cublas_gemm_stream(transa, transb, m, n, k)


### Prototype
```c
magma_int_t magma_zrecommend_cublas_gemm_stream( magma_trans_t transa, magma_trans_t transb, magma_int_t m, magma_int_t n, magma_int_t k);
```
"""
function magma_zrecommend_cublas_gemm_stream(transa, transb, m, n, k)
    ccall((:magma_zrecommend_cublas_gemm_stream, libmagma), magma_int_t, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t), transa, transb, m, n, k)
end

"""
    magma_get_zpotrf_batched_nbparam(n, nb, recnb)


### Prototype
```c
void magma_get_zpotrf_batched_nbparam(magma_int_t n, magma_int_t *nb, magma_int_t *recnb);
```
"""
function magma_get_zpotrf_batched_nbparam(n, nb, recnb)
    ccall((:magma_get_zpotrf_batched_nbparam, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, recnb)
end

# no prototype is found for this function at magma_zbatched.h:55:13, please use with caution
"""
    magma_get_zpotrf_batched_crossover()


### Prototype
```c
magma_int_t magma_get_zpotrf_batched_crossover();
```
"""
function magma_get_zpotrf_batched_crossover()
    ccall((:magma_get_zpotrf_batched_crossover, libmagma), magma_int_t, ())
end

"""
    magma_get_zgetrf_batched_nbparam(n, nb, recnb)


### Prototype
```c
void magma_get_zgetrf_batched_nbparam(magma_int_t n, magma_int_t *nb, magma_int_t *recnb);
```
"""
function magma_get_zgetrf_batched_nbparam(n, nb, recnb)
    ccall((:magma_get_zgetrf_batched_nbparam, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, recnb)
end

"""
    magma_get_zgetrf_batched_ntcol(m, n)


### Prototype
```c
magma_int_t magma_get_zgetrf_batched_ntcol(magma_int_t m, magma_int_t n);
```
"""
function magma_get_zgetrf_batched_ntcol(m, n)
    ccall((:magma_get_zgetrf_batched_ntcol, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_zgemm_batched_ntcol(n)


### Prototype
```c
magma_int_t magma_get_zgemm_batched_ntcol(magma_int_t n);
```
"""
function magma_get_zgemm_batched_ntcol(n)
    ccall((:magma_get_zgemm_batched_ntcol, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_zgemm_batched_smallsq_limit(n)


### Prototype
```c
magma_int_t magma_get_zgemm_batched_smallsq_limit(magma_int_t n);
```
"""
function magma_get_zgemm_batched_smallsq_limit(n)
    ccall((:magma_get_zgemm_batched_smallsq_limit, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_zgeqrf_batched_nb(m)


### Prototype
```c
magma_int_t magma_get_zgeqrf_batched_nb(magma_int_t m);
```
"""
function magma_get_zgeqrf_batched_nb(m)
    ccall((:magma_get_zgeqrf_batched_nb, libmagma), magma_int_t, (magma_int_t,), m)
end

"""
    magma_use_zgeqrf_batched_fused_update(m, n, batchCount)


### Prototype
```c
magma_int_t magma_use_zgeqrf_batched_fused_update(magma_int_t m, magma_int_t n, magma_int_t batchCount);
```
"""
function magma_use_zgeqrf_batched_fused_update(m, n, batchCount)
    ccall((:magma_use_zgeqrf_batched_fused_update, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), m, n, batchCount)
end

"""
    magma_get_zgeqr2_fused_sm_batched_nthreads(m, n)


### Prototype
```c
magma_int_t magma_get_zgeqr2_fused_sm_batched_nthreads(magma_int_t m, magma_int_t n);
```
"""
function magma_get_zgeqr2_fused_sm_batched_nthreads(m, n)
    ccall((:magma_get_zgeqr2_fused_sm_batched_nthreads, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_zgeqrf_batched_ntcol(m, n)


### Prototype
```c
magma_int_t magma_get_zgeqrf_batched_ntcol(magma_int_t m, magma_int_t n);
```
"""
function magma_get_zgeqrf_batched_ntcol(m, n)
    ccall((:magma_get_zgeqrf_batched_ntcol, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_zgetri_batched_ntcol(m, n)


### Prototype
```c
magma_int_t magma_get_zgetri_batched_ntcol(magma_int_t m, magma_int_t n);
```
"""
function magma_get_zgetri_batched_ntcol(m, n)
    ccall((:magma_get_zgetri_batched_ntcol, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_ztrsm_batched_stop_nb(side, m, n)


### Prototype
```c
magma_int_t magma_get_ztrsm_batched_stop_nb(magma_side_t side, magma_int_t m, magma_int_t n);
```
"""
function magma_get_ztrsm_batched_stop_nb(side, m, n)
    ccall((:magma_get_ztrsm_batched_stop_nb, libmagma), magma_int_t, (magma_side_t, magma_int_t, magma_int_t), side, m, n)
end

"""
    magmablas_zswapdblk_batched(n, nb, dA, ldda, inca, dB, lddb, incb, batchCount, queue)


### Prototype
```c
void magmablas_zswapdblk_batched( magma_int_t n, magma_int_t nb, magmaDoubleComplex **dA, magma_int_t ldda, magma_int_t inca, magmaDoubleComplex **dB, magma_int_t lddb, magma_int_t incb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zswapdblk_batched(n, nb, dA, ldda, inca, dB, lddb, incb, batchCount, queue)
    ccall((:magmablas_zswapdblk_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, nb, dA, ldda, inca, dB, lddb, incb, batchCount, queue)
end

"""
    magmablas_zgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)

 BLAS batched routines
### Prototype
```c
void magmablas_zgemm_batched_core( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex const * const * dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t Ci, magma_int_t Cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
    ccall((:magmablas_zgemm_batched_core, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
end

"""
    magma_zgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)


### Prototype
```c
void magma_zgemm_batched_core( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex const * const * dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t Ci, magma_int_t Cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
    ccall((:magma_zgemm_batched_core, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
end

"""
    magma_zgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magma_zgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t ldda, magmaDoubleComplex const * const * dB_array, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magma_zgemm_batched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t ldda, magmaDoubleComplex const * const * dB_array, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zgemm_batched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zgemm_batched_strided(transA, transB, m, n, k, alpha, dA, ldda, strideA, dB, lddb, strideB, beta, dC, lddc, strideC, batchCount, queue)


### Prototype
```c
void magmablas_zgemm_batched_strided( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * dA, magma_int_t ldda, magma_int_t strideA, magmaDoubleComplex const * dB, magma_int_t lddb, magma_int_t strideB, magmaDoubleComplex beta, magmaDoubleComplex * dC, magma_int_t lddc, magma_int_t strideC, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zgemm_batched_strided(transA, transB, m, n, k, alpha, dA, ldda, strideA, dB, lddb, strideB, beta, dC, lddc, strideC, batchCount, queue)
    ccall((:magmablas_zgemm_batched_strided, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA, ldda, strideA, dB, lddb, strideB, beta, dC, lddc, strideC, batchCount, queue)
end

"""
    magmablas_zgemm_batched_smallsq(transA, transB, m, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zgemm_batched_smallsq( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magmaDoubleComplex const * const * dB_array, magma_int_t bi, magma_int_t bj, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t ci, magma_int_t cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zgemm_batched_smallsq(transA, transB, m, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
    ccall((:magmablas_zgemm_batched_smallsq, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
end

"""
    magmablas_zsyrk_batched_core(uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zsyrk_batched_core( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magmaDoubleComplex const * const * dB_array, magma_int_t bi, magma_int_t bj, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t ci, magma_int_t cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zsyrk_batched_core(uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
    ccall((:magmablas_zsyrk_batched_core, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
end

"""
    magmablas_zherk_batched_core(uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zherk_batched_core( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magmaDoubleComplex const * const * dB_array, magma_int_t bi, magma_int_t bj, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t ci, magma_int_t cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zherk_batched_core(uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
    ccall((:magmablas_zherk_batched_core, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
end

"""
    magmablas_zsyrk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zsyrk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t ldda, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zsyrk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zsyrk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magma_zherk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magma_zherk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, magmaDoubleComplex const * const * dA_array, magma_int_t ldda, double beta, magmaDoubleComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zherk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magma_zherk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zherk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zherk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, magmaDoubleComplex const * const * dA_array, magma_int_t ldda, double beta, magmaDoubleComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zherk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zherk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zher2k_batched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zher2k_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t ldda, magmaDoubleComplex const * const * dB_array, magma_int_t lddb, double beta, magmaDoubleComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zher2k_batched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zher2k_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zsyr2k_batched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zsyr2k_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t ldda, magmaDoubleComplex const * const * dB_array, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zsyr2k_batched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zsyr2k_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_ztrtri_diag_batched(uplo, diag, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_ztrtri_diag_batched( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, magmaDoubleComplex const * const *dA_array, magma_int_t ldda, magmaDoubleComplex **dinvA_array, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ztrtri_diag_batched(uplo, diag, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
    ccall((:magmablas_ztrtri_diag_batched, libmagma), Cvoid, (magma_uplo_t, magma_diag_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, diag, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
end

"""
    magmablas_ztrsm_small_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_small_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrsm_small_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_ztrsm_small_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_ztrsm_recursive_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_recursive_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrsm_recursive_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_ztrsm_recursive_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_ztrsm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrsm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ztrsm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ztrsm_inv_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_inv_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex** dA_array, magma_int_t ldda, magmaDoubleComplex** dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ztrsm_inv_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ztrsm_inv_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ztrsm_inv_work_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_inv_work_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex** dA_array, magma_int_t ldda, magmaDoubleComplex** dB_array, magma_int_t lddb, magmaDoubleComplex** dX_array, magma_int_t lddx, magmaDoubleComplex** dinvA_array, magma_int_t dinvA_length, magmaDoubleComplex** dA_displ, magmaDoubleComplex** dB_displ, magmaDoubleComplex** dX_displ, magmaDoubleComplex** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ztrsm_inv_work_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
    ccall((:magmablas_ztrsm_inv_work_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
end

"""
    magmablas_ztrsm_inv_outofplace_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_inv_outofplace_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex** dA_array, magma_int_t ldda, magmaDoubleComplex** dB_array, magma_int_t lddb, magmaDoubleComplex** dX_array, magma_int_t lddx, magmaDoubleComplex** dinvA_array, magma_int_t dinvA_length, magmaDoubleComplex** dA_displ, magmaDoubleComplex** dB_displ, magmaDoubleComplex** dX_displ, magmaDoubleComplex** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ztrsm_inv_outofplace_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
    ccall((:magmablas_ztrsm_inv_outofplace_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
end

"""
    magmablas_ztrsv_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, batchCount, queue)


### Prototype
```c
void magmablas_ztrsv_batched( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaDoubleComplex** dA_array, magma_int_t ldda, magmaDoubleComplex** dB_array, magma_int_t incb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ztrsv_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, batchCount, queue)
    ccall((:magmablas_ztrsv_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, transA, diag, n, dA_array, ldda, dB_array, incb, batchCount, queue)
end

"""
    magmablas_ztrsv_work_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, dX_array, batchCount, queue)


### Prototype
```c
void magmablas_ztrsv_work_batched( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaDoubleComplex** dA_array, magma_int_t ldda, magmaDoubleComplex** dB_array, magma_int_t incb, magmaDoubleComplex** dX_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ztrsv_work_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, dX_array, batchCount, queue)
    ccall((:magmablas_ztrsv_work_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_queue_t), uplo, transA, diag, n, dA_array, ldda, dB_array, incb, dX_array, batchCount, queue)
end

"""
    magmablas_ztrsv_outofplace_batched(uplo, transA, diag, n, A_array, lda, b_array, incb, x_array, batchCount, queue, flag)


### Prototype
```c
void magmablas_ztrsv_outofplace_batched( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaDoubleComplex ** A_array, magma_int_t lda, magmaDoubleComplex **b_array, magma_int_t incb, magmaDoubleComplex **x_array, magma_int_t batchCount, magma_queue_t queue, magma_int_t flag);
```
"""
function magmablas_ztrsv_outofplace_batched(uplo, transA, diag, n, A_array, lda, b_array, incb, x_array, batchCount, queue, flag)
    ccall((:magmablas_ztrsv_outofplace_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_queue_t, magma_int_t), uplo, transA, diag, n, A_array, lda, b_array, incb, x_array, batchCount, queue, flag)
end

"""
    magmablas_ztrmm_batched_core(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrmm_batched_core( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrmm_batched_core(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_ztrmm_batched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_ztrmm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrmm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrmm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ztrmm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_zhemm_batched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, roffA, coffA, roffB, coffB, roffC, coffC, batchCount, queue)


### Prototype
```c
void magmablas_zhemm_batched_core( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t lddc, magma_int_t roffA, magma_int_t coffA, magma_int_t roffB, magma_int_t coffB, magma_int_t roffC, magma_int_t coffC, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zhemm_batched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, roffA, coffA, roffB, coffB, roffC, coffC, batchCount, queue)
    ccall((:magmablas_zhemm_batched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, roffA, coffA, roffB, coffB, roffC, coffC, batchCount, queue)
end

"""
    magmablas_zhemm_batched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zhemm_batched( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zhemm_batched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zhemm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zhemv_batched_core(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, offA, offX, offY, batchCount, queue)


### Prototype
```c
void magmablas_zhemv_batched_core( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dX_array, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex **dY_array, magma_int_t incy, magma_int_t offA, magma_int_t offX, magma_int_t offY, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zhemv_batched_core(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, offA, offX, offY, batchCount, queue)
    ccall((:magmablas_zhemv_batched_core, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, offA, offX, offY, batchCount, queue)
end

"""
    magmablas_zhemv_batched(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_zhemv_batched( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dX_array, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex **dY_array, magma_int_t incy, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zhemv_batched(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, batchCount, queue)
    ccall((:magmablas_zhemv_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, batchCount, queue)
end

"""
    magma_zpotrf_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotrf_batched( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t lda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotrf_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)
    ccall((:magma_zpotrf_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, lda, info_array, batchCount, queue)
end

"""
    magma_zpotf2_batched(uplo, n, dA_array, ai, aj, lda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotf2_batched( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotf2_batched(uplo, n, dA_array, ai, aj, lda, info_array, gbstep, batchCount, queue)
    ccall((:magma_zpotf2_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, dA_array, ai, aj, lda, info_array, gbstep, batchCount, queue)
end

"""
    magma_zpotrf_panel_batched(uplo, n, nb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotrf_panel_batched( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magmaDoubleComplex** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotrf_panel_batched(uplo, n, nb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_zpotrf_panel_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, nb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_zpotrf_recpanel_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotrf_recpanel_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t min_recpnb, magmaDoubleComplex** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotrf_recpanel_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_zpotrf_recpanel_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_zpotrf_rectile_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotrf_rectile_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t min_recpnb, magmaDoubleComplex** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotrf_rectile_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_zpotrf_rectile_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_zpotrs_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotrs_batched( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotrs_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magma_zpotrs_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, nrhs, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magma_zposv_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, dinfo_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zposv_batched( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t lddb, magma_int_t *dinfo_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zposv_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, dinfo_array, batchCount, queue)
    ccall((:magma_zposv_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, nrhs, dA_array, ldda, dB_array, lddb, dinfo_array, batchCount, queue)
end

"""
    magma_zgetrs_batched(trans, n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetrs_batched( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex **dA_array, magma_int_t ldda, magma_int_t **dipiv_array, magmaDoubleComplex **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetrs_batched(trans, n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, batchCount, queue)
    ccall((:magma_zgetrs_batched, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), trans, n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, batchCount, queue)
end

"""
    magma_zlaswp_rowparallel_batched(n, input_array, input_i, input_j, ldi, output_array, output_i, output_j, ldo, k1, k2, pivinfo_array, batchCount, queue)


### Prototype
```c
void magma_zlaswp_rowparallel_batched( magma_int_t n, magmaDoubleComplex** input_array, magma_int_t input_i, magma_int_t input_j, magma_int_t ldi, magmaDoubleComplex** output_array, magma_int_t output_i, magma_int_t output_j, magma_int_t ldo, magma_int_t k1, magma_int_t k2, magma_int_t **pivinfo_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zlaswp_rowparallel_batched(n, input_array, input_i, input_j, ldi, output_array, output_i, output_j, ldo, k1, k2, pivinfo_array, batchCount, queue)
    ccall((:magma_zlaswp_rowparallel_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, input_array, input_i, input_j, ldi, output_array, output_i, output_j, ldo, k1, k2, pivinfo_array, batchCount, queue)
end

"""
    magma_zlaswp_rowserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)


### Prototype
```c
void magma_zlaswp_rowserial_batched( magma_int_t n, magmaDoubleComplex** dA_array, magma_int_t lda, magma_int_t k1, magma_int_t k2, magma_int_t **ipiv_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zlaswp_rowserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
    ccall((:magma_zlaswp_rowserial_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
end

"""
    magma_zlaswp_columnserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)


### Prototype
```c
void magma_zlaswp_columnserial_batched( magma_int_t n, magmaDoubleComplex** dA_array, magma_int_t lda, magma_int_t k1, magma_int_t k2, magma_int_t **ipiv_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zlaswp_columnserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
    ccall((:magma_zlaswp_columnserial_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
end

"""
    magmablas_ztranspose_batched(m, n, dA_array, ldda, dAT_array, lddat, batchCount, queue)


### Prototype
```c
void magmablas_ztranspose_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dAT_array, magma_int_t lddat, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ztranspose_batched(m, n, dA_array, ldda, dAT_array, lddat, batchCount, queue)
    ccall((:magmablas_ztranspose_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ldda, dAT_array, lddat, batchCount, queue)
end

"""
    magmablas_zlaset_internal_batched(uplo, m, n, offdiag, diag, dAarray, Ai, Aj, ldda, batchCount, queue)


### Prototype
```c
void magmablas_zlaset_internal_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex offdiag, magmaDoubleComplex diag, magmaDoubleComplex_ptr dAarray[], magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zlaset_internal_batched(uplo, m, n, offdiag, diag, dAarray, Ai, Aj, ldda, batchCount, queue)
    ccall((:magmablas_zlaset_internal_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, offdiag, diag, dAarray, Ai, Aj, ldda, batchCount, queue)
end

"""
    magmablas_zlaset_batched(uplo, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)


### Prototype
```c
void magmablas_zlaset_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex offdiag, magmaDoubleComplex diag, magmaDoubleComplex_ptr dAarray[], magma_int_t ldda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zlaset_batched(uplo, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
    ccall((:magmablas_zlaset_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
end

"""
    magma_zgesv_batched_small(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgesv_batched_small( magma_int_t n, magma_int_t nrhs, magmaDoubleComplex** dA_array, magma_int_t ldda, magma_int_t** dipiv_array, magmaDoubleComplex **dB_array, magma_int_t lddb, magma_int_t* dinfo_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zgesv_batched_small(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
    ccall((:magma_zgesv_batched_small, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
end

"""
    magma_zgetf2_batched(m, n, dA_array, ai, aj, lda, ipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetf2_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t **ipiv_array, magma_int_t **dpivinfo_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetf2_batched(m, n, dA_array, ai, aj, lda, ipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_zgetf2_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, lda, ipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_zgetrf_recpanel_batched(m, n, min_recpnb, dA_array, ai, aj, ldda, dipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetrf_recpanel_batched( magma_int_t m, magma_int_t n, magma_int_t min_recpnb, magmaDoubleComplex** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t** dipiv_array, magma_int_t** dpivinfo_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetrf_recpanel_batched(m, n, min_recpnb, dA_array, ai, aj, ldda, dipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_zgetrf_recpanel_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, min_recpnb, dA_array, ai, aj, ldda, dipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_zgetrf_batched(m, n, dA_array, lda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetrf_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t lda, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetrf_batched(m, n, dA_array, lda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_zgetrf_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, lda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_zgetf2_fused_batched(m, n, dA_array, ai, aj, ldda, dipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetf2_fused_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t **dipiv_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetf2_fused_batched(m, n, dA_array, ai, aj, ldda, dipiv_array, info_array, batchCount, queue)
    ccall((:magma_zgetf2_fused_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, ldda, dipiv_array, info_array, batchCount, queue)
end

"""
    magma_zgetrf_batched_smallsq_noshfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetrf_batched_smallsq_noshfl( magma_int_t n, magmaDoubleComplex** dA_array, magma_int_t ldda, magma_int_t** ipiv_array, magma_int_t* info_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zgetrf_batched_smallsq_noshfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_zgetrf_batched_smallsq_noshfl, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_zgetrf_batched_smallsq_shfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetrf_batched_smallsq_shfl( magma_int_t n, magmaDoubleComplex** dA_array, magma_int_t ldda, magma_int_t** ipiv_array, magma_int_t* info_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zgetrf_batched_smallsq_shfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_zgetrf_batched_smallsq_shfl, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_zgetri_outofplace_batched(n, dA_array, ldda, dipiv_array, dinvA_array, lddia, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetri_outofplace_batched( magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t ldda, magma_int_t **dipiv_array, magmaDoubleComplex **dinvA_array, magma_int_t lddia, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetri_outofplace_batched(n, dA_array, ldda, dipiv_array, dinvA_array, lddia, info_array, batchCount, queue)
    ccall((:magma_zgetri_outofplace_batched, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, ldda, dipiv_array, dinvA_array, lddia, info_array, batchCount, queue)
end

"""
    magma_zdisplace_intpointers(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_zdisplace_intpointers( magma_int_t **output_array, magma_int_t **input_array, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zdisplace_intpointers(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_zdisplace_intpointers, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magmablas_izamax_atomic_batched(n, x_array, incx, max_id_array, batchCount)


### Prototype
```c
void magmablas_izamax_atomic_batched( magma_int_t n, magmaDoubleComplex** x_array, magma_int_t incx, magma_int_t **max_id_array, magma_int_t batchCount);
```
"""
function magmablas_izamax_atomic_batched(n, x_array, incx, max_id_array, batchCount)
    ccall((:magmablas_izamax_atomic_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t), n, x_array, incx, max_id_array, batchCount)
end

"""
    magmablas_izamax_tree_batched(n, x_array, incx, max_id_array, batchCount)


### Prototype
```c
void magmablas_izamax_tree_batched( magma_int_t n, magmaDoubleComplex** x_array, magma_int_t incx, magma_int_t **max_id_array, magma_int_t batchCount);
```
"""
function magmablas_izamax_tree_batched(n, x_array, incx, max_id_array, batchCount)
    ccall((:magmablas_izamax_tree_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t), n, x_array, incx, max_id_array, batchCount)
end

"""
    magmablas_izamax_batched(n, x_array, incx, max_id_array, batchCount)


### Prototype
```c
void magmablas_izamax_batched( magma_int_t n, magmaDoubleComplex** x_array, magma_int_t incx, magma_int_t **max_id_array, magma_int_t batchCount);
```
"""
function magmablas_izamax_batched(n, x_array, incx, max_id_array, batchCount)
    ccall((:magmablas_izamax_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t), n, x_array, incx, max_id_array, batchCount)
end

"""
    magmablas_izamax(n, x, incx, max_id)


### Prototype
```c
void magmablas_izamax( magma_int_t n, magmaDoubleComplex* x, magma_int_t incx, magma_int_t *max_id);
```
"""
function magmablas_izamax(n, x, incx, max_id)
    ccall((:magmablas_izamax, libmagma), Cvoid, (magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), n, x, incx, max_id)
end

"""
    magma_izamax_batched(length, x_array, xi, xj, lda, incx, ipiv_array, ipiv_i, step, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_izamax_batched( magma_int_t length, magmaDoubleComplex **x_array, magma_int_t xi, magma_int_t xj, magma_int_t lda, magma_int_t incx, magma_int_t** ipiv_array, magma_int_t ipiv_i, magma_int_t step, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_izamax_batched(length, x_array, xi, xj, lda, incx, ipiv_array, ipiv_i, step, gbstep, info_array, batchCount, queue)
    ccall((:magma_izamax_batched, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), length, x_array, xi, xj, lda, incx, ipiv_array, ipiv_i, step, gbstep, info_array, batchCount, queue)
end

"""
    magma_zswap_batched(n, x_array, xi, xj, incx, step, ipiv_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zswap_batched( magma_int_t n, magmaDoubleComplex **x_array, magma_int_t xi, magma_int_t xj, magma_int_t incx, magma_int_t step, magma_int_t** ipiv_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zswap_batched(n, x_array, xi, xj, incx, step, ipiv_array, batchCount, queue)
    ccall((:magma_zswap_batched, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, x_array, xi, xj, incx, step, ipiv_array, batchCount, queue)
end

"""
    magma_zscal_zgeru_batched(m, n, dA_array, ai, aj, lda, info_array, step, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zscal_zgeru_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t *info_array, magma_int_t step, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zscal_zgeru_batched(m, n, dA_array, ai, aj, lda, info_array, step, gbstep, batchCount, queue)
    ccall((:magma_zscal_zgeru_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, lda, info_array, step, gbstep, batchCount, queue)
end

"""
    magma_zcomputecolumn_batched(m, paneloffset, step, dA_array, lda, ai, aj, ipiv_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zcomputecolumn_batched( magma_int_t m, magma_int_t paneloffset, magma_int_t step, magmaDoubleComplex **dA_array, magma_int_t lda, magma_int_t ai, magma_int_t aj, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zcomputecolumn_batched(m, paneloffset, step, dA_array, lda, ai, aj, ipiv_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_zcomputecolumn_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, paneloffset, step, dA_array, lda, ai, aj, ipiv_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_zgetf2trsm_batched(ib, n, dA_array, j, lda, batchCount, queue)


### Prototype
```c
void magma_zgetf2trsm_batched( magma_int_t ib, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t j, magma_int_t lda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetf2trsm_batched(ib, n, dA_array, j, lda, batchCount, queue)
    ccall((:magma_zgetf2trsm_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), ib, n, dA_array, j, lda, batchCount, queue)
end

"""
    magma_zgetf2_nopiv_internal_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetf2_nopiv_internal_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t* info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zgetf2_nopiv_internal_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_zgetf2_nopiv_internal_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_zgetf2_nopiv_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetf2_nopiv_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetf2_nopiv_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_zgetf2_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_zgetrf_recpanel_nopiv_batched(m, n, min_recpnb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW1_displ, dW2_displ, dW3_displ, dW4_displ, dW5_displ, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetrf_recpanel_nopiv_batched( magma_int_t m, magma_int_t n, magma_int_t min_recpnb, magmaDoubleComplex** dA_array, magma_int_t ldda, magmaDoubleComplex** dX_array, magma_int_t dX_length, magmaDoubleComplex** dinvA_array, magma_int_t dinvA_length, magmaDoubleComplex** dW1_displ, magmaDoubleComplex** dW2_displ, magmaDoubleComplex** dW3_displ, magmaDoubleComplex** dW4_displ, magmaDoubleComplex** dW5_displ, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetrf_recpanel_nopiv_batched(m, n, min_recpnb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW1_displ, dW2_displ, dW3_displ, dW4_displ, dW5_displ, info_array, gbstep, batchCount, queue)
    ccall((:magma_zgetrf_recpanel_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, min_recpnb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW1_displ, dW2_displ, dW3_displ, dW4_displ, dW5_displ, info_array, gbstep, batchCount, queue)
end

"""
    magma_zgetrf_nopiv_batched(m, n, dA_array, lda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetrf_nopiv_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t lda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetrf_nopiv_batched(m, n, dA_array, lda, info_array, batchCount, queue)
    ccall((:magma_zgetrf_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, lda, info_array, batchCount, queue)
end

"""
    magma_zgetrs_nopiv_batched(trans, n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetrs_nopiv_batched( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t lddb, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetrs_nopiv_batched(trans, n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
    ccall((:magma_zgetrs_nopiv_batched, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
end

"""
    magma_zgesv_nopiv_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgesv_nopiv_batched( magma_int_t n, magma_int_t nrhs, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t lddb, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgesv_nopiv_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
    ccall((:magma_zgesv_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
end

"""
    magma_zgesv_rbt_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgesv_rbt_batched( magma_int_t n, magma_int_t nrhs, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t lddb, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgesv_rbt_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
    ccall((:magma_zgesv_rbt_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
end

"""
    magma_zgesv_batched(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgesv_batched( magma_int_t n, magma_int_t nrhs, magmaDoubleComplex **dA_array, magma_int_t ldda, magma_int_t **dipiv_array, magmaDoubleComplex **dB_array, magma_int_t lddb, magma_int_t *dinfo_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgesv_batched(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
    ccall((:magma_zgesv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, PtrOrCuPtr{PtrOrCuPtr{magmaDoubleComplex}}, magma_int_t, PtrOrCuPtr{PtrOrCuPtr{magma_int_t}}, PtrOrCuPtr{PtrOrCuPtr{magmaDoubleComplex}}, magma_int_t, PtrOrCuPtr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
end

"""
    magma_zgerbt_batched(gen, n, nrhs, dA_array, ldda, dB_array, lddb, U, V, info, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgerbt_batched( magma_bool_t gen, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t lddb, magmaDoubleComplex *U, magmaDoubleComplex *V, magma_int_t *info, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgerbt_batched(gen, n, nrhs, dA_array, ldda, dB_array, lddb, U, V, info, batchCount, queue)
    ccall((:magma_zgerbt_batched, libmagma), magma_int_t, (magma_bool_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), gen, n, nrhs, dA_array, ldda, dB_array, lddb, U, V, info, batchCount, queue)
end

"""
    magmablas_zprbt_batched(n, dA_array, ldda, du, dv, batchCount, queue)


### Prototype
```c
void magmablas_zprbt_batched( magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex *du, magmaDoubleComplex *dv, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zprbt_batched(n, dA_array, ldda, du, dv, batchCount, queue)
    ccall((:magmablas_zprbt_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, magma_queue_t), n, dA_array, ldda, du, dv, batchCount, queue)
end

"""
    magmablas_zprbt_mv_batched(n, dv, db_array, batchCount, queue)


### Prototype
```c
void magmablas_zprbt_mv_batched( magma_int_t n, magmaDoubleComplex *dv, magmaDoubleComplex **db_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zprbt_mv_batched(n, dv, db_array, batchCount, queue)
    ccall((:magmablas_zprbt_mv_batched, libmagma), Cvoid, (magma_int_t, Ptr{magmaDoubleComplex}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_queue_t), n, dv, db_array, batchCount, queue)
end

"""
    magmablas_zprbt_mtv_batched(n, du, db_array, batchCount, queue)


### Prototype
```c
void magmablas_zprbt_mtv_batched( magma_int_t n, magmaDoubleComplex *du, magmaDoubleComplex **db_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zprbt_mtv_batched(n, du, db_array, batchCount, queue)
    ccall((:magmablas_zprbt_mtv_batched, libmagma), Cvoid, (magma_int_t, Ptr{magmaDoubleComplex}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_queue_t), n, du, db_array, batchCount, queue)
end

"""
    setup_pivinfo(pivinfo, ipiv, m, nb, queue)


### Prototype
```c
void setup_pivinfo( magma_int_t *pivinfo, magma_int_t *ipiv, magma_int_t m, magma_int_t nb, magma_queue_t queue);
```
"""
function setup_pivinfo(pivinfo, ipiv, m, nb, queue)
    ccall((:setup_pivinfo, libmagma), Cvoid, (Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), pivinfo, ipiv, m, nb, queue)
end

"""
    magmablas_zgeadd_batched(m, n, alpha, dAarray, ldda, dBarray, lddb, batchCount, queue)


### Prototype
```c
void magmablas_zgeadd_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_const_ptr const dAarray[], magma_int_t ldda, magmaDoubleComplex_ptr dBarray[], magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zgeadd_batched(m, n, alpha, dAarray, ldda, dBarray, lddb, batchCount, queue)
    ccall((:magmablas_zgeadd_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex_const_ptr}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), m, n, alpha, dAarray, ldda, dBarray, lddb, batchCount, queue)
end

"""
    magmablas_zlacpy_internal_batched(uplo, m, n, dAarray, Ai, Aj, ldda, dBarray, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_zlacpy_internal_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr const dAarray[], magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex_ptr dBarray[], magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zlacpy_internal_batched(uplo, m, n, dAarray, Ai, Aj, ldda, dBarray, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_zlacpy_internal_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_const_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, dAarray, Ai, Aj, ldda, dBarray, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_zlacpy_batched(uplo, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)


### Prototype
```c
void magmablas_zlacpy_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr const dAarray[], magma_int_t ldda, magmaDoubleComplex_ptr dBarray[], magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zlacpy_batched(uplo, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
    ccall((:magmablas_zlacpy_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_const_ptr}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
end

"""
    magmablas_zgemv_batched_template(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_zgemv_batched_template( magma_trans_t trans, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dA_array[], magma_int_t ldda, magmaDoubleComplex_ptr dx_array[], magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy_array[], magma_int_t incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zgemv_batched_template(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_zgemv_batched_template, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_zgemv_batched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_zgemv_batched( magma_trans_t trans, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dA_array[], magma_int_t ldda, magmaDoubleComplex_ptr dx_array[], magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy_array[], magma_int_t incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zgemv_batched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_zgemv_batched, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magma_zgeqrf_batched_smallsq(n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgeqrf_batched_smallsq( magma_int_t n, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zgeqrf_batched_smallsq(n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
    ccall((:magma_zgeqrf_batched_smallsq, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
end

"""
    magma_zgeqrf_batched(m, n, dA_array, lda, dtau_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgeqrf_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t lda, magmaDoubleComplex **dtau_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgeqrf_batched(m, n, dA_array, lda, dtau_array, info_array, batchCount, queue)
    ccall((:magma_zgeqrf_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, lda, dtau_array, info_array, batchCount, queue)
end

"""
    magma_zgeqrf_expert_batched(m, n, nb, dA_array, ldda, dR_array, lddr, dT_array, lddt, dtau_array, provide_RT, dW_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgeqrf_expert_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dR_array, magma_int_t lddr, magmaDoubleComplex **dT_array, magma_int_t lddt, magmaDoubleComplex **dtau_array, magma_int_t provide_RT, magmaDoubleComplex **dW_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgeqrf_expert_batched(m, n, nb, dA_array, ldda, dR_array, lddr, dT_array, lddt, dtau_array, provide_RT, dW_array, info_array, batchCount, queue)
    ccall((:magma_zgeqrf_expert_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, nb, dA_array, ldda, dR_array, lddr, dT_array, lddt, dtau_array, provide_RT, dW_array, info_array, batchCount, queue)
end

"""
    magma_zgeqrf_batched_v4(m, n, dA_array, lda, tau_array, info_array, batchCount)


### Prototype
```c
magma_int_t magma_zgeqrf_batched_v4( magma_int_t m, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t lda, magmaDoubleComplex **tau_array, magma_int_t *info_array, magma_int_t batchCount);
```
"""
function magma_zgeqrf_batched_v4(m, n, dA_array, lda, tau_array, info_array, batchCount)
    ccall((:magma_zgeqrf_batched_v4, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t), m, n, dA_array, lda, tau_array, info_array, batchCount)
end

"""
    magma_zgeqrf_panel_fused_update_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dR_array, Ri, Rj, lddr, info_array, separate_R_V, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgeqrf_panel_fused_update_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex** tau_array, magma_int_t taui, magmaDoubleComplex** dR_array, magma_int_t Ri, magma_int_t Rj, magma_int_t lddr, magma_int_t *info_array, magma_int_t separate_R_V, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgeqrf_panel_fused_update_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dR_array, Ri, Rj, lddr, info_array, separate_R_V, batchCount, queue)
    ccall((:magma_zgeqrf_panel_fused_update_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dR_array, Ri, Rj, lddr, info_array, separate_R_V, batchCount, queue)
end

"""
    magma_zgeqrf_panel_internal_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dT_array, Ti, Tj, lddt, dR_array, Ri, Rj, lddr, dwork_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgeqrf_panel_internal_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex** tau_array, magma_int_t taui, magmaDoubleComplex** dT_array, magma_int_t Ti, magma_int_t Tj, magma_int_t lddt, magmaDoubleComplex** dR_array, magma_int_t Ri, magma_int_t Rj, magma_int_t lddr, magmaDoubleComplex** dwork_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgeqrf_panel_internal_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dT_array, Ti, Tj, lddt, dR_array, Ri, Rj, lddr, dwork_array, info_array, batchCount, queue)
    ccall((:magma_zgeqrf_panel_internal_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dT_array, Ti, Tj, lddt, dR_array, Ri, Rj, lddr, dwork_array, info_array, batchCount, queue)
end

"""
    magma_zgeqrf_panel_batched(m, n, nb, dA_array, ldda, tau_array, dT_array, ldt, dR_array, ldr, dwork_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgeqrf_panel_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magmaDoubleComplex** dA_array, magma_int_t ldda, magmaDoubleComplex** tau_array, magmaDoubleComplex** dT_array, magma_int_t ldt, magmaDoubleComplex** dR_array, magma_int_t ldr, magmaDoubleComplex** dwork_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgeqrf_panel_batched(m, n, nb, dA_array, ldda, tau_array, dT_array, ldt, dR_array, ldr, dwork_array, info_array, batchCount, queue)
    ccall((:magma_zgeqrf_panel_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, nb, dA_array, ldda, tau_array, dT_array, ldt, dR_array, ldr, dwork_array, info_array, batchCount, queue)
end

"""
    magma_zgels_batched(trans, m, n, nrhs, dA_array, ldda, dB_array, lddb, hwork, lwork, info, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgels_batched( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex **dA_array, magma_int_t ldda, magmaDoubleComplex **dB_array, magma_int_t lddb, magmaDoubleComplex *hwork, magma_int_t lwork, magma_int_t *info, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgels_batched(trans, m, n, nrhs, dA_array, ldda, dB_array, lddb, hwork, lwork, info, batchCount, queue)
    ccall((:magma_zgels_batched, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, nrhs, dA_array, ldda, dB_array, lddb, hwork, lwork, info, batchCount, queue)
end

"""
    magma_zgeqr2_fused_reg_tall_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgeqr2_fused_reg_tall_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zgeqr2_fused_reg_tall_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
    ccall((:magma_zgeqr2_fused_reg_tall_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
end

"""
    magma_zgeqr2_fused_reg_medium_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgeqr2_fused_reg_medium_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zgeqr2_fused_reg_medium_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
    ccall((:magma_zgeqr2_fused_reg_medium_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
end

"""
    magma_zgeqr2_fused_reg_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgeqr2_fused_reg_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zgeqr2_fused_reg_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
    ccall((:magma_zgeqr2_fused_reg_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
end

"""
    magma_zgeqr2_fused_sm_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, nthreads, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgeqr2_fused_sm_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t nthreads, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zgeqr2_fused_sm_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, nthreads, check_launch_only, batchCount, queue)
    ccall((:magma_zgeqr2_fused_sm_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, nthreads, check_launch_only, batchCount, queue)
end

"""
    magma_zgeqr2_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgeqr2_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex **dtau_array, magma_int_t taui, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgeqr2_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
    ccall((:magma_zgeqr2_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
end

"""
    magma_zlarf_fused_reg_tall_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_zlarf_fused_reg_tall_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, magmaDoubleComplex **dtau_array, magma_int_t taui, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zlarf_fused_reg_tall_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
    ccall((:magma_zlarf_fused_reg_tall_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
end

"""
    magma_zlarf_fused_reg_medium_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_zlarf_fused_reg_medium_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, magmaDoubleComplex **dtau_array, magma_int_t taui, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zlarf_fused_reg_medium_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
    ccall((:magma_zlarf_fused_reg_medium_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
end

"""
    magma_zlarf_fused_reg_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_zlarf_fused_reg_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, magmaDoubleComplex **dtau_array, magma_int_t taui, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zlarf_fused_reg_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
    ccall((:magma_zlarf_fused_reg_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
end

"""
    magma_zlarf_fused_sm_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, nthreads, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_zlarf_fused_sm_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDoubleComplex** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, magmaDoubleComplex **dtau_array, magma_int_t taui, magma_int_t nthreads, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zlarf_fused_sm_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, nthreads, check_launch_only, batchCount, queue)
    ccall((:magma_zlarf_fused_sm_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, nthreads, check_launch_only, batchCount, queue)
end

"""
    magma_zlarfb_gemm_internal_batched(side, trans, direct, storev, m, n, k, dV_array, vi, vj, lddv, dT_array, Ti, Tj, lddt, dC_array, Ci, Cj, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)


### Prototype
```c
magma_int_t magma_zlarfb_gemm_internal_batched( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex_const_ptr dV_array[], magma_int_t vi, magma_int_t vj, magma_int_t lddv, magmaDoubleComplex_const_ptr dT_array[], magma_int_t Ti, magma_int_t Tj, magma_int_t lddt, magmaDoubleComplex_ptr dC_array[], magma_int_t Ci, magma_int_t Cj, magma_int_t lddc, magmaDoubleComplex_ptr dwork_array[], magma_int_t ldwork, magmaDoubleComplex_ptr dworkvt_array[], magma_int_t ldworkvt, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zlarfb_gemm_internal_batched(side, trans, direct, storev, m, n, k, dV_array, vi, vj, lddv, dT_array, Ti, Tj, lddt, dC_array, Ci, Cj, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
    ccall((:magma_zlarfb_gemm_internal_batched, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_const_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_const_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), side, trans, direct, storev, m, n, k, dV_array, vi, vj, lddv, dT_array, Ti, Tj, lddt, dC_array, Ci, Cj, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
end

"""
    magma_zlarfb_gemm_batched(side, trans, direct, storev, m, n, k, dV_array, lddv, dT_array, lddt, dC_array, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)


### Prototype
```c
magma_int_t magma_zlarfb_gemm_batched( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex_const_ptr dV_array[], magma_int_t lddv, magmaDoubleComplex_const_ptr dT_array[], magma_int_t lddt, magmaDoubleComplex_ptr dC_array[], magma_int_t lddc, magmaDoubleComplex_ptr dwork_array[], magma_int_t ldwork, magmaDoubleComplex_ptr dworkvt_array[], magma_int_t ldworkvt, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zlarfb_gemm_batched(side, trans, direct, storev, m, n, k, dV_array, lddv, dT_array, lddt, dC_array, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
    ccall((:magma_zlarfb_gemm_batched, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_const_ptr}, magma_int_t, Ptr{magmaDoubleComplex_const_ptr}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), side, trans, direct, storev, m, n, k, dV_array, lddv, dT_array, lddt, dC_array, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
end

"""
    magma_zlarft_internal_batched(n, k, stair_T, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, work_array, lwork, batchCount, queue)


### Prototype
```c
magma_int_t magma_zlarft_internal_batched( magma_int_t n, magma_int_t k, magma_int_t stair_T, magmaDoubleComplex **v_array, magma_int_t vi, magma_int_t vj, magma_int_t ldv, magmaDoubleComplex **tau_array, magma_int_t taui, magmaDoubleComplex **T_array, magma_int_t Ti, magma_int_t Tj, magma_int_t ldt, magmaDoubleComplex **work_array, magma_int_t lwork, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zlarft_internal_batched(n, k, stair_T, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, work_array, lwork, batchCount, queue)
    ccall((:magma_zlarft_internal_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), n, k, stair_T, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, work_array, lwork, batchCount, queue)
end

"""
    magma_zlarft_batched(n, k, stair_T, v_array, ldv, tau_array, T_array, ldt, work_array, lwork, batchCount, queue)


### Prototype
```c
magma_int_t magma_zlarft_batched( magma_int_t n, magma_int_t k, magma_int_t stair_T, magmaDoubleComplex **v_array, magma_int_t ldv, magmaDoubleComplex **tau_array, magmaDoubleComplex **T_array, magma_int_t ldt, magmaDoubleComplex **work_array, magma_int_t lwork, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zlarft_batched(n, k, stair_T, v_array, ldv, tau_array, T_array, ldt, work_array, lwork, batchCount, queue)
    ccall((:magma_zlarft_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), n, k, stair_T, v_array, ldv, tau_array, T_array, ldt, work_array, lwork, batchCount, queue)
end

"""
    magma_zlarft_sm32x32_batched(n, k, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, batchCount, queue)


### Prototype
```c
void magma_zlarft_sm32x32_batched( magma_int_t n, magma_int_t k, magmaDoubleComplex **v_array, magma_int_t vi, magma_int_t vj, magma_int_t ldv, magmaDoubleComplex **tau_array, magma_int_t taui, magmaDoubleComplex **T_array, magma_int_t Ti, magma_int_t Tj, magma_int_t ldt, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zlarft_sm32x32_batched(n, k, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, batchCount, queue)
    ccall((:magma_zlarft_sm32x32_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, k, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, batchCount, queue)
end

"""
    magmablas_zlarft_recztrmv_sm32x32(m, n, tau, Trec, ldtrec, Ttri, ldttri, queue)


### Prototype
```c
void magmablas_zlarft_recztrmv_sm32x32( magma_int_t m, magma_int_t n, magmaDoubleComplex *tau, magmaDoubleComplex *Trec, magma_int_t ldtrec, magmaDoubleComplex *Ttri, magma_int_t ldttri, magma_queue_t queue);
```
"""
function magmablas_zlarft_recztrmv_sm32x32(m, n, tau, Trec, ldtrec, Ttri, ldttri, queue)
    ccall((:magmablas_zlarft_recztrmv_sm32x32, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_queue_t), m, n, tau, Trec, ldtrec, Ttri, ldttri, queue)
end

"""
    magmablas_zlarft_recztrmv_sm32x32_batched(m, n, tau_array, taui, Trec_array, Treci, Trecj, ldtrec, Ttri_array, Ttrii, Ttrij, ldttri, batchCount, queue)


### Prototype
```c
void magmablas_zlarft_recztrmv_sm32x32_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex **tau_array, magma_int_t taui, magmaDoubleComplex **Trec_array, magma_int_t Treci, magma_int_t Trecj, magma_int_t ldtrec, magmaDoubleComplex **Ttri_array, magma_int_t Ttrii, magma_int_t Ttrij, magma_int_t ldttri, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zlarft_recztrmv_sm32x32_batched(m, n, tau_array, taui, Trec_array, Treci, Trecj, ldtrec, Ttri_array, Ttrii, Ttrij, ldttri, batchCount, queue)
    ccall((:magmablas_zlarft_recztrmv_sm32x32_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, tau_array, taui, Trec_array, Treci, Trecj, ldtrec, Ttri_array, Ttrii, Ttrij, ldttri, batchCount, queue)
end

"""
    magmablas_zlarft_ztrmv_sm32x32(m, n, tau, Tin, ldtin, Tout, ldtout, queue)


### Prototype
```c
void magmablas_zlarft_ztrmv_sm32x32( magma_int_t m, magma_int_t n, magmaDoubleComplex *tau, magmaDoubleComplex *Tin, magma_int_t ldtin, magmaDoubleComplex *Tout, magma_int_t ldtout, magma_queue_t queue);
```
"""
function magmablas_zlarft_ztrmv_sm32x32(m, n, tau, Tin, ldtin, Tout, ldtout, queue)
    ccall((:magmablas_zlarft_ztrmv_sm32x32, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_queue_t), m, n, tau, Tin, ldtin, Tout, ldtout, queue)
end

"""
    magmablas_zlarft_ztrmv_sm32x32_batched(m, n, tau_array, taui, Tin_array, Tini, Tinj, ldtin, Tout_array, Touti, Toutj, ldtout, batchCount, queue)


### Prototype
```c
void magmablas_zlarft_ztrmv_sm32x32_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex **tau_array, magma_int_t taui, magmaDoubleComplex **Tin_array, magma_int_t Tini, magma_int_t Tinj, magma_int_t ldtin, magmaDoubleComplex **Tout_array, magma_int_t Touti, magma_int_t Toutj, magma_int_t ldtout, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zlarft_ztrmv_sm32x32_batched(m, n, tau_array, taui, Tin_array, Tini, Tinj, ldtin, Tout_array, Touti, Toutj, ldtout, batchCount, queue)
    ccall((:magmablas_zlarft_ztrmv_sm32x32_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, tau_array, taui, Tin_array, Tini, Tinj, ldtin, Tout_array, Touti, Toutj, ldtout, batchCount, queue)
end

"""
    magmablas_dznrm2_cols_batched(m, n, dA_array, lda, dxnorm_array, batchCount)


### Prototype
```c
void magmablas_dznrm2_cols_batched( magma_int_t m, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t lda, double **dxnorm_array, magma_int_t batchCount);
```
"""
function magmablas_dznrm2_cols_batched(m, n, dA_array, lda, dxnorm_array, batchCount)
    ccall((:magmablas_dznrm2_cols_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t), m, n, dA_array, lda, dxnorm_array, batchCount)
end

"""
    magma_zlarfgx_batched(n, dx0_array, dx_array, dtau_array, dxnorm_array, dR_array, it, batchCount)


### Prototype
```c
void magma_zlarfgx_batched( magma_int_t n, magmaDoubleComplex **dx0_array, magmaDoubleComplex **dx_array, magmaDoubleComplex **dtau_array, double **dxnorm_array, magmaDoubleComplex **dR_array, magma_int_t it, magma_int_t batchCount);
```
"""
function magma_zlarfgx_batched(n, dx0_array, dx_array, dtau_array, dxnorm_array, dR_array, it, batchCount)
    ccall((:magma_zlarfgx_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t), n, dx0_array, dx_array, dtau_array, dxnorm_array, dR_array, it, batchCount)
end

"""
    magma_zlarfx_batched_v4(m, n, v_array, tau_array, C_array, ldc, xnorm_array, step, batchCount)


### Prototype
```c
void magma_zlarfx_batched_v4( magma_int_t m, magma_int_t n, magmaDoubleComplex **v_array, magmaDoubleComplex **tau_array, magmaDoubleComplex **C_array, magma_int_t ldc, double **xnorm_array, magma_int_t step, magma_int_t batchCount);
```
"""
function magma_zlarfx_batched_v4(m, n, v_array, tau_array, C_array, ldc, xnorm_array, step, batchCount)
    ccall((:magma_zlarfx_batched_v4, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t), m, n, v_array, tau_array, C_array, ldc, xnorm_array, step, batchCount)
end

"""
    magmablas_zlarfg_batched(n, dalpha_array, dx_array, incx, dtau_array, batchCount)


### Prototype
```c
void magmablas_zlarfg_batched( magma_int_t n, magmaDoubleComplex** dalpha_array, magmaDoubleComplex** dx_array, magma_int_t incx, magmaDoubleComplex** dtau_array, magma_int_t batchCount );
```
"""
function magmablas_zlarfg_batched(n, dalpha_array, dx_array, incx, dtau_array, batchCount)
    ccall((:magmablas_zlarfg_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t), n, dalpha_array, dx_array, incx, dtau_array, batchCount)
end

"""
    magma_zpotrf_lpout_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotrf_lpout_batched( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotrf_lpout_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
    ccall((:magma_zpotrf_lpout_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
end

"""
    magma_zpotrf_lpin_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotrf_lpin_batched( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotrf_lpin_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
    ccall((:magma_zpotrf_lpin_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
end

"""
    magma_zpotrf_v33_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotrf_v33_batched( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex **dA_array, magma_int_t lda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotrf_v33_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)
    ccall((:magma_zpotrf_v33_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, lda, info_array, batchCount, queue)
end

"""
    blas_zlacpy_batched(uplo, m, n, hA_array, lda, hB_array, ldb, batchCount)

host interface
### Prototype
```c
void blas_zlacpy_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex const * const * hA_array, magma_int_t lda, magmaDoubleComplex **hB_array, magma_int_t ldb, magma_int_t batchCount );
```
"""
function blas_zlacpy_batched(uplo, m, n, hA_array, lda, hB_array, ldb, batchCount)
    ccall((:blas_zlacpy_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t), uplo, m, n, hA_array, lda, hB_array, ldb, batchCount)
end

"""
    blas_zgemm_batched(transA, transB, m, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_zgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * hA_array, magma_int_t lda, magmaDoubleComplex const * const * hB_array, magma_int_t ldb, magmaDoubleComplex beta, magmaDoubleComplex **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_zgemm_batched(transA, transB, m, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
    ccall((:blas_zgemm_batched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t), transA, transB, m, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
end

"""
    blas_ztrsm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)


### Prototype
```c
void blas_ztrsm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex **hA_array, magma_int_t lda, magmaDoubleComplex **hB_array, magma_int_t ldb, magma_int_t batchCount );
```
"""
function blas_ztrsm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
    ccall((:blas_ztrsm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t), side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
end

"""
    blas_ztrmm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)


### Prototype
```c
void blas_ztrmm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex **hA_array, magma_int_t lda, magmaDoubleComplex **hB_array, magma_int_t ldb, magma_int_t batchCount );
```
"""
function blas_ztrmm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
    ccall((:blas_ztrmm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t), side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
end

"""
    blas_zhemm_batched(side, uplo, m, n, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_zhemm_batched( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex **hA_array, magma_int_t lda, magmaDoubleComplex **hB_array, magma_int_t ldb, magmaDoubleComplex beta, magmaDoubleComplex **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_zhemm_batched(side, uplo, m, n, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
    ccall((:blas_zhemm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t), side, uplo, m, n, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
end

"""
    blas_zherk_batched(uplo, trans, n, k, alpha, hA_array, lda, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_zherk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, magmaDoubleComplex const * const * hA_array, magma_int_t lda, double beta, magmaDoubleComplex **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_zherk_batched(uplo, trans, n, k, alpha, hA_array, lda, beta, hC_array, ldc, batchCount)
    ccall((:blas_zherk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t), uplo, trans, n, k, alpha, hA_array, lda, beta, hC_array, ldc, batchCount)
end

"""
    blas_zher2k_batched(uplo, trans, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_zher2k_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * hA_array, magma_int_t lda, magmaDoubleComplex const * const * hB_array, magma_int_t ldb, double beta, magmaDoubleComplex **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_zher2k_batched(uplo, trans, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
    ccall((:blas_zher2k_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t), uplo, trans, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
end

"""
    zset_stepinit_ipiv(ipiv_array, pm, batchCount)

for debugging purpose
### Prototype
```c
void zset_stepinit_ipiv( magma_int_t **ipiv_array, magma_int_t pm, magma_int_t batchCount);
```
"""
function zset_stepinit_ipiv(ipiv_array, pm, batchCount)
    ccall((:zset_stepinit_ipiv, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t), ipiv_array, pm, batchCount)
end

"""
    magma_cset_pointer(output_array, input, lda, row, column, batch_offset, batchCount, queue)

 local auxiliary routines
### Prototype
```c
void magma_cset_pointer( magmaFloatComplex **output_array, magmaFloatComplex *input, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batch_offset, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cset_pointer(output_array, input, lda, row, column, batch_offset, batchCount, queue)
    ccall((:magma_cset_pointer, libmagma), Cvoid, (Ptr{Ptr{magmaFloatComplex}}, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input, lda, row, column, batch_offset, batchCount, queue)
end

"""
    magma_cdisplace_pointers(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_cdisplace_pointers( magmaFloatComplex **output_array, magmaFloatComplex **input_array, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cdisplace_pointers(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_cdisplace_pointers, libmagma), Cvoid, (Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_crecommend_cublas_gemm_batched(transa, transb, m, n, k)


### Prototype
```c
magma_int_t magma_crecommend_cublas_gemm_batched( magma_trans_t transa, magma_trans_t transb, magma_int_t m, magma_int_t n, magma_int_t k);
```
"""
function magma_crecommend_cublas_gemm_batched(transa, transb, m, n, k)
    ccall((:magma_crecommend_cublas_gemm_batched, libmagma), magma_int_t, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t), transa, transb, m, n, k)
end

"""
    magma_crecommend_cublas_gemm_stream(transa, transb, m, n, k)


### Prototype
```c
magma_int_t magma_crecommend_cublas_gemm_stream( magma_trans_t transa, magma_trans_t transb, magma_int_t m, magma_int_t n, magma_int_t k);
```
"""
function magma_crecommend_cublas_gemm_stream(transa, transb, m, n, k)
    ccall((:magma_crecommend_cublas_gemm_stream, libmagma), magma_int_t, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t), transa, transb, m, n, k)
end

"""
    magma_get_cpotrf_batched_nbparam(n, nb, recnb)


### Prototype
```c
void magma_get_cpotrf_batched_nbparam(magma_int_t n, magma_int_t *nb, magma_int_t *recnb);
```
"""
function magma_get_cpotrf_batched_nbparam(n, nb, recnb)
    ccall((:magma_get_cpotrf_batched_nbparam, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, recnb)
end

# no prototype is found for this function at magma_cbatched.h:55:13, please use with caution
"""
    magma_get_cpotrf_batched_crossover()


### Prototype
```c
magma_int_t magma_get_cpotrf_batched_crossover();
```
"""
function magma_get_cpotrf_batched_crossover()
    ccall((:magma_get_cpotrf_batched_crossover, libmagma), magma_int_t, ())
end

"""
    magma_get_cgetrf_batched_nbparam(n, nb, recnb)


### Prototype
```c
void magma_get_cgetrf_batched_nbparam(magma_int_t n, magma_int_t *nb, magma_int_t *recnb);
```
"""
function magma_get_cgetrf_batched_nbparam(n, nb, recnb)
    ccall((:magma_get_cgetrf_batched_nbparam, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, recnb)
end

"""
    magma_get_cgetrf_batched_ntcol(m, n)


### Prototype
```c
magma_int_t magma_get_cgetrf_batched_ntcol(magma_int_t m, magma_int_t n);
```
"""
function magma_get_cgetrf_batched_ntcol(m, n)
    ccall((:magma_get_cgetrf_batched_ntcol, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_cgemm_batched_ntcol(n)


### Prototype
```c
magma_int_t magma_get_cgemm_batched_ntcol(magma_int_t n);
```
"""
function magma_get_cgemm_batched_ntcol(n)
    ccall((:magma_get_cgemm_batched_ntcol, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_cgemm_batched_smallsq_limit(n)


### Prototype
```c
magma_int_t magma_get_cgemm_batched_smallsq_limit(magma_int_t n);
```
"""
function magma_get_cgemm_batched_smallsq_limit(n)
    ccall((:magma_get_cgemm_batched_smallsq_limit, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_cgeqrf_batched_nb(m)


### Prototype
```c
magma_int_t magma_get_cgeqrf_batched_nb(magma_int_t m);
```
"""
function magma_get_cgeqrf_batched_nb(m)
    ccall((:magma_get_cgeqrf_batched_nb, libmagma), magma_int_t, (magma_int_t,), m)
end

"""
    magma_use_cgeqrf_batched_fused_update(m, n, batchCount)


### Prototype
```c
magma_int_t magma_use_cgeqrf_batched_fused_update(magma_int_t m, magma_int_t n, magma_int_t batchCount);
```
"""
function magma_use_cgeqrf_batched_fused_update(m, n, batchCount)
    ccall((:magma_use_cgeqrf_batched_fused_update, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), m, n, batchCount)
end

"""
    magma_get_cgeqr2_fused_sm_batched_nthreads(m, n)


### Prototype
```c
magma_int_t magma_get_cgeqr2_fused_sm_batched_nthreads(magma_int_t m, magma_int_t n);
```
"""
function magma_get_cgeqr2_fused_sm_batched_nthreads(m, n)
    ccall((:magma_get_cgeqr2_fused_sm_batched_nthreads, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_cgeqrf_batched_ntcol(m, n)


### Prototype
```c
magma_int_t magma_get_cgeqrf_batched_ntcol(magma_int_t m, magma_int_t n);
```
"""
function magma_get_cgeqrf_batched_ntcol(m, n)
    ccall((:magma_get_cgeqrf_batched_ntcol, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_cgetri_batched_ntcol(m, n)


### Prototype
```c
magma_int_t magma_get_cgetri_batched_ntcol(magma_int_t m, magma_int_t n);
```
"""
function magma_get_cgetri_batched_ntcol(m, n)
    ccall((:magma_get_cgetri_batched_ntcol, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_ctrsm_batched_stop_nb(side, m, n)


### Prototype
```c
magma_int_t magma_get_ctrsm_batched_stop_nb(magma_side_t side, magma_int_t m, magma_int_t n);
```
"""
function magma_get_ctrsm_batched_stop_nb(side, m, n)
    ccall((:magma_get_ctrsm_batched_stop_nb, libmagma), magma_int_t, (magma_side_t, magma_int_t, magma_int_t), side, m, n)
end

"""
    magmablas_cswapdblk_batched(n, nb, dA, ldda, inca, dB, lddb, incb, batchCount, queue)


### Prototype
```c
void magmablas_cswapdblk_batched( magma_int_t n, magma_int_t nb, magmaFloatComplex **dA, magma_int_t ldda, magma_int_t inca, magmaFloatComplex **dB, magma_int_t lddb, magma_int_t incb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cswapdblk_batched(n, nb, dA, ldda, inca, dB, lddb, incb, batchCount, queue)
    ccall((:magmablas_cswapdblk_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, nb, dA, ldda, inca, dB, lddb, incb, batchCount, queue)
end

"""
    magmablas_cgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)

 BLAS batched routines
### Prototype
```c
void magmablas_cgemm_batched_core( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex const * const * dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t Ci, magma_int_t Cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
    ccall((:magmablas_cgemm_batched_core, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
end

"""
    magma_cgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)


### Prototype
```c
void magma_cgemm_batched_core( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex const * const * dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t Ci, magma_int_t Cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
    ccall((:magma_cgemm_batched_core, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
end

"""
    magma_cgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magma_cgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t ldda, magmaFloatComplex const * const * dB_array, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magma_cgemm_batched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_cgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_cgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t ldda, magmaFloatComplex const * const * dB_array, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_cgemm_batched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_cgemm_batched_strided(transA, transB, m, n, k, alpha, dA, ldda, strideA, dB, lddb, strideB, beta, dC, lddc, strideC, batchCount, queue)


### Prototype
```c
void magmablas_cgemm_batched_strided( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * dA, magma_int_t ldda, magma_int_t strideA, magmaFloatComplex const * dB, magma_int_t lddb, magma_int_t strideB, magmaFloatComplex beta, magmaFloatComplex * dC, magma_int_t lddc, magma_int_t strideC, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cgemm_batched_strided(transA, transB, m, n, k, alpha, dA, ldda, strideA, dB, lddb, strideB, beta, dC, lddc, strideC, batchCount, queue)
    ccall((:magmablas_cgemm_batched_strided, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA, ldda, strideA, dB, lddb, strideB, beta, dC, lddc, strideC, batchCount, queue)
end

"""
    magmablas_cgemm_batched_smallsq(transA, transB, m, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)


### Prototype
```c
void magmablas_cgemm_batched_smallsq( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magmaFloatComplex const * const * dB_array, magma_int_t bi, magma_int_t bj, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t ci, magma_int_t cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cgemm_batched_smallsq(transA, transB, m, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
    ccall((:magmablas_cgemm_batched_smallsq, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
end

"""
    magmablas_csyrk_batched_core(uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)


### Prototype
```c
void magmablas_csyrk_batched_core( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magmaFloatComplex const * const * dB_array, magma_int_t bi, magma_int_t bj, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t ci, magma_int_t cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_csyrk_batched_core(uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
    ccall((:magmablas_csyrk_batched_core, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
end

"""
    magmablas_cherk_batched_core(uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)


### Prototype
```c
void magmablas_cherk_batched_core( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magmaFloatComplex const * const * dB_array, magma_int_t bi, magma_int_t bj, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t ci, magma_int_t cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cherk_batched_core(uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
    ccall((:magmablas_cherk_batched_core, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
end

"""
    magmablas_csyrk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_csyrk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t ldda, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_csyrk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_csyrk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magma_cherk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magma_cherk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, magmaFloatComplex const * const * dA_array, magma_int_t ldda, float beta, magmaFloatComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cherk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magma_cherk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Cfloat, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_cherk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_cherk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, magmaFloatComplex const * const * dA_array, magma_int_t ldda, float beta, magmaFloatComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cherk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_cherk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Cfloat, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_cher2k_batched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_cher2k_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t ldda, magmaFloatComplex const * const * dB_array, magma_int_t lddb, float beta, magmaFloatComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cher2k_batched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_cher2k_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Cfloat, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_csyr2k_batched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_csyr2k_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t ldda, magmaFloatComplex const * const * dB_array, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_csyr2k_batched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_csyr2k_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_ctrtri_diag_batched(uplo, diag, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_ctrtri_diag_batched( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, magmaFloatComplex const * const *dA_array, magma_int_t ldda, magmaFloatComplex **dinvA_array, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ctrtri_diag_batched(uplo, diag, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
    ccall((:magmablas_ctrtri_diag_batched, libmagma), Cvoid, (magma_uplo_t, magma_diag_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, diag, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
end

"""
    magmablas_ctrsm_small_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_small_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrsm_small_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_ctrsm_small_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_ctrsm_recursive_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_recursive_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrsm_recursive_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_ctrsm_recursive_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_ctrsm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrsm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ctrsm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ctrsm_inv_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_inv_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex** dA_array, magma_int_t ldda, magmaFloatComplex** dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ctrsm_inv_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ctrsm_inv_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ctrsm_inv_work_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_inv_work_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex** dA_array, magma_int_t ldda, magmaFloatComplex** dB_array, magma_int_t lddb, magmaFloatComplex** dX_array, magma_int_t lddx, magmaFloatComplex** dinvA_array, magma_int_t dinvA_length, magmaFloatComplex** dA_displ, magmaFloatComplex** dB_displ, magmaFloatComplex** dX_displ, magmaFloatComplex** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ctrsm_inv_work_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
    ccall((:magmablas_ctrsm_inv_work_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
end

"""
    magmablas_ctrsm_inv_outofplace_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_inv_outofplace_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex** dA_array, magma_int_t ldda, magmaFloatComplex** dB_array, magma_int_t lddb, magmaFloatComplex** dX_array, magma_int_t lddx, magmaFloatComplex** dinvA_array, magma_int_t dinvA_length, magmaFloatComplex** dA_displ, magmaFloatComplex** dB_displ, magmaFloatComplex** dX_displ, magmaFloatComplex** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ctrsm_inv_outofplace_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
    ccall((:magmablas_ctrsm_inv_outofplace_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
end

"""
    magmablas_ctrsv_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, batchCount, queue)


### Prototype
```c
void magmablas_ctrsv_batched( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaFloatComplex** dA_array, magma_int_t ldda, magmaFloatComplex** dB_array, magma_int_t incb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ctrsv_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, batchCount, queue)
    ccall((:magmablas_ctrsv_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, transA, diag, n, dA_array, ldda, dB_array, incb, batchCount, queue)
end

"""
    magmablas_ctrsv_work_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, dX_array, batchCount, queue)


### Prototype
```c
void magmablas_ctrsv_work_batched( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaFloatComplex** dA_array, magma_int_t ldda, magmaFloatComplex** dB_array, magma_int_t incb, magmaFloatComplex** dX_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ctrsv_work_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, dX_array, batchCount, queue)
    ccall((:magmablas_ctrsv_work_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_queue_t), uplo, transA, diag, n, dA_array, ldda, dB_array, incb, dX_array, batchCount, queue)
end

"""
    magmablas_ctrsv_outofplace_batched(uplo, transA, diag, n, A_array, lda, b_array, incb, x_array, batchCount, queue, flag)


### Prototype
```c
void magmablas_ctrsv_outofplace_batched( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, magmaFloatComplex ** A_array, magma_int_t lda, magmaFloatComplex **b_array, magma_int_t incb, magmaFloatComplex **x_array, magma_int_t batchCount, magma_queue_t queue, magma_int_t flag);
```
"""
function magmablas_ctrsv_outofplace_batched(uplo, transA, diag, n, A_array, lda, b_array, incb, x_array, batchCount, queue, flag)
    ccall((:magmablas_ctrsv_outofplace_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_queue_t, magma_int_t), uplo, transA, diag, n, A_array, lda, b_array, incb, x_array, batchCount, queue, flag)
end

"""
    magmablas_ctrmm_batched_core(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrmm_batched_core( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrmm_batched_core(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_ctrmm_batched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_ctrmm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrmm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrmm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ctrmm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_chemm_batched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, roffA, coffA, roffB, coffB, roffC, coffC, batchCount, queue)


### Prototype
```c
void magmablas_chemm_batched_core( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t lddc, magma_int_t roffA, magma_int_t coffA, magma_int_t roffB, magma_int_t coffB, magma_int_t roffC, magma_int_t coffC, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_chemm_batched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, roffA, coffA, roffB, coffB, roffC, coffC, batchCount, queue)
    ccall((:magmablas_chemm_batched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, roffA, coffA, roffB, coffB, roffC, coffC, batchCount, queue)
end

"""
    magmablas_chemm_batched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_chemm_batched( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_chemm_batched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_chemm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_chemv_batched_core(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, offA, offX, offY, batchCount, queue)


### Prototype
```c
void magmablas_chemv_batched_core( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dX_array, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex **dY_array, magma_int_t incy, magma_int_t offA, magma_int_t offX, magma_int_t offY, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_chemv_batched_core(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, offA, offX, offY, batchCount, queue)
    ccall((:magmablas_chemv_batched_core, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, offA, offX, offY, batchCount, queue)
end

"""
    magmablas_chemv_batched(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_chemv_batched( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dX_array, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex **dY_array, magma_int_t incy, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_chemv_batched(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, batchCount, queue)
    ccall((:magmablas_chemv_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, batchCount, queue)
end

"""
    magma_cpotrf_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotrf_batched( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t lda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotrf_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)
    ccall((:magma_cpotrf_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, lda, info_array, batchCount, queue)
end

"""
    magma_cpotf2_batched(uplo, n, dA_array, ai, aj, lda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotf2_batched( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotf2_batched(uplo, n, dA_array, ai, aj, lda, info_array, gbstep, batchCount, queue)
    ccall((:magma_cpotf2_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, dA_array, ai, aj, lda, info_array, gbstep, batchCount, queue)
end

"""
    magma_cpotrf_panel_batched(uplo, n, nb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotrf_panel_batched( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magmaFloatComplex** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotrf_panel_batched(uplo, n, nb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_cpotrf_panel_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, nb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_cpotrf_recpanel_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotrf_recpanel_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t min_recpnb, magmaFloatComplex** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotrf_recpanel_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_cpotrf_recpanel_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_cpotrf_rectile_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotrf_rectile_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t min_recpnb, magmaFloatComplex** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotrf_rectile_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_cpotrf_rectile_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_cpotrs_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotrs_batched( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotrs_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magma_cpotrs_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, nrhs, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magma_cposv_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, dinfo_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cposv_batched( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t lddb, magma_int_t *dinfo_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cposv_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, dinfo_array, batchCount, queue)
    ccall((:magma_cposv_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, nrhs, dA_array, ldda, dB_array, lddb, dinfo_array, batchCount, queue)
end

"""
    magma_cgetrs_batched(trans, n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetrs_batched( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaFloatComplex **dA_array, magma_int_t ldda, magma_int_t **dipiv_array, magmaFloatComplex **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetrs_batched(trans, n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, batchCount, queue)
    ccall((:magma_cgetrs_batched, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), trans, n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, batchCount, queue)
end

"""
    magma_claswp_rowparallel_batched(n, input_array, input_i, input_j, ldi, output_array, output_i, output_j, ldo, k1, k2, pivinfo_array, batchCount, queue)


### Prototype
```c
void magma_claswp_rowparallel_batched( magma_int_t n, magmaFloatComplex** input_array, magma_int_t input_i, magma_int_t input_j, magma_int_t ldi, magmaFloatComplex** output_array, magma_int_t output_i, magma_int_t output_j, magma_int_t ldo, magma_int_t k1, magma_int_t k2, magma_int_t **pivinfo_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_claswp_rowparallel_batched(n, input_array, input_i, input_j, ldi, output_array, output_i, output_j, ldo, k1, k2, pivinfo_array, batchCount, queue)
    ccall((:magma_claswp_rowparallel_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, input_array, input_i, input_j, ldi, output_array, output_i, output_j, ldo, k1, k2, pivinfo_array, batchCount, queue)
end

"""
    magma_claswp_rowserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)


### Prototype
```c
void magma_claswp_rowserial_batched( magma_int_t n, magmaFloatComplex** dA_array, magma_int_t lda, magma_int_t k1, magma_int_t k2, magma_int_t **ipiv_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_claswp_rowserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
    ccall((:magma_claswp_rowserial_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
end

"""
    magma_claswp_columnserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)


### Prototype
```c
void magma_claswp_columnserial_batched( magma_int_t n, magmaFloatComplex** dA_array, magma_int_t lda, magma_int_t k1, magma_int_t k2, magma_int_t **ipiv_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_claswp_columnserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
    ccall((:magma_claswp_columnserial_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
end

"""
    magmablas_ctranspose_batched(m, n, dA_array, ldda, dAT_array, lddat, batchCount, queue)


### Prototype
```c
void magmablas_ctranspose_batched( magma_int_t m, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dAT_array, magma_int_t lddat, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ctranspose_batched(m, n, dA_array, ldda, dAT_array, lddat, batchCount, queue)
    ccall((:magmablas_ctranspose_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ldda, dAT_array, lddat, batchCount, queue)
end

"""
    magmablas_claset_internal_batched(uplo, m, n, offdiag, diag, dAarray, Ai, Aj, ldda, batchCount, queue)


### Prototype
```c
void magmablas_claset_internal_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex offdiag, magmaFloatComplex diag, magmaFloatComplex_ptr dAarray[], magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_claset_internal_batched(uplo, m, n, offdiag, diag, dAarray, Ai, Aj, ldda, batchCount, queue)
    ccall((:magmablas_claset_internal_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, offdiag, diag, dAarray, Ai, Aj, ldda, batchCount, queue)
end

"""
    magmablas_claset_batched(uplo, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)


### Prototype
```c
void magmablas_claset_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex offdiag, magmaFloatComplex diag, magmaFloatComplex_ptr dAarray[], magma_int_t ldda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_claset_batched(uplo, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
    ccall((:magmablas_claset_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
end

"""
    magma_cgesv_batched_small(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgesv_batched_small( magma_int_t n, magma_int_t nrhs, magmaFloatComplex** dA_array, magma_int_t ldda, magma_int_t** dipiv_array, magmaFloatComplex **dB_array, magma_int_t lddb, magma_int_t* dinfo_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cgesv_batched_small(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
    ccall((:magma_cgesv_batched_small, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
end

"""
    magma_cgetf2_batched(m, n, dA_array, ai, aj, lda, ipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetf2_batched( magma_int_t m, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t **ipiv_array, magma_int_t **dpivinfo_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetf2_batched(m, n, dA_array, ai, aj, lda, ipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_cgetf2_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, lda, ipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_cgetrf_recpanel_batched(m, n, min_recpnb, dA_array, ai, aj, ldda, dipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetrf_recpanel_batched( magma_int_t m, magma_int_t n, magma_int_t min_recpnb, magmaFloatComplex** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t** dipiv_array, magma_int_t** dpivinfo_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetrf_recpanel_batched(m, n, min_recpnb, dA_array, ai, aj, ldda, dipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_cgetrf_recpanel_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, min_recpnb, dA_array, ai, aj, ldda, dipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_cgetrf_batched(m, n, dA_array, lda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetrf_batched( magma_int_t m, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t lda, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetrf_batched(m, n, dA_array, lda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_cgetrf_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, lda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_cgetf2_fused_batched(m, n, dA_array, ai, aj, ldda, dipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetf2_fused_batched( magma_int_t m, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t **dipiv_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetf2_fused_batched(m, n, dA_array, ai, aj, ldda, dipiv_array, info_array, batchCount, queue)
    ccall((:magma_cgetf2_fused_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, ldda, dipiv_array, info_array, batchCount, queue)
end

"""
    magma_cgetrf_batched_smallsq_noshfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetrf_batched_smallsq_noshfl( magma_int_t n, magmaFloatComplex** dA_array, magma_int_t ldda, magma_int_t** ipiv_array, magma_int_t* info_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cgetrf_batched_smallsq_noshfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_cgetrf_batched_smallsq_noshfl, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_cgetrf_batched_smallsq_shfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetrf_batched_smallsq_shfl( magma_int_t n, magmaFloatComplex** dA_array, magma_int_t ldda, magma_int_t** ipiv_array, magma_int_t* info_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cgetrf_batched_smallsq_shfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_cgetrf_batched_smallsq_shfl, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_cgetri_outofplace_batched(n, dA_array, ldda, dipiv_array, dinvA_array, lddia, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetri_outofplace_batched( magma_int_t n, magmaFloatComplex **dA_array, magma_int_t ldda, magma_int_t **dipiv_array, magmaFloatComplex **dinvA_array, magma_int_t lddia, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetri_outofplace_batched(n, dA_array, ldda, dipiv_array, dinvA_array, lddia, info_array, batchCount, queue)
    ccall((:magma_cgetri_outofplace_batched, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, ldda, dipiv_array, dinvA_array, lddia, info_array, batchCount, queue)
end

"""
    magma_cdisplace_intpointers(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_cdisplace_intpointers( magma_int_t **output_array, magma_int_t **input_array, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cdisplace_intpointers(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_cdisplace_intpointers, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magmablas_icamax_atomic_batched(n, x_array, incx, max_id_array, batchCount)


### Prototype
```c
void magmablas_icamax_atomic_batched( magma_int_t n, magmaFloatComplex** x_array, magma_int_t incx, magma_int_t **max_id_array, magma_int_t batchCount);
```
"""
function magmablas_icamax_atomic_batched(n, x_array, incx, max_id_array, batchCount)
    ccall((:magmablas_icamax_atomic_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t), n, x_array, incx, max_id_array, batchCount)
end

"""
    magmablas_icamax_tree_batched(n, x_array, incx, max_id_array, batchCount)


### Prototype
```c
void magmablas_icamax_tree_batched( magma_int_t n, magmaFloatComplex** x_array, magma_int_t incx, magma_int_t **max_id_array, magma_int_t batchCount);
```
"""
function magmablas_icamax_tree_batched(n, x_array, incx, max_id_array, batchCount)
    ccall((:magmablas_icamax_tree_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t), n, x_array, incx, max_id_array, batchCount)
end

"""
    magmablas_icamax_batched(n, x_array, incx, max_id_array, batchCount)


### Prototype
```c
void magmablas_icamax_batched( magma_int_t n, magmaFloatComplex** x_array, magma_int_t incx, magma_int_t **max_id_array, magma_int_t batchCount);
```
"""
function magmablas_icamax_batched(n, x_array, incx, max_id_array, batchCount)
    ccall((:magmablas_icamax_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t), n, x_array, incx, max_id_array, batchCount)
end

"""
    magmablas_icamax(n, x, incx, max_id)


### Prototype
```c
void magmablas_icamax( magma_int_t n, magmaFloatComplex* x, magma_int_t incx, magma_int_t *max_id);
```
"""
function magmablas_icamax(n, x, incx, max_id)
    ccall((:magmablas_icamax, libmagma), Cvoid, (magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), n, x, incx, max_id)
end

"""
    magma_icamax_batched(length, x_array, xi, xj, lda, incx, ipiv_array, ipiv_i, step, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_icamax_batched( magma_int_t length, magmaFloatComplex **x_array, magma_int_t xi, magma_int_t xj, magma_int_t lda, magma_int_t incx, magma_int_t** ipiv_array, magma_int_t ipiv_i, magma_int_t step, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_icamax_batched(length, x_array, xi, xj, lda, incx, ipiv_array, ipiv_i, step, gbstep, info_array, batchCount, queue)
    ccall((:magma_icamax_batched, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), length, x_array, xi, xj, lda, incx, ipiv_array, ipiv_i, step, gbstep, info_array, batchCount, queue)
end

"""
    magma_cswap_batched(n, x_array, xi, xj, incx, step, ipiv_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cswap_batched( magma_int_t n, magmaFloatComplex **x_array, magma_int_t xi, magma_int_t xj, magma_int_t incx, magma_int_t step, magma_int_t** ipiv_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cswap_batched(n, x_array, xi, xj, incx, step, ipiv_array, batchCount, queue)
    ccall((:magma_cswap_batched, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, x_array, xi, xj, incx, step, ipiv_array, batchCount, queue)
end

"""
    magma_cscal_cgeru_batched(m, n, dA_array, ai, aj, lda, info_array, step, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cscal_cgeru_batched( magma_int_t m, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t *info_array, magma_int_t step, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cscal_cgeru_batched(m, n, dA_array, ai, aj, lda, info_array, step, gbstep, batchCount, queue)
    ccall((:magma_cscal_cgeru_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, lda, info_array, step, gbstep, batchCount, queue)
end

"""
    magma_ccomputecolumn_batched(m, paneloffset, step, dA_array, lda, ai, aj, ipiv_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_ccomputecolumn_batched( magma_int_t m, magma_int_t paneloffset, magma_int_t step, magmaFloatComplex **dA_array, magma_int_t lda, magma_int_t ai, magma_int_t aj, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_ccomputecolumn_batched(m, paneloffset, step, dA_array, lda, ai, aj, ipiv_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_ccomputecolumn_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, paneloffset, step, dA_array, lda, ai, aj, ipiv_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_cgetf2trsm_batched(ib, n, dA_array, j, lda, batchCount, queue)


### Prototype
```c
void magma_cgetf2trsm_batched( magma_int_t ib, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t j, magma_int_t lda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetf2trsm_batched(ib, n, dA_array, j, lda, batchCount, queue)
    ccall((:magma_cgetf2trsm_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), ib, n, dA_array, j, lda, batchCount, queue)
end

"""
    magma_cgetf2_nopiv_internal_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetf2_nopiv_internal_batched( magma_int_t m, magma_int_t n, magmaFloatComplex** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t* info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cgetf2_nopiv_internal_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_cgetf2_nopiv_internal_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_cgetf2_nopiv_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetf2_nopiv_batched( magma_int_t m, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetf2_nopiv_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_cgetf2_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_cgetrf_recpanel_nopiv_batched(m, n, min_recpnb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW1_displ, dW2_displ, dW3_displ, dW4_displ, dW5_displ, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetrf_recpanel_nopiv_batched( magma_int_t m, magma_int_t n, magma_int_t min_recpnb, magmaFloatComplex** dA_array, magma_int_t ldda, magmaFloatComplex** dX_array, magma_int_t dX_length, magmaFloatComplex** dinvA_array, magma_int_t dinvA_length, magmaFloatComplex** dW1_displ, magmaFloatComplex** dW2_displ, magmaFloatComplex** dW3_displ, magmaFloatComplex** dW4_displ, magmaFloatComplex** dW5_displ, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetrf_recpanel_nopiv_batched(m, n, min_recpnb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW1_displ, dW2_displ, dW3_displ, dW4_displ, dW5_displ, info_array, gbstep, batchCount, queue)
    ccall((:magma_cgetrf_recpanel_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, min_recpnb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW1_displ, dW2_displ, dW3_displ, dW4_displ, dW5_displ, info_array, gbstep, batchCount, queue)
end

"""
    magma_cgetrf_nopiv_batched(m, n, dA_array, lda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetrf_nopiv_batched( magma_int_t m, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t lda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetrf_nopiv_batched(m, n, dA_array, lda, info_array, batchCount, queue)
    ccall((:magma_cgetrf_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, lda, info_array, batchCount, queue)
end

"""
    magma_cgetrs_nopiv_batched(trans, n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetrs_nopiv_batched( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t lddb, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetrs_nopiv_batched(trans, n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
    ccall((:magma_cgetrs_nopiv_batched, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
end

"""
    magma_cgesv_nopiv_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgesv_nopiv_batched( magma_int_t n, magma_int_t nrhs, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t lddb, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgesv_nopiv_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
    ccall((:magma_cgesv_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
end

"""
    magma_cgesv_rbt_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgesv_rbt_batched( magma_int_t n, magma_int_t nrhs, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t lddb, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgesv_rbt_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
    ccall((:magma_cgesv_rbt_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
end

"""
    magma_cgesv_batched(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgesv_batched( magma_int_t n, magma_int_t nrhs, magmaFloatComplex **dA_array, magma_int_t ldda, magma_int_t **dipiv_array, magmaFloatComplex **dB_array, magma_int_t lddb, magma_int_t *dinfo_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgesv_batched(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
    ccall((:magma_cgesv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, PtrOrCuPtr{PtrOrCuPtr{magmaFloatComplex}}, magma_int_t, PtrOrCuPtr{PtrOrCuPtr{magma_int_t}}, PtrOrCuPtr{PtrOrCuPtr{magmaFloatComplex}}, magma_int_t, PtrOrCuPtr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
end

"""
    magma_cgerbt_batched(gen, n, nrhs, dA_array, ldda, dB_array, lddb, U, V, info, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgerbt_batched( magma_bool_t gen, magma_int_t n, magma_int_t nrhs, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t lddb, magmaFloatComplex *U, magmaFloatComplex *V, magma_int_t *info, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgerbt_batched(gen, n, nrhs, dA_array, ldda, dB_array, lddb, U, V, info, batchCount, queue)
    ccall((:magma_cgerbt_batched, libmagma), magma_int_t, (magma_bool_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), gen, n, nrhs, dA_array, ldda, dB_array, lddb, U, V, info, batchCount, queue)
end

"""
    magmablas_cprbt_batched(n, dA_array, ldda, du, dv, batchCount, queue)


### Prototype
```c
void magmablas_cprbt_batched( magma_int_t n, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex *du, magmaFloatComplex *dv, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_cprbt_batched(n, dA_array, ldda, du, dv, batchCount, queue)
    ccall((:magmablas_cprbt_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, magma_queue_t), n, dA_array, ldda, du, dv, batchCount, queue)
end

"""
    magmablas_cprbt_mv_batched(n, dv, db_array, batchCount, queue)


### Prototype
```c
void magmablas_cprbt_mv_batched( magma_int_t n, magmaFloatComplex *dv, magmaFloatComplex **db_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_cprbt_mv_batched(n, dv, db_array, batchCount, queue)
    ccall((:magmablas_cprbt_mv_batched, libmagma), Cvoid, (magma_int_t, Ptr{magmaFloatComplex}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_queue_t), n, dv, db_array, batchCount, queue)
end

"""
    magmablas_cprbt_mtv_batched(n, du, db_array, batchCount, queue)


### Prototype
```c
void magmablas_cprbt_mtv_batched( magma_int_t n, magmaFloatComplex *du, magmaFloatComplex **db_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_cprbt_mtv_batched(n, du, db_array, batchCount, queue)
    ccall((:magmablas_cprbt_mtv_batched, libmagma), Cvoid, (magma_int_t, Ptr{magmaFloatComplex}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_queue_t), n, du, db_array, batchCount, queue)
end

"""
    magmablas_cgeadd_batched(m, n, alpha, dAarray, ldda, dBarray, lddb, batchCount, queue)


### Prototype
```c
void magmablas_cgeadd_batched( magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_const_ptr const dAarray[], magma_int_t ldda, magmaFloatComplex_ptr dBarray[], magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cgeadd_batched(m, n, alpha, dAarray, ldda, dBarray, lddb, batchCount, queue)
    ccall((:magmablas_cgeadd_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex_const_ptr}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), m, n, alpha, dAarray, ldda, dBarray, lddb, batchCount, queue)
end

"""
    magmablas_clacpy_internal_batched(uplo, m, n, dAarray, Ai, Aj, ldda, dBarray, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_clacpy_internal_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr const dAarray[], magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex_ptr dBarray[], magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_clacpy_internal_batched(uplo, m, n, dAarray, Ai, Aj, ldda, dBarray, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_clacpy_internal_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_const_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, dAarray, Ai, Aj, ldda, dBarray, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_clacpy_batched(uplo, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)


### Prototype
```c
void magmablas_clacpy_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr const dAarray[], magma_int_t ldda, magmaFloatComplex_ptr dBarray[], magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_clacpy_batched(uplo, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
    ccall((:magmablas_clacpy_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_const_ptr}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
end

"""
    magmablas_cgemv_batched_template(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_cgemv_batched_template( magma_trans_t trans, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_ptr dA_array[], magma_int_t ldda, magmaFloatComplex_ptr dx_array[], magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy_array[], magma_int_t incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_cgemv_batched_template(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_cgemv_batched_template, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_cgemv_batched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_cgemv_batched( magma_trans_t trans, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex_ptr dA_array[], magma_int_t ldda, magmaFloatComplex_ptr dx_array[], magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy_array[], magma_int_t incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_cgemv_batched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_cgemv_batched, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magma_cgeqrf_batched_smallsq(n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgeqrf_batched_smallsq( magma_int_t n, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cgeqrf_batched_smallsq(n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
    ccall((:magma_cgeqrf_batched_smallsq, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
end

"""
    magma_cgeqrf_batched(m, n, dA_array, lda, dtau_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgeqrf_batched( magma_int_t m, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t lda, magmaFloatComplex **dtau_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgeqrf_batched(m, n, dA_array, lda, dtau_array, info_array, batchCount, queue)
    ccall((:magma_cgeqrf_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, lda, dtau_array, info_array, batchCount, queue)
end

"""
    magma_cgeqrf_expert_batched(m, n, nb, dA_array, ldda, dR_array, lddr, dT_array, lddt, dtau_array, provide_RT, dW_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgeqrf_expert_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dR_array, magma_int_t lddr, magmaFloatComplex **dT_array, magma_int_t lddt, magmaFloatComplex **dtau_array, magma_int_t provide_RT, magmaFloatComplex **dW_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgeqrf_expert_batched(m, n, nb, dA_array, ldda, dR_array, lddr, dT_array, lddt, dtau_array, provide_RT, dW_array, info_array, batchCount, queue)
    ccall((:magma_cgeqrf_expert_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, nb, dA_array, ldda, dR_array, lddr, dT_array, lddt, dtau_array, provide_RT, dW_array, info_array, batchCount, queue)
end

"""
    magma_cgeqrf_batched_v4(m, n, dA_array, lda, tau_array, info_array, batchCount)


### Prototype
```c
magma_int_t magma_cgeqrf_batched_v4( magma_int_t m, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t lda, magmaFloatComplex **tau_array, magma_int_t *info_array, magma_int_t batchCount);
```
"""
function magma_cgeqrf_batched_v4(m, n, dA_array, lda, tau_array, info_array, batchCount)
    ccall((:magma_cgeqrf_batched_v4, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t), m, n, dA_array, lda, tau_array, info_array, batchCount)
end

"""
    magma_cgeqrf_panel_fused_update_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dR_array, Ri, Rj, lddr, info_array, separate_R_V, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgeqrf_panel_fused_update_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex** tau_array, magma_int_t taui, magmaFloatComplex** dR_array, magma_int_t Ri, magma_int_t Rj, magma_int_t lddr, magma_int_t *info_array, magma_int_t separate_R_V, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgeqrf_panel_fused_update_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dR_array, Ri, Rj, lddr, info_array, separate_R_V, batchCount, queue)
    ccall((:magma_cgeqrf_panel_fused_update_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dR_array, Ri, Rj, lddr, info_array, separate_R_V, batchCount, queue)
end

"""
    magma_cgeqrf_panel_internal_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dT_array, Ti, Tj, lddt, dR_array, Ri, Rj, lddr, dwork_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgeqrf_panel_internal_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex** tau_array, magma_int_t taui, magmaFloatComplex** dT_array, magma_int_t Ti, magma_int_t Tj, magma_int_t lddt, magmaFloatComplex** dR_array, magma_int_t Ri, magma_int_t Rj, magma_int_t lddr, magmaFloatComplex** dwork_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgeqrf_panel_internal_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dT_array, Ti, Tj, lddt, dR_array, Ri, Rj, lddr, dwork_array, info_array, batchCount, queue)
    ccall((:magma_cgeqrf_panel_internal_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dT_array, Ti, Tj, lddt, dR_array, Ri, Rj, lddr, dwork_array, info_array, batchCount, queue)
end

"""
    magma_cgeqrf_panel_batched(m, n, nb, dA_array, ldda, tau_array, dT_array, ldt, dR_array, ldr, dwork_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgeqrf_panel_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magmaFloatComplex** dA_array, magma_int_t ldda, magmaFloatComplex** tau_array, magmaFloatComplex** dT_array, magma_int_t ldt, magmaFloatComplex** dR_array, magma_int_t ldr, magmaFloatComplex** dwork_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgeqrf_panel_batched(m, n, nb, dA_array, ldda, tau_array, dT_array, ldt, dR_array, ldr, dwork_array, info_array, batchCount, queue)
    ccall((:magma_cgeqrf_panel_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, nb, dA_array, ldda, tau_array, dT_array, ldt, dR_array, ldr, dwork_array, info_array, batchCount, queue)
end

"""
    magma_cgels_batched(trans, m, n, nrhs, dA_array, ldda, dB_array, lddb, hwork, lwork, info, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgels_batched( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaFloatComplex **dA_array, magma_int_t ldda, magmaFloatComplex **dB_array, magma_int_t lddb, magmaFloatComplex *hwork, magma_int_t lwork, magma_int_t *info, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgels_batched(trans, m, n, nrhs, dA_array, ldda, dB_array, lddb, hwork, lwork, info, batchCount, queue)
    ccall((:magma_cgels_batched, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, nrhs, dA_array, ldda, dB_array, lddb, hwork, lwork, info, batchCount, queue)
end

"""
    magma_cgeqr2_fused_reg_tall_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgeqr2_fused_reg_tall_batched( magma_int_t m, magma_int_t n, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cgeqr2_fused_reg_tall_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
    ccall((:magma_cgeqr2_fused_reg_tall_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
end

"""
    magma_cgeqr2_fused_reg_medium_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgeqr2_fused_reg_medium_batched( magma_int_t m, magma_int_t n, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cgeqr2_fused_reg_medium_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
    ccall((:magma_cgeqr2_fused_reg_medium_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
end

"""
    magma_cgeqr2_fused_reg_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgeqr2_fused_reg_batched( magma_int_t m, magma_int_t n, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cgeqr2_fused_reg_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
    ccall((:magma_cgeqr2_fused_reg_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
end

"""
    magma_cgeqr2_fused_sm_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, nthreads, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgeqr2_fused_sm_batched( magma_int_t m, magma_int_t n, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t nthreads, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cgeqr2_fused_sm_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, nthreads, check_launch_only, batchCount, queue)
    ccall((:magma_cgeqr2_fused_sm_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, nthreads, check_launch_only, batchCount, queue)
end

"""
    magma_cgeqr2_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgeqr2_batched( magma_int_t m, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex **dtau_array, magma_int_t taui, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgeqr2_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
    ccall((:magma_cgeqr2_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
end

"""
    magma_clarf_fused_reg_tall_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_clarf_fused_reg_tall_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, magmaFloatComplex **dtau_array, magma_int_t taui, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_clarf_fused_reg_tall_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
    ccall((:magma_clarf_fused_reg_tall_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
end

"""
    magma_clarf_fused_reg_medium_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_clarf_fused_reg_medium_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, magmaFloatComplex **dtau_array, magma_int_t taui, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_clarf_fused_reg_medium_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
    ccall((:magma_clarf_fused_reg_medium_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
end

"""
    magma_clarf_fused_reg_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_clarf_fused_reg_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, magmaFloatComplex **dtau_array, magma_int_t taui, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_clarf_fused_reg_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
    ccall((:magma_clarf_fused_reg_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
end

"""
    magma_clarf_fused_sm_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, nthreads, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_clarf_fused_sm_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloatComplex** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, magmaFloatComplex **dtau_array, magma_int_t taui, magma_int_t nthreads, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_clarf_fused_sm_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, nthreads, check_launch_only, batchCount, queue)
    ccall((:magma_clarf_fused_sm_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, nthreads, check_launch_only, batchCount, queue)
end

"""
    magma_clarfb_gemm_internal_batched(side, trans, direct, storev, m, n, k, dV_array, vi, vj, lddv, dT_array, Ti, Tj, lddt, dC_array, Ci, Cj, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)


### Prototype
```c
magma_int_t magma_clarfb_gemm_internal_batched( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex_const_ptr dV_array[], magma_int_t vi, magma_int_t vj, magma_int_t lddv, magmaFloatComplex_const_ptr dT_array[], magma_int_t Ti, magma_int_t Tj, magma_int_t lddt, magmaFloatComplex_ptr dC_array[], magma_int_t Ci, magma_int_t Cj, magma_int_t lddc, magmaFloatComplex_ptr dwork_array[], magma_int_t ldwork, magmaFloatComplex_ptr dworkvt_array[], magma_int_t ldworkvt, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_clarfb_gemm_internal_batched(side, trans, direct, storev, m, n, k, dV_array, vi, vj, lddv, dT_array, Ti, Tj, lddt, dC_array, Ci, Cj, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
    ccall((:magma_clarfb_gemm_internal_batched, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_const_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_const_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), side, trans, direct, storev, m, n, k, dV_array, vi, vj, lddv, dT_array, Ti, Tj, lddt, dC_array, Ci, Cj, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
end

"""
    magma_clarfb_gemm_batched(side, trans, direct, storev, m, n, k, dV_array, lddv, dT_array, lddt, dC_array, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)


### Prototype
```c
magma_int_t magma_clarfb_gemm_batched( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex_const_ptr dV_array[], magma_int_t lddv, magmaFloatComplex_const_ptr dT_array[], magma_int_t lddt, magmaFloatComplex_ptr dC_array[], magma_int_t lddc, magmaFloatComplex_ptr dwork_array[], magma_int_t ldwork, magmaFloatComplex_ptr dworkvt_array[], magma_int_t ldworkvt, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_clarfb_gemm_batched(side, trans, direct, storev, m, n, k, dV_array, lddv, dT_array, lddt, dC_array, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
    ccall((:magma_clarfb_gemm_batched, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_const_ptr}, magma_int_t, Ptr{magmaFloatComplex_const_ptr}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_queue_t), side, trans, direct, storev, m, n, k, dV_array, lddv, dT_array, lddt, dC_array, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
end

"""
    magma_clarft_internal_batched(n, k, stair_T, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, work_array, lwork, batchCount, queue)


### Prototype
```c
magma_int_t magma_clarft_internal_batched( magma_int_t n, magma_int_t k, magma_int_t stair_T, magmaFloatComplex **v_array, magma_int_t vi, magma_int_t vj, magma_int_t ldv, magmaFloatComplex **tau_array, magma_int_t taui, magmaFloatComplex **T_array, magma_int_t Ti, magma_int_t Tj, magma_int_t ldt, magmaFloatComplex **work_array, magma_int_t lwork, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_clarft_internal_batched(n, k, stair_T, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, work_array, lwork, batchCount, queue)
    ccall((:magma_clarft_internal_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), n, k, stair_T, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, work_array, lwork, batchCount, queue)
end

"""
    magma_clarft_batched(n, k, stair_T, v_array, ldv, tau_array, T_array, ldt, work_array, lwork, batchCount, queue)


### Prototype
```c
magma_int_t magma_clarft_batched( magma_int_t n, magma_int_t k, magma_int_t stair_T, magmaFloatComplex **v_array, magma_int_t ldv, magmaFloatComplex **tau_array, magmaFloatComplex **T_array, magma_int_t ldt, magmaFloatComplex **work_array, magma_int_t lwork, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_clarft_batched(n, k, stair_T, v_array, ldv, tau_array, T_array, ldt, work_array, lwork, batchCount, queue)
    ccall((:magma_clarft_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), n, k, stair_T, v_array, ldv, tau_array, T_array, ldt, work_array, lwork, batchCount, queue)
end

"""
    magma_clarft_sm32x32_batched(n, k, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, batchCount, queue)


### Prototype
```c
void magma_clarft_sm32x32_batched( magma_int_t n, magma_int_t k, magmaFloatComplex **v_array, magma_int_t vi, magma_int_t vj, magma_int_t ldv, magmaFloatComplex **tau_array, magma_int_t taui, magmaFloatComplex **T_array, magma_int_t Ti, magma_int_t Tj, magma_int_t ldt, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_clarft_sm32x32_batched(n, k, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, batchCount, queue)
    ccall((:magma_clarft_sm32x32_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, k, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, batchCount, queue)
end

"""
    magmablas_clarft_recctrmv_sm32x32(m, n, tau, Trec, ldtrec, Ttri, ldttri, queue)


### Prototype
```c
void magmablas_clarft_recctrmv_sm32x32( magma_int_t m, magma_int_t n, magmaFloatComplex *tau, magmaFloatComplex *Trec, magma_int_t ldtrec, magmaFloatComplex *Ttri, magma_int_t ldttri, magma_queue_t queue);
```
"""
function magmablas_clarft_recctrmv_sm32x32(m, n, tau, Trec, ldtrec, Ttri, ldttri, queue)
    ccall((:magmablas_clarft_recctrmv_sm32x32, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_queue_t), m, n, tau, Trec, ldtrec, Ttri, ldttri, queue)
end

"""
    magmablas_clarft_recctrmv_sm32x32_batched(m, n, tau_array, taui, Trec_array, Treci, Trecj, ldtrec, Ttri_array, Ttrii, Ttrij, ldttri, batchCount, queue)


### Prototype
```c
void magmablas_clarft_recctrmv_sm32x32_batched( magma_int_t m, magma_int_t n, magmaFloatComplex **tau_array, magma_int_t taui, magmaFloatComplex **Trec_array, magma_int_t Treci, magma_int_t Trecj, magma_int_t ldtrec, magmaFloatComplex **Ttri_array, magma_int_t Ttrii, magma_int_t Ttrij, magma_int_t ldttri, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_clarft_recctrmv_sm32x32_batched(m, n, tau_array, taui, Trec_array, Treci, Trecj, ldtrec, Ttri_array, Ttrii, Ttrij, ldttri, batchCount, queue)
    ccall((:magmablas_clarft_recctrmv_sm32x32_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, tau_array, taui, Trec_array, Treci, Trecj, ldtrec, Ttri_array, Ttrii, Ttrij, ldttri, batchCount, queue)
end

"""
    magmablas_clarft_ctrmv_sm32x32(m, n, tau, Tin, ldtin, Tout, ldtout, queue)


### Prototype
```c
void magmablas_clarft_ctrmv_sm32x32( magma_int_t m, magma_int_t n, magmaFloatComplex *tau, magmaFloatComplex *Tin, magma_int_t ldtin, magmaFloatComplex *Tout, magma_int_t ldtout, magma_queue_t queue);
```
"""
function magmablas_clarft_ctrmv_sm32x32(m, n, tau, Tin, ldtin, Tout, ldtout, queue)
    ccall((:magmablas_clarft_ctrmv_sm32x32, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_queue_t), m, n, tau, Tin, ldtin, Tout, ldtout, queue)
end

"""
    magmablas_clarft_ctrmv_sm32x32_batched(m, n, tau_array, taui, Tin_array, Tini, Tinj, ldtin, Tout_array, Touti, Toutj, ldtout, batchCount, queue)


### Prototype
```c
void magmablas_clarft_ctrmv_sm32x32_batched( magma_int_t m, magma_int_t n, magmaFloatComplex **tau_array, magma_int_t taui, magmaFloatComplex **Tin_array, magma_int_t Tini, magma_int_t Tinj, magma_int_t ldtin, magmaFloatComplex **Tout_array, magma_int_t Touti, magma_int_t Toutj, magma_int_t ldtout, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_clarft_ctrmv_sm32x32_batched(m, n, tau_array, taui, Tin_array, Tini, Tinj, ldtin, Tout_array, Touti, Toutj, ldtout, batchCount, queue)
    ccall((:magmablas_clarft_ctrmv_sm32x32_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, tau_array, taui, Tin_array, Tini, Tinj, ldtin, Tout_array, Touti, Toutj, ldtout, batchCount, queue)
end

"""
    magmablas_scnrm2_cols_batched(m, n, dA_array, lda, dxnorm_array, batchCount)


### Prototype
```c
void magmablas_scnrm2_cols_batched( magma_int_t m, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t lda, float **dxnorm_array, magma_int_t batchCount);
```
"""
function magmablas_scnrm2_cols_batched(m, n, dA_array, lda, dxnorm_array, batchCount)
    ccall((:magmablas_scnrm2_cols_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t), m, n, dA_array, lda, dxnorm_array, batchCount)
end

"""
    magma_clarfgx_batched(n, dx0_array, dx_array, dtau_array, dxnorm_array, dR_array, it, batchCount)


### Prototype
```c
void magma_clarfgx_batched( magma_int_t n, magmaFloatComplex **dx0_array, magmaFloatComplex **dx_array, magmaFloatComplex **dtau_array, float **dxnorm_array, magmaFloatComplex **dR_array, magma_int_t it, magma_int_t batchCount);
```
"""
function magma_clarfgx_batched(n, dx0_array, dx_array, dtau_array, dxnorm_array, dR_array, it, batchCount)
    ccall((:magma_clarfgx_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t), n, dx0_array, dx_array, dtau_array, dxnorm_array, dR_array, it, batchCount)
end

"""
    magma_clarfx_batched_v4(m, n, v_array, tau_array, C_array, ldc, xnorm_array, step, batchCount)


### Prototype
```c
void magma_clarfx_batched_v4( magma_int_t m, magma_int_t n, magmaFloatComplex **v_array, magmaFloatComplex **tau_array, magmaFloatComplex **C_array, magma_int_t ldc, float **xnorm_array, magma_int_t step, magma_int_t batchCount);
```
"""
function magma_clarfx_batched_v4(m, n, v_array, tau_array, C_array, ldc, xnorm_array, step, batchCount)
    ccall((:magma_clarfx_batched_v4, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t), m, n, v_array, tau_array, C_array, ldc, xnorm_array, step, batchCount)
end

"""
    magmablas_clarfg_batched(n, dalpha_array, dx_array, incx, dtau_array, batchCount)


### Prototype
```c
void magmablas_clarfg_batched( magma_int_t n, magmaFloatComplex** dalpha_array, magmaFloatComplex** dx_array, magma_int_t incx, magmaFloatComplex** dtau_array, magma_int_t batchCount );
```
"""
function magmablas_clarfg_batched(n, dalpha_array, dx_array, incx, dtau_array, batchCount)
    ccall((:magmablas_clarfg_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t), n, dalpha_array, dx_array, incx, dtau_array, batchCount)
end

"""
    magma_cpotrf_lpout_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotrf_lpout_batched( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotrf_lpout_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
    ccall((:magma_cpotrf_lpout_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
end

"""
    magma_cpotrf_lpin_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotrf_lpin_batched( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotrf_lpin_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
    ccall((:magma_cpotrf_lpin_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
end

"""
    magma_cpotrf_v33_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotrf_v33_batched( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex **dA_array, magma_int_t lda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotrf_v33_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)
    ccall((:magma_cpotrf_v33_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, lda, info_array, batchCount, queue)
end

"""
    blas_clacpy_batched(uplo, m, n, hA_array, lda, hB_array, ldb, batchCount)

host interface
### Prototype
```c
void blas_clacpy_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex const * const * hA_array, magma_int_t lda, magmaFloatComplex **hB_array, magma_int_t ldb, magma_int_t batchCount );
```
"""
function blas_clacpy_batched(uplo, m, n, hA_array, lda, hB_array, ldb, batchCount)
    ccall((:blas_clacpy_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t), uplo, m, n, hA_array, lda, hB_array, ldb, batchCount)
end

"""
    blas_cgemm_batched(transA, transB, m, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_cgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * const * hA_array, magma_int_t lda, magmaFloatComplex const * const * hB_array, magma_int_t ldb, magmaFloatComplex beta, magmaFloatComplex **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_cgemm_batched(transA, transB, m, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
    ccall((:blas_cgemm_batched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t), transA, transB, m, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
end

"""
    blas_ctrsm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)


### Prototype
```c
void blas_ctrsm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex **hA_array, magma_int_t lda, magmaFloatComplex **hB_array, magma_int_t ldb, magma_int_t batchCount );
```
"""
function blas_ctrsm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
    ccall((:blas_ctrsm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t), side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
end

"""
    blas_ctrmm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)


### Prototype
```c
void blas_ctrmm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex **hA_array, magma_int_t lda, magmaFloatComplex **hB_array, magma_int_t ldb, magma_int_t batchCount );
```
"""
function blas_ctrmm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
    ccall((:blas_ctrmm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t), side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
end

"""
    blas_chemm_batched(side, uplo, m, n, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_chemm_batched( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex **hA_array, magma_int_t lda, magmaFloatComplex **hB_array, magma_int_t ldb, magmaFloatComplex beta, magmaFloatComplex **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_chemm_batched(side, uplo, m, n, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
    ccall((:blas_chemm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t), side, uplo, m, n, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
end

"""
    blas_cherk_batched(uplo, trans, n, k, alpha, hA_array, lda, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_cherk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, magmaFloatComplex const * const * hA_array, magma_int_t lda, float beta, magmaFloatComplex **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_cherk_batched(uplo, trans, n, k, alpha, hA_array, lda, beta, hC_array, ldc, batchCount)
    ccall((:blas_cherk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Cfloat, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t), uplo, trans, n, k, alpha, hA_array, lda, beta, hC_array, ldc, batchCount)
end

"""
    blas_cher2k_batched(uplo, trans, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_cher2k_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, magmaFloatComplex alpha, magmaFloatComplex const * const * hA_array, magma_int_t lda, magmaFloatComplex const * const * hB_array, magma_int_t ldb, float beta, magmaFloatComplex **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_cher2k_batched(uplo, trans, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
    ccall((:blas_cher2k_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, Cfloat, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t), uplo, trans, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
end

"""
    cset_stepinit_ipiv(ipiv_array, pm, batchCount)

for debugging purpose
### Prototype
```c
void cset_stepinit_ipiv( magma_int_t **ipiv_array, magma_int_t pm, magma_int_t batchCount);
```
"""
function cset_stepinit_ipiv(ipiv_array, pm, batchCount)
    ccall((:cset_stepinit_ipiv, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t), ipiv_array, pm, batchCount)
end

"""
    magma_dset_pointer(output_array, input, lda, row, column, batch_offset, batchCount, queue)

 local auxiliary routines
### Prototype
```c
void magma_dset_pointer( double **output_array, double *input, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batch_offset, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dset_pointer(output_array, input, lda, row, column, batch_offset, batchCount, queue)
    ccall((:magma_dset_pointer, libmagma), Cvoid, (Ptr{Ptr{Cdouble}}, Ptr{Cdouble}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input, lda, row, column, batch_offset, batchCount, queue)
end

"""
    magma_ddisplace_pointers(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_ddisplace_pointers( double **output_array, double **input_array, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_ddisplace_pointers(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_ddisplace_pointers, libmagma), Cvoid, (Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_drecommend_cublas_gemm_batched(transa, transb, m, n, k)


### Prototype
```c
magma_int_t magma_drecommend_cublas_gemm_batched( magma_trans_t transa, magma_trans_t transb, magma_int_t m, magma_int_t n, magma_int_t k);
```
"""
function magma_drecommend_cublas_gemm_batched(transa, transb, m, n, k)
    ccall((:magma_drecommend_cublas_gemm_batched, libmagma), magma_int_t, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t), transa, transb, m, n, k)
end

"""
    magma_drecommend_cublas_gemm_stream(transa, transb, m, n, k)


### Prototype
```c
magma_int_t magma_drecommend_cublas_gemm_stream( magma_trans_t transa, magma_trans_t transb, magma_int_t m, magma_int_t n, magma_int_t k);
```
"""
function magma_drecommend_cublas_gemm_stream(transa, transb, m, n, k)
    ccall((:magma_drecommend_cublas_gemm_stream, libmagma), magma_int_t, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t), transa, transb, m, n, k)
end

"""
    magma_get_dpotrf_batched_nbparam(n, nb, recnb)


### Prototype
```c
void magma_get_dpotrf_batched_nbparam(magma_int_t n, magma_int_t *nb, magma_int_t *recnb);
```
"""
function magma_get_dpotrf_batched_nbparam(n, nb, recnb)
    ccall((:magma_get_dpotrf_batched_nbparam, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, recnb)
end

# no prototype is found for this function at magma_dbatched.h:55:13, please use with caution
"""
    magma_get_dpotrf_batched_crossover()


### Prototype
```c
magma_int_t magma_get_dpotrf_batched_crossover();
```
"""
function magma_get_dpotrf_batched_crossover()
    ccall((:magma_get_dpotrf_batched_crossover, libmagma), magma_int_t, ())
end

"""
    magma_get_dgetrf_batched_nbparam(n, nb, recnb)


### Prototype
```c
void magma_get_dgetrf_batched_nbparam(magma_int_t n, magma_int_t *nb, magma_int_t *recnb);
```
"""
function magma_get_dgetrf_batched_nbparam(n, nb, recnb)
    ccall((:magma_get_dgetrf_batched_nbparam, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, recnb)
end

"""
    magma_get_dgetrf_batched_ntcol(m, n)


### Prototype
```c
magma_int_t magma_get_dgetrf_batched_ntcol(magma_int_t m, magma_int_t n);
```
"""
function magma_get_dgetrf_batched_ntcol(m, n)
    ccall((:magma_get_dgetrf_batched_ntcol, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_dgemm_batched_ntcol(n)


### Prototype
```c
magma_int_t magma_get_dgemm_batched_ntcol(magma_int_t n);
```
"""
function magma_get_dgemm_batched_ntcol(n)
    ccall((:magma_get_dgemm_batched_ntcol, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_dgemm_batched_smallsq_limit(n)


### Prototype
```c
magma_int_t magma_get_dgemm_batched_smallsq_limit(magma_int_t n);
```
"""
function magma_get_dgemm_batched_smallsq_limit(n)
    ccall((:magma_get_dgemm_batched_smallsq_limit, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_dgeqrf_batched_nb(m)


### Prototype
```c
magma_int_t magma_get_dgeqrf_batched_nb(magma_int_t m);
```
"""
function magma_get_dgeqrf_batched_nb(m)
    ccall((:magma_get_dgeqrf_batched_nb, libmagma), magma_int_t, (magma_int_t,), m)
end

"""
    magma_use_dgeqrf_batched_fused_update(m, n, batchCount)


### Prototype
```c
magma_int_t magma_use_dgeqrf_batched_fused_update(magma_int_t m, magma_int_t n, magma_int_t batchCount);
```
"""
function magma_use_dgeqrf_batched_fused_update(m, n, batchCount)
    ccall((:magma_use_dgeqrf_batched_fused_update, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), m, n, batchCount)
end

"""
    magma_get_dgeqr2_fused_sm_batched_nthreads(m, n)


### Prototype
```c
magma_int_t magma_get_dgeqr2_fused_sm_batched_nthreads(magma_int_t m, magma_int_t n);
```
"""
function magma_get_dgeqr2_fused_sm_batched_nthreads(m, n)
    ccall((:magma_get_dgeqr2_fused_sm_batched_nthreads, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_dgeqrf_batched_ntcol(m, n)


### Prototype
```c
magma_int_t magma_get_dgeqrf_batched_ntcol(magma_int_t m, magma_int_t n);
```
"""
function magma_get_dgeqrf_batched_ntcol(m, n)
    ccall((:magma_get_dgeqrf_batched_ntcol, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_dgetri_batched_ntcol(m, n)


### Prototype
```c
magma_int_t magma_get_dgetri_batched_ntcol(magma_int_t m, magma_int_t n);
```
"""
function magma_get_dgetri_batched_ntcol(m, n)
    ccall((:magma_get_dgetri_batched_ntcol, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_dtrsm_batched_stop_nb(side, m, n)


### Prototype
```c
magma_int_t magma_get_dtrsm_batched_stop_nb(magma_side_t side, magma_int_t m, magma_int_t n);
```
"""
function magma_get_dtrsm_batched_stop_nb(side, m, n)
    ccall((:magma_get_dtrsm_batched_stop_nb, libmagma), magma_int_t, (magma_side_t, magma_int_t, magma_int_t), side, m, n)
end

"""
    magmablas_dswapdblk_batched(n, nb, dA, ldda, inca, dB, lddb, incb, batchCount, queue)


### Prototype
```c
void magmablas_dswapdblk_batched( magma_int_t n, magma_int_t nb, double **dA, magma_int_t ldda, magma_int_t inca, double **dB, magma_int_t lddb, magma_int_t incb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dswapdblk_batched(n, nb, dA, ldda, inca, dB, lddb, incb, batchCount, queue)
    ccall((:magmablas_dswapdblk_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, nb, dA, ldda, inca, dB, lddb, incb, batchCount, queue)
end

"""
    magmablas_dgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)

 BLAS batched routines
### Prototype
```c
void magmablas_dgemm_batched_core( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, double alpha, double const * const * dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double const * const * dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, double beta, double **dC_array, magma_int_t Ci, magma_int_t Cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
    ccall((:magmablas_dgemm_batched_core, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
end

"""
    magma_dgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)


### Prototype
```c
void magma_dgemm_batched_core( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, double alpha, double const * const * dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double const * const * dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, double beta, double **dC_array, magma_int_t Ci, magma_int_t Cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
    ccall((:magma_dgemm_batched_core, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
end

"""
    magma_dgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magma_dgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, double alpha, double const * const * dA_array, magma_int_t ldda, double const * const * dB_array, magma_int_t lddb, double beta, double **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magma_dgemm_batched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, double alpha, double const * const * dA_array, magma_int_t ldda, double const * const * dB_array, magma_int_t lddb, double beta, double **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_dgemm_batched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dgemm_batched_strided(transA, transB, m, n, k, alpha, dA, ldda, strideA, dB, lddb, strideB, beta, dC, lddc, strideC, batchCount, queue)


### Prototype
```c
void magmablas_dgemm_batched_strided( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, double alpha, double const * dA, magma_int_t ldda, magma_int_t strideA, double const * dB, magma_int_t lddb, magma_int_t strideB, double beta, double * dC, magma_int_t lddc, magma_int_t strideC, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dgemm_batched_strided(transA, transB, m, n, k, alpha, dA, ldda, strideA, dB, lddb, strideB, beta, dC, lddc, strideC, batchCount, queue)
    ccall((:magmablas_dgemm_batched_strided, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Cdouble}, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, Cdouble, Ptr{Cdouble}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA, ldda, strideA, dB, lddb, strideB, beta, dC, lddc, strideC, batchCount, queue)
end

"""
    magmablas_dgemm_batched_smallsq(transA, transB, m, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dgemm_batched_smallsq( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, double alpha, double const * const * dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, double const * const * dB_array, magma_int_t bi, magma_int_t bj, magma_int_t lddb, double beta, double **dC_array, magma_int_t ci, magma_int_t cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dgemm_batched_smallsq(transA, transB, m, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
    ccall((:magmablas_dgemm_batched_smallsq, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
end

"""
    magmablas_dsyrk_batched_core(uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dsyrk_batched_core( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, double const * const * dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, double const * const * dB_array, magma_int_t bi, magma_int_t bj, magma_int_t lddb, double beta, double **dC_array, magma_int_t ci, magma_int_t cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsyrk_batched_core(uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
    ccall((:magmablas_dsyrk_batched_core, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
end

"""
    magmablas_dsyrk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dsyrk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, double const * const * dA_array, magma_int_t ldda, double beta, double **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsyrk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_dsyrk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magma_dsyrk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magma_dsyrk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, double const * const * dA_array, magma_int_t ldda, double beta, double **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dsyrk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magma_dsyrk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dsyr2k_batched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dsyr2k_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, double const * const * dA_array, magma_int_t ldda, double const * const * dB_array, magma_int_t lddb, double beta, double **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsyr2k_batched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_dsyr2k_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dtrtri_diag_batched(uplo, diag, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_dtrtri_diag_batched( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, double const * const *dA_array, magma_int_t ldda, double **dinvA_array, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dtrtri_diag_batched(uplo, diag, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
    ccall((:magmablas_dtrtri_diag_batched, libmagma), Cvoid, (magma_uplo_t, magma_diag_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), uplo, diag, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
end

"""
    magmablas_dtrsm_small_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_small_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, double **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrsm_small_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_dtrsm_small_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_dtrsm_recursive_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_recursive_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, double **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrsm_recursive_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_dtrsm_recursive_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_dtrsm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, double **dA_array, magma_int_t ldda, double **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrsm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_dtrsm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_dtrsm_inv_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_inv_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, double** dA_array, magma_int_t ldda, double** dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dtrsm_inv_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_dtrsm_inv_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_dtrsm_inv_work_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_inv_work_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t m, magma_int_t n, double alpha, double** dA_array, magma_int_t ldda, double** dB_array, magma_int_t lddb, double** dX_array, magma_int_t lddx, double** dinvA_array, magma_int_t dinvA_length, double** dA_displ, double** dB_displ, double** dX_displ, double** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dtrsm_inv_work_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
    ccall((:magmablas_dtrsm_inv_work_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
end

"""
    magmablas_dtrsm_inv_outofplace_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_inv_outofplace_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t m, magma_int_t n, double alpha, double** dA_array, magma_int_t ldda, double** dB_array, magma_int_t lddb, double** dX_array, magma_int_t lddx, double** dinvA_array, magma_int_t dinvA_length, double** dA_displ, double** dB_displ, double** dX_displ, double** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dtrsm_inv_outofplace_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
    ccall((:magmablas_dtrsm_inv_outofplace_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
end

"""
    magmablas_dtrsv_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, batchCount, queue)


### Prototype
```c
void magmablas_dtrsv_batched( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, double** dA_array, magma_int_t ldda, double** dB_array, magma_int_t incb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dtrsv_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, batchCount, queue)
    ccall((:magmablas_dtrsv_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), uplo, transA, diag, n, dA_array, ldda, dB_array, incb, batchCount, queue)
end

"""
    magmablas_dtrsv_work_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, dX_array, batchCount, queue)


### Prototype
```c
void magmablas_dtrsv_work_batched( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, double** dA_array, magma_int_t ldda, double** dB_array, magma_int_t incb, double** dX_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dtrsv_work_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, dX_array, batchCount, queue)
    ccall((:magmablas_dtrsv_work_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_queue_t), uplo, transA, diag, n, dA_array, ldda, dB_array, incb, dX_array, batchCount, queue)
end

"""
    magmablas_dtrsv_outofplace_batched(uplo, transA, diag, n, A_array, lda, b_array, incb, x_array, batchCount, queue, flag)


### Prototype
```c
void magmablas_dtrsv_outofplace_batched( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, double ** A_array, magma_int_t lda, double **b_array, magma_int_t incb, double **x_array, magma_int_t batchCount, magma_queue_t queue, magma_int_t flag);
```
"""
function magmablas_dtrsv_outofplace_batched(uplo, transA, diag, n, A_array, lda, b_array, incb, x_array, batchCount, queue, flag)
    ccall((:magmablas_dtrsv_outofplace_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_queue_t, magma_int_t), uplo, transA, diag, n, A_array, lda, b_array, incb, x_array, batchCount, queue, flag)
end

"""
    magmablas_dtrmm_batched_core(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrmm_batched_core( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, double **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrmm_batched_core(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_dtrmm_batched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_dtrmm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrmm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, double **dA_array, magma_int_t ldda, double **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrmm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_dtrmm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_dsymm_batched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, roffA, coffA, roffB, coffB, roffC, coffC, batchCount, queue)


### Prototype
```c
void magmablas_dsymm_batched_core( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, double alpha, double **dA_array, magma_int_t ldda, double **dB_array, magma_int_t lddb, double beta, double **dC_array, magma_int_t lddc, magma_int_t roffA, magma_int_t coffA, magma_int_t roffB, magma_int_t coffB, magma_int_t roffC, magma_int_t coffC, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsymm_batched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, roffA, coffA, roffB, coffB, roffC, coffC, batchCount, queue)
    ccall((:magmablas_dsymm_batched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, roffA, coffA, roffB, coffB, roffC, coffC, batchCount, queue)
end

"""
    magmablas_dsymm_batched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dsymm_batched( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, double alpha, double **dA_array, magma_int_t ldda, double **dB_array, magma_int_t lddb, double beta, double **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsymm_batched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_dsymm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dsymv_batched_core(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, offA, offX, offY, batchCount, queue)


### Prototype
```c
void magmablas_dsymv_batched_core( magma_uplo_t uplo, magma_int_t n, double alpha, double **dA_array, magma_int_t ldda, double **dX_array, magma_int_t incx, double beta, double **dY_array, magma_int_t incy, magma_int_t offA, magma_int_t offX, magma_int_t offY, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsymv_batched_core(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, offA, offX, offY, batchCount, queue)
    ccall((:magmablas_dsymv_batched_core, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, offA, offX, offY, batchCount, queue)
end

"""
    magmablas_dsymv_batched(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_dsymv_batched( magma_uplo_t uplo, magma_int_t n, double alpha, double **dA_array, magma_int_t ldda, double **dX_array, magma_int_t incx, double beta, double **dY_array, magma_int_t incy, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsymv_batched(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, batchCount, queue)
    ccall((:magmablas_dsymv_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, batchCount, queue)
end

"""
    magma_dpotrf_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotrf_batched( magma_uplo_t uplo, magma_int_t n, double **dA_array, magma_int_t lda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotrf_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)
    ccall((:magma_dpotrf_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, lda, info_array, batchCount, queue)
end

"""
    magma_dpotf2_batched(uplo, n, dA_array, ai, aj, lda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotf2_batched( magma_uplo_t uplo, magma_int_t n, double **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotf2_batched(uplo, n, dA_array, ai, aj, lda, info_array, gbstep, batchCount, queue)
    ccall((:magma_dpotf2_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, dA_array, ai, aj, lda, info_array, gbstep, batchCount, queue)
end

"""
    magma_dpotrf_panel_batched(uplo, n, nb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotrf_panel_batched( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, double** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotrf_panel_batched(uplo, n, nb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_dpotrf_panel_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, nb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_dpotrf_recpanel_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotrf_recpanel_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t min_recpnb, double** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotrf_recpanel_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_dpotrf_recpanel_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_dpotrf_rectile_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotrf_rectile_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t min_recpnb, double** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotrf_rectile_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_dpotrf_rectile_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_dpotrs_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotrs_batched( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, double **dA_array, magma_int_t ldda, double **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotrs_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magma_dpotrs_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, nrhs, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magma_dposv_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, dinfo_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dposv_batched( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, double **dA_array, magma_int_t ldda, double **dB_array, magma_int_t lddb, magma_int_t *dinfo_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dposv_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, dinfo_array, batchCount, queue)
    ccall((:magma_dposv_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, nrhs, dA_array, ldda, dB_array, lddb, dinfo_array, batchCount, queue)
end

"""
    magma_dgetrs_batched(trans, n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetrs_batched( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, double **dA_array, magma_int_t ldda, magma_int_t **dipiv_array, double **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetrs_batched(trans, n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, batchCount, queue)
    ccall((:magma_dgetrs_batched, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), trans, n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, batchCount, queue)
end

"""
    magma_dlaswp_rowparallel_batched(n, input_array, input_i, input_j, ldi, output_array, output_i, output_j, ldo, k1, k2, pivinfo_array, batchCount, queue)


### Prototype
```c
void magma_dlaswp_rowparallel_batched( magma_int_t n, double** input_array, magma_int_t input_i, magma_int_t input_j, magma_int_t ldi, double** output_array, magma_int_t output_i, magma_int_t output_j, magma_int_t ldo, magma_int_t k1, magma_int_t k2, magma_int_t **pivinfo_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dlaswp_rowparallel_batched(n, input_array, input_i, input_j, ldi, output_array, output_i, output_j, ldo, k1, k2, pivinfo_array, batchCount, queue)
    ccall((:magma_dlaswp_rowparallel_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, input_array, input_i, input_j, ldi, output_array, output_i, output_j, ldo, k1, k2, pivinfo_array, batchCount, queue)
end

"""
    magma_dlaswp_rowserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)


### Prototype
```c
void magma_dlaswp_rowserial_batched( magma_int_t n, double** dA_array, magma_int_t lda, magma_int_t k1, magma_int_t k2, magma_int_t **ipiv_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dlaswp_rowserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
    ccall((:magma_dlaswp_rowserial_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
end

"""
    magma_dlaswp_columnserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)


### Prototype
```c
void magma_dlaswp_columnserial_batched( magma_int_t n, double** dA_array, magma_int_t lda, magma_int_t k1, magma_int_t k2, magma_int_t **ipiv_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dlaswp_columnserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
    ccall((:magma_dlaswp_columnserial_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
end

"""
    magmablas_dtranspose_batched(m, n, dA_array, ldda, dAT_array, lddat, batchCount, queue)


### Prototype
```c
void magmablas_dtranspose_batched( magma_int_t m, magma_int_t n, double **dA_array, magma_int_t ldda, double **dAT_array, magma_int_t lddat, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dtranspose_batched(m, n, dA_array, ldda, dAT_array, lddat, batchCount, queue)
    ccall((:magmablas_dtranspose_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ldda, dAT_array, lddat, batchCount, queue)
end

"""
    magmablas_dlaset_internal_batched(uplo, m, n, offdiag, diag, dAarray, Ai, Aj, ldda, batchCount, queue)


### Prototype
```c
void magmablas_dlaset_internal_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, double offdiag, double diag, magmaDouble_ptr dAarray[], magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dlaset_internal_batched(uplo, m, n, offdiag, diag, dAarray, Ai, Aj, ldda, batchCount, queue)
    ccall((:magmablas_dlaset_internal_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Cdouble, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, offdiag, diag, dAarray, Ai, Aj, ldda, batchCount, queue)
end

"""
    magmablas_dlaset_batched(uplo, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)


### Prototype
```c
void magmablas_dlaset_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, double offdiag, double diag, magmaDouble_ptr dAarray[], magma_int_t ldda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dlaset_batched(uplo, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
    ccall((:magmablas_dlaset_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Cdouble, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
end

"""
    magma_dgesv_batched_small(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgesv_batched_small( magma_int_t n, magma_int_t nrhs, double** dA_array, magma_int_t ldda, magma_int_t** dipiv_array, double **dB_array, magma_int_t lddb, magma_int_t* dinfo_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dgesv_batched_small(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
    ccall((:magma_dgesv_batched_small, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
end

"""
    magma_dgetf2_batched(m, n, dA_array, ai, aj, lda, ipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetf2_batched( magma_int_t m, magma_int_t n, double **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t **ipiv_array, magma_int_t **dpivinfo_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetf2_batched(m, n, dA_array, ai, aj, lda, ipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_dgetf2_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, lda, ipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_dgetrf_recpanel_batched(m, n, min_recpnb, dA_array, ai, aj, ldda, dipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetrf_recpanel_batched( magma_int_t m, magma_int_t n, magma_int_t min_recpnb, double** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t** dipiv_array, magma_int_t** dpivinfo_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetrf_recpanel_batched(m, n, min_recpnb, dA_array, ai, aj, ldda, dipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_dgetrf_recpanel_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, min_recpnb, dA_array, ai, aj, ldda, dipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_dgetrf_batched(m, n, dA_array, lda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetrf_batched( magma_int_t m, magma_int_t n, double **dA_array, magma_int_t lda, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetrf_batched(m, n, dA_array, lda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_dgetrf_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, lda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_dgetf2_fused_batched(m, n, dA_array, ai, aj, ldda, dipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetf2_fused_batched( magma_int_t m, magma_int_t n, double **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t **dipiv_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetf2_fused_batched(m, n, dA_array, ai, aj, ldda, dipiv_array, info_array, batchCount, queue)
    ccall((:magma_dgetf2_fused_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, ldda, dipiv_array, info_array, batchCount, queue)
end

"""
    magma_dgetrf_batched_smallsq_noshfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetrf_batched_smallsq_noshfl( magma_int_t n, double** dA_array, magma_int_t ldda, magma_int_t** ipiv_array, magma_int_t* info_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dgetrf_batched_smallsq_noshfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_dgetrf_batched_smallsq_noshfl, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_dgetrf_batched_smallsq_shfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetrf_batched_smallsq_shfl( magma_int_t n, double** dA_array, magma_int_t ldda, magma_int_t** ipiv_array, magma_int_t* info_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dgetrf_batched_smallsq_shfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_dgetrf_batched_smallsq_shfl, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_dgetri_outofplace_batched(n, dA_array, ldda, dipiv_array, dinvA_array, lddia, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetri_outofplace_batched( magma_int_t n, double **dA_array, magma_int_t ldda, magma_int_t **dipiv_array, double **dinvA_array, magma_int_t lddia, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetri_outofplace_batched(n, dA_array, ldda, dipiv_array, dinvA_array, lddia, info_array, batchCount, queue)
    ccall((:magma_dgetri_outofplace_batched, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, ldda, dipiv_array, dinvA_array, lddia, info_array, batchCount, queue)
end

"""
    magma_ddisplace_intpointers(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_ddisplace_intpointers( magma_int_t **output_array, magma_int_t **input_array, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_ddisplace_intpointers(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_ddisplace_intpointers, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magmablas_idamax_atomic_batched(n, x_array, incx, max_id_array, batchCount)


### Prototype
```c
void magmablas_idamax_atomic_batched( magma_int_t n, double** x_array, magma_int_t incx, magma_int_t **max_id_array, magma_int_t batchCount);
```
"""
function magmablas_idamax_atomic_batched(n, x_array, incx, max_id_array, batchCount)
    ccall((:magmablas_idamax_atomic_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t), n, x_array, incx, max_id_array, batchCount)
end

"""
    magmablas_idamax_tree_batched(n, x_array, incx, max_id_array, batchCount)


### Prototype
```c
void magmablas_idamax_tree_batched( magma_int_t n, double** x_array, magma_int_t incx, magma_int_t **max_id_array, magma_int_t batchCount);
```
"""
function magmablas_idamax_tree_batched(n, x_array, incx, max_id_array, batchCount)
    ccall((:magmablas_idamax_tree_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t), n, x_array, incx, max_id_array, batchCount)
end

"""
    magmablas_idamax_batched(n, x_array, incx, max_id_array, batchCount)


### Prototype
```c
void magmablas_idamax_batched( magma_int_t n, double** x_array, magma_int_t incx, magma_int_t **max_id_array, magma_int_t batchCount);
```
"""
function magmablas_idamax_batched(n, x_array, incx, max_id_array, batchCount)
    ccall((:magmablas_idamax_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t), n, x_array, incx, max_id_array, batchCount)
end

"""
    magmablas_idamax(n, x, incx, max_id)


### Prototype
```c
void magmablas_idamax( magma_int_t n, double* x, magma_int_t incx, magma_int_t *max_id);
```
"""
function magmablas_idamax(n, x, incx, max_id)
    ccall((:magmablas_idamax, libmagma), Cvoid, (magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), n, x, incx, max_id)
end

"""
    magma_idamax_batched(length, x_array, xi, xj, lda, incx, ipiv_array, ipiv_i, step, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_idamax_batched( magma_int_t length, double **x_array, magma_int_t xi, magma_int_t xj, magma_int_t lda, magma_int_t incx, magma_int_t** ipiv_array, magma_int_t ipiv_i, magma_int_t step, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_idamax_batched(length, x_array, xi, xj, lda, incx, ipiv_array, ipiv_i, step, gbstep, info_array, batchCount, queue)
    ccall((:magma_idamax_batched, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), length, x_array, xi, xj, lda, incx, ipiv_array, ipiv_i, step, gbstep, info_array, batchCount, queue)
end

"""
    magma_dswap_batched(n, x_array, xi, xj, incx, step, ipiv_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dswap_batched( magma_int_t n, double **x_array, magma_int_t xi, magma_int_t xj, magma_int_t incx, magma_int_t step, magma_int_t** ipiv_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dswap_batched(n, x_array, xi, xj, incx, step, ipiv_array, batchCount, queue)
    ccall((:magma_dswap_batched, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, x_array, xi, xj, incx, step, ipiv_array, batchCount, queue)
end

"""
    magma_dscal_dger_batched(m, n, dA_array, ai, aj, lda, info_array, step, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dscal_dger_batched( magma_int_t m, magma_int_t n, double **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t *info_array, magma_int_t step, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dscal_dger_batched(m, n, dA_array, ai, aj, lda, info_array, step, gbstep, batchCount, queue)
    ccall((:magma_dscal_dger_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, lda, info_array, step, gbstep, batchCount, queue)
end

"""
    magma_dcomputecolumn_batched(m, paneloffset, step, dA_array, lda, ai, aj, ipiv_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dcomputecolumn_batched( magma_int_t m, magma_int_t paneloffset, magma_int_t step, double **dA_array, magma_int_t lda, magma_int_t ai, magma_int_t aj, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dcomputecolumn_batched(m, paneloffset, step, dA_array, lda, ai, aj, ipiv_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_dcomputecolumn_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, paneloffset, step, dA_array, lda, ai, aj, ipiv_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_dgetf2trsm_batched(ib, n, dA_array, j, lda, batchCount, queue)


### Prototype
```c
void magma_dgetf2trsm_batched( magma_int_t ib, magma_int_t n, double **dA_array, magma_int_t j, magma_int_t lda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetf2trsm_batched(ib, n, dA_array, j, lda, batchCount, queue)
    ccall((:magma_dgetf2trsm_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), ib, n, dA_array, j, lda, batchCount, queue)
end

"""
    magma_dgetf2_nopiv_internal_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetf2_nopiv_internal_batched( magma_int_t m, magma_int_t n, double** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t* info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dgetf2_nopiv_internal_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_dgetf2_nopiv_internal_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_dgetf2_nopiv_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetf2_nopiv_batched( magma_int_t m, magma_int_t n, double **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetf2_nopiv_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_dgetf2_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_dgetrf_recpanel_nopiv_batched(m, n, min_recpnb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW1_displ, dW2_displ, dW3_displ, dW4_displ, dW5_displ, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetrf_recpanel_nopiv_batched( magma_int_t m, magma_int_t n, magma_int_t min_recpnb, double** dA_array, magma_int_t ldda, double** dX_array, magma_int_t dX_length, double** dinvA_array, magma_int_t dinvA_length, double** dW1_displ, double** dW2_displ, double** dW3_displ, double** dW4_displ, double** dW5_displ, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetrf_recpanel_nopiv_batched(m, n, min_recpnb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW1_displ, dW2_displ, dW3_displ, dW4_displ, dW5_displ, info_array, gbstep, batchCount, queue)
    ccall((:magma_dgetrf_recpanel_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, min_recpnb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW1_displ, dW2_displ, dW3_displ, dW4_displ, dW5_displ, info_array, gbstep, batchCount, queue)
end

"""
    magma_dgetrf_nopiv_batched(m, n, dA_array, lda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetrf_nopiv_batched( magma_int_t m, magma_int_t n, double **dA_array, magma_int_t lda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetrf_nopiv_batched(m, n, dA_array, lda, info_array, batchCount, queue)
    ccall((:magma_dgetrf_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, lda, info_array, batchCount, queue)
end

"""
    magma_dgetrs_nopiv_batched(trans, n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetrs_nopiv_batched( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, double **dA_array, magma_int_t ldda, double **dB_array, magma_int_t lddb, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetrs_nopiv_batched(trans, n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
    ccall((:magma_dgetrs_nopiv_batched, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
end

"""
    magma_dgesv_nopiv_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgesv_nopiv_batched( magma_int_t n, magma_int_t nrhs, double **dA_array, magma_int_t ldda, double **dB_array, magma_int_t lddb, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgesv_nopiv_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
    ccall((:magma_dgesv_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
end

"""
    magma_dgesv_rbt_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgesv_rbt_batched( magma_int_t n, magma_int_t nrhs, double **dA_array, magma_int_t ldda, double **dB_array, magma_int_t lddb, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgesv_rbt_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
    ccall((:magma_dgesv_rbt_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
end

"""
    magma_dgesv_batched(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgesv_batched( magma_int_t n, magma_int_t nrhs, double **dA_array, magma_int_t ldda, magma_int_t **dipiv_array, double **dB_array, magma_int_t lddb, magma_int_t *dinfo_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgesv_batched(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
    ccall((:magma_dgesv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, PtrOrCuPtr{PtrOrCuPtr{Cdouble}}, magma_int_t, PtrOrCuPtr{PtrOrCuPtr{magma_int_t}}, PtrOrCuPtr{PtrOrCuPtr{Cdouble}}, magma_int_t, PtrOrCuPtr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
end

"""
    magma_dgerbt_batched(gen, n, nrhs, dA_array, ldda, dB_array, lddb, U, V, info, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgerbt_batched( magma_bool_t gen, magma_int_t n, magma_int_t nrhs, double **dA_array, magma_int_t ldda, double **dB_array, magma_int_t lddb, double *U, double *V, magma_int_t *info, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgerbt_batched(gen, n, nrhs, dA_array, ldda, dB_array, lddb, U, V, info, batchCount, queue)
    ccall((:magma_dgerbt_batched, libmagma), magma_int_t, (magma_bool_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), gen, n, nrhs, dA_array, ldda, dB_array, lddb, U, V, info, batchCount, queue)
end

"""
    magmablas_dprbt_batched(n, dA_array, ldda, du, dv, batchCount, queue)


### Prototype
```c
void magmablas_dprbt_batched( magma_int_t n, double **dA_array, magma_int_t ldda, double *du, double *dv, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dprbt_batched(n, dA_array, ldda, du, dv, batchCount, queue)
    ccall((:magmablas_dprbt_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, magma_queue_t), n, dA_array, ldda, du, dv, batchCount, queue)
end

"""
    magmablas_dprbt_mv_batched(n, dv, db_array, batchCount, queue)


### Prototype
```c
void magmablas_dprbt_mv_batched( magma_int_t n, double *dv, double **db_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dprbt_mv_batched(n, dv, db_array, batchCount, queue)
    ccall((:magmablas_dprbt_mv_batched, libmagma), Cvoid, (magma_int_t, Ptr{Cdouble}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_queue_t), n, dv, db_array, batchCount, queue)
end

"""
    magmablas_dprbt_mtv_batched(n, du, db_array, batchCount, queue)


### Prototype
```c
void magmablas_dprbt_mtv_batched( magma_int_t n, double *du, double **db_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dprbt_mtv_batched(n, du, db_array, batchCount, queue)
    ccall((:magmablas_dprbt_mtv_batched, libmagma), Cvoid, (magma_int_t, Ptr{Cdouble}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_queue_t), n, du, db_array, batchCount, queue)
end

"""
    magmablas_dgeadd_batched(m, n, alpha, dAarray, ldda, dBarray, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dgeadd_batched( magma_int_t m, magma_int_t n, double alpha, magmaDouble_const_ptr const dAarray[], magma_int_t ldda, magmaDouble_ptr dBarray[], magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dgeadd_batched(m, n, alpha, dAarray, ldda, dBarray, lddb, batchCount, queue)
    ccall((:magmablas_dgeadd_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Cdouble, Ptr{magmaDouble_const_ptr}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_queue_t), m, n, alpha, dAarray, ldda, dBarray, lddb, batchCount, queue)
end

"""
    magmablas_dlacpy_internal_batched(uplo, m, n, dAarray, Ai, Aj, ldda, dBarray, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dlacpy_internal_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDouble_const_ptr const dAarray[], magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaDouble_ptr dBarray[], magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dlacpy_internal_batched(uplo, m, n, dAarray, Ai, Aj, ldda, dBarray, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_dlacpy_internal_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDouble_const_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, dAarray, Ai, Aj, ldda, dBarray, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_dlacpy_batched(uplo, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dlacpy_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDouble_const_ptr const dAarray[], magma_int_t ldda, magmaDouble_ptr dBarray[], magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dlacpy_batched(uplo, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
    ccall((:magmablas_dlacpy_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDouble_const_ptr}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
end

"""
    magmablas_dgemv_batched_template(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_dgemv_batched_template( magma_trans_t trans, magma_int_t m, magma_int_t n, double alpha, magmaDouble_ptr dA_array[], magma_int_t ldda, magmaDouble_ptr dx_array[], magma_int_t incx, double beta, magmaDouble_ptr dy_array[], magma_int_t incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dgemv_batched_template(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_dgemv_batched_template, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_dgemv_batched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_dgemv_batched( magma_trans_t trans, magma_int_t m, magma_int_t n, double alpha, magmaDouble_ptr dA_array[], magma_int_t ldda, magmaDouble_ptr dx_array[], magma_int_t incx, double beta, magmaDouble_ptr dy_array[], magma_int_t incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dgemv_batched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_dgemv_batched, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Cdouble, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magma_dgeqrf_batched_smallsq(n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgeqrf_batched_smallsq( magma_int_t n, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dgeqrf_batched_smallsq(n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
    ccall((:magma_dgeqrf_batched_smallsq, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
end

"""
    magma_dgeqrf_batched(m, n, dA_array, lda, dtau_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgeqrf_batched( magma_int_t m, magma_int_t n, double **dA_array, magma_int_t lda, double **dtau_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgeqrf_batched(m, n, dA_array, lda, dtau_array, info_array, batchCount, queue)
    ccall((:magma_dgeqrf_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, lda, dtau_array, info_array, batchCount, queue)
end

"""
    magma_dgeqrf_expert_batched(m, n, nb, dA_array, ldda, dR_array, lddr, dT_array, lddt, dtau_array, provide_RT, dW_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgeqrf_expert_batched( magma_int_t m, magma_int_t n, magma_int_t nb, double **dA_array, magma_int_t ldda, double **dR_array, magma_int_t lddr, double **dT_array, magma_int_t lddt, double **dtau_array, magma_int_t provide_RT, double **dW_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgeqrf_expert_batched(m, n, nb, dA_array, ldda, dR_array, lddr, dT_array, lddt, dtau_array, provide_RT, dW_array, info_array, batchCount, queue)
    ccall((:magma_dgeqrf_expert_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, nb, dA_array, ldda, dR_array, lddr, dT_array, lddt, dtau_array, provide_RT, dW_array, info_array, batchCount, queue)
end

"""
    magma_dgeqrf_batched_v4(m, n, dA_array, lda, tau_array, info_array, batchCount)


### Prototype
```c
magma_int_t magma_dgeqrf_batched_v4( magma_int_t m, magma_int_t n, double **dA_array, magma_int_t lda, double **tau_array, magma_int_t *info_array, magma_int_t batchCount);
```
"""
function magma_dgeqrf_batched_v4(m, n, dA_array, lda, tau_array, info_array, batchCount)
    ccall((:magma_dgeqrf_batched_v4, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t), m, n, dA_array, lda, tau_array, info_array, batchCount)
end

"""
    magma_dgeqrf_panel_fused_update_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dR_array, Ri, Rj, lddr, info_array, separate_R_V, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgeqrf_panel_fused_update_batched( magma_int_t m, magma_int_t n, magma_int_t nb, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double** tau_array, magma_int_t taui, double** dR_array, magma_int_t Ri, magma_int_t Rj, magma_int_t lddr, magma_int_t *info_array, magma_int_t separate_R_V, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgeqrf_panel_fused_update_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dR_array, Ri, Rj, lddr, info_array, separate_R_V, batchCount, queue)
    ccall((:magma_dgeqrf_panel_fused_update_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dR_array, Ri, Rj, lddr, info_array, separate_R_V, batchCount, queue)
end

"""
    magma_dgeqrf_panel_internal_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dT_array, Ti, Tj, lddt, dR_array, Ri, Rj, lddr, dwork_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgeqrf_panel_internal_batched( magma_int_t m, magma_int_t n, magma_int_t nb, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double** tau_array, magma_int_t taui, double** dT_array, magma_int_t Ti, magma_int_t Tj, magma_int_t lddt, double** dR_array, magma_int_t Ri, magma_int_t Rj, magma_int_t lddr, double** dwork_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgeqrf_panel_internal_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dT_array, Ti, Tj, lddt, dR_array, Ri, Rj, lddr, dwork_array, info_array, batchCount, queue)
    ccall((:magma_dgeqrf_panel_internal_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dT_array, Ti, Tj, lddt, dR_array, Ri, Rj, lddr, dwork_array, info_array, batchCount, queue)
end

"""
    magma_dgeqrf_panel_batched(m, n, nb, dA_array, ldda, tau_array, dT_array, ldt, dR_array, ldr, dwork_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgeqrf_panel_batched( magma_int_t m, magma_int_t n, magma_int_t nb, double** dA_array, magma_int_t ldda, double** tau_array, double** dT_array, magma_int_t ldt, double** dR_array, magma_int_t ldr, double** dwork_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgeqrf_panel_batched(m, n, nb, dA_array, ldda, tau_array, dT_array, ldt, dR_array, ldr, dwork_array, info_array, batchCount, queue)
    ccall((:magma_dgeqrf_panel_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, nb, dA_array, ldda, tau_array, dT_array, ldt, dR_array, ldr, dwork_array, info_array, batchCount, queue)
end

"""
    magma_dgels_batched(trans, m, n, nrhs, dA_array, ldda, dB_array, lddb, hwork, lwork, info, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgels_batched( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, double **dA_array, magma_int_t ldda, double **dB_array, magma_int_t lddb, double *hwork, magma_int_t lwork, magma_int_t *info, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgels_batched(trans, m, n, nrhs, dA_array, ldda, dB_array, lddb, hwork, lwork, info, batchCount, queue)
    ccall((:magma_dgels_batched, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, nrhs, dA_array, ldda, dB_array, lddb, hwork, lwork, info, batchCount, queue)
end

"""
    magma_dgeqr2_fused_reg_tall_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgeqr2_fused_reg_tall_batched( magma_int_t m, magma_int_t n, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dgeqr2_fused_reg_tall_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
    ccall((:magma_dgeqr2_fused_reg_tall_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
end

"""
    magma_dgeqr2_fused_reg_medium_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgeqr2_fused_reg_medium_batched( magma_int_t m, magma_int_t n, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dgeqr2_fused_reg_medium_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
    ccall((:magma_dgeqr2_fused_reg_medium_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
end

"""
    magma_dgeqr2_fused_reg_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgeqr2_fused_reg_batched( magma_int_t m, magma_int_t n, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dgeqr2_fused_reg_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
    ccall((:magma_dgeqr2_fused_reg_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
end

"""
    magma_dgeqr2_fused_sm_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, nthreads, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgeqr2_fused_sm_batched( magma_int_t m, magma_int_t n, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t nthreads, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dgeqr2_fused_sm_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, nthreads, check_launch_only, batchCount, queue)
    ccall((:magma_dgeqr2_fused_sm_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, nthreads, check_launch_only, batchCount, queue)
end

"""
    magma_dgeqr2_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgeqr2_batched( magma_int_t m, magma_int_t n, double **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double **dtau_array, magma_int_t taui, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgeqr2_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
    ccall((:magma_dgeqr2_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
end

"""
    magma_dlarf_fused_reg_tall_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_dlarf_fused_reg_tall_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, double **dtau_array, magma_int_t taui, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dlarf_fused_reg_tall_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
    ccall((:magma_dlarf_fused_reg_tall_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
end

"""
    magma_dlarf_fused_reg_medium_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_dlarf_fused_reg_medium_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, double **dtau_array, magma_int_t taui, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dlarf_fused_reg_medium_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
    ccall((:magma_dlarf_fused_reg_medium_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
end

"""
    magma_dlarf_fused_reg_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_dlarf_fused_reg_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, double **dtau_array, magma_int_t taui, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dlarf_fused_reg_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
    ccall((:magma_dlarf_fused_reg_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
end

"""
    magma_dlarf_fused_sm_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, nthreads, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_dlarf_fused_sm_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, double** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, double **dtau_array, magma_int_t taui, magma_int_t nthreads, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dlarf_fused_sm_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, nthreads, check_launch_only, batchCount, queue)
    ccall((:magma_dlarf_fused_sm_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, nthreads, check_launch_only, batchCount, queue)
end

"""
    magma_dlarfb_gemm_internal_batched(side, trans, direct, storev, m, n, k, dV_array, vi, vj, lddv, dT_array, Ti, Tj, lddt, dC_array, Ci, Cj, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)


### Prototype
```c
magma_int_t magma_dlarfb_gemm_internal_batched( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaDouble_const_ptr dV_array[], magma_int_t vi, magma_int_t vj, magma_int_t lddv, magmaDouble_const_ptr dT_array[], magma_int_t Ti, magma_int_t Tj, magma_int_t lddt, magmaDouble_ptr dC_array[], magma_int_t Ci, magma_int_t Cj, magma_int_t lddc, magmaDouble_ptr dwork_array[], magma_int_t ldwork, magmaDouble_ptr dworkvt_array[], magma_int_t ldworkvt, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dlarfb_gemm_internal_batched(side, trans, direct, storev, m, n, k, dV_array, vi, vj, lddv, dT_array, Ti, Tj, lddt, dC_array, Ci, Cj, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
    ccall((:magma_dlarfb_gemm_internal_batched, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDouble_const_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDouble_const_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_queue_t), side, trans, direct, storev, m, n, k, dV_array, vi, vj, lddv, dT_array, Ti, Tj, lddt, dC_array, Ci, Cj, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
end

"""
    magma_dlarfb_gemm_batched(side, trans, direct, storev, m, n, k, dV_array, lddv, dT_array, lddt, dC_array, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)


### Prototype
```c
magma_int_t magma_dlarfb_gemm_batched( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaDouble_const_ptr dV_array[], magma_int_t lddv, magmaDouble_const_ptr dT_array[], magma_int_t lddt, magmaDouble_ptr dC_array[], magma_int_t lddc, magmaDouble_ptr dwork_array[], magma_int_t ldwork, magmaDouble_ptr dworkvt_array[], magma_int_t ldworkvt, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dlarfb_gemm_batched(side, trans, direct, storev, m, n, k, dV_array, lddv, dT_array, lddt, dC_array, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
    ccall((:magma_dlarfb_gemm_batched, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDouble_const_ptr}, magma_int_t, Ptr{magmaDouble_const_ptr}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_queue_t), side, trans, direct, storev, m, n, k, dV_array, lddv, dT_array, lddt, dC_array, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
end

"""
    magma_dlarft_internal_batched(n, k, stair_T, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, work_array, lwork, batchCount, queue)


### Prototype
```c
magma_int_t magma_dlarft_internal_batched( magma_int_t n, magma_int_t k, magma_int_t stair_T, double **v_array, magma_int_t vi, magma_int_t vj, magma_int_t ldv, double **tau_array, magma_int_t taui, double **T_array, magma_int_t Ti, magma_int_t Tj, magma_int_t ldt, double **work_array, magma_int_t lwork, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dlarft_internal_batched(n, k, stair_T, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, work_array, lwork, batchCount, queue)
    ccall((:magma_dlarft_internal_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), n, k, stair_T, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, work_array, lwork, batchCount, queue)
end

"""
    magma_dlarft_batched(n, k, stair_T, v_array, ldv, tau_array, T_array, ldt, work_array, lwork, batchCount, queue)


### Prototype
```c
magma_int_t magma_dlarft_batched( magma_int_t n, magma_int_t k, magma_int_t stair_T, double **v_array, magma_int_t ldv, double **tau_array, double **T_array, magma_int_t ldt, double **work_array, magma_int_t lwork, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dlarft_batched(n, k, stair_T, v_array, ldv, tau_array, T_array, ldt, work_array, lwork, batchCount, queue)
    ccall((:magma_dlarft_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), n, k, stair_T, v_array, ldv, tau_array, T_array, ldt, work_array, lwork, batchCount, queue)
end

"""
    magma_dlarft_sm32x32_batched(n, k, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, batchCount, queue)


### Prototype
```c
void magma_dlarft_sm32x32_batched( magma_int_t n, magma_int_t k, double **v_array, magma_int_t vi, magma_int_t vj, magma_int_t ldv, double **tau_array, magma_int_t taui, double **T_array, magma_int_t Ti, magma_int_t Tj, magma_int_t ldt, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dlarft_sm32x32_batched(n, k, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, batchCount, queue)
    ccall((:magma_dlarft_sm32x32_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, k, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, batchCount, queue)
end

"""
    magmablas_dlarft_recdtrmv_sm32x32(m, n, tau, Trec, ldtrec, Ttri, ldttri, queue)


### Prototype
```c
void magmablas_dlarft_recdtrmv_sm32x32( magma_int_t m, magma_int_t n, double *tau, double *Trec, magma_int_t ldtrec, double *Ttri, magma_int_t ldttri, magma_queue_t queue);
```
"""
function magmablas_dlarft_recdtrmv_sm32x32(m, n, tau, Trec, ldtrec, Ttri, ldttri, queue)
    ccall((:magmablas_dlarft_recdtrmv_sm32x32, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t), m, n, tau, Trec, ldtrec, Ttri, ldttri, queue)
end

"""
    magmablas_dlarft_recdtrmv_sm32x32_batched(m, n, tau_array, taui, Trec_array, Treci, Trecj, ldtrec, Ttri_array, Ttrii, Ttrij, ldttri, batchCount, queue)


### Prototype
```c
void magmablas_dlarft_recdtrmv_sm32x32_batched( magma_int_t m, magma_int_t n, double **tau_array, magma_int_t taui, double **Trec_array, magma_int_t Treci, magma_int_t Trecj, magma_int_t ldtrec, double **Ttri_array, magma_int_t Ttrii, magma_int_t Ttrij, magma_int_t ldttri, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dlarft_recdtrmv_sm32x32_batched(m, n, tau_array, taui, Trec_array, Treci, Trecj, ldtrec, Ttri_array, Ttrii, Ttrij, ldttri, batchCount, queue)
    ccall((:magmablas_dlarft_recdtrmv_sm32x32_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, tau_array, taui, Trec_array, Treci, Trecj, ldtrec, Ttri_array, Ttrii, Ttrij, ldttri, batchCount, queue)
end

"""
    magmablas_dlarft_dtrmv_sm32x32(m, n, tau, Tin, ldtin, Tout, ldtout, queue)


### Prototype
```c
void magmablas_dlarft_dtrmv_sm32x32( magma_int_t m, magma_int_t n, double *tau, double *Tin, magma_int_t ldtin, double *Tout, magma_int_t ldtout, magma_queue_t queue);
```
"""
function magmablas_dlarft_dtrmv_sm32x32(m, n, tau, Tin, ldtin, Tout, ldtout, queue)
    ccall((:magmablas_dlarft_dtrmv_sm32x32, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t), m, n, tau, Tin, ldtin, Tout, ldtout, queue)
end

"""
    magmablas_dlarft_dtrmv_sm32x32_batched(m, n, tau_array, taui, Tin_array, Tini, Tinj, ldtin, Tout_array, Touti, Toutj, ldtout, batchCount, queue)


### Prototype
```c
void magmablas_dlarft_dtrmv_sm32x32_batched( magma_int_t m, magma_int_t n, double **tau_array, magma_int_t taui, double **Tin_array, magma_int_t Tini, magma_int_t Tinj, magma_int_t ldtin, double **Tout_array, magma_int_t Touti, magma_int_t Toutj, magma_int_t ldtout, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dlarft_dtrmv_sm32x32_batched(m, n, tau_array, taui, Tin_array, Tini, Tinj, ldtin, Tout_array, Touti, Toutj, ldtout, batchCount, queue)
    ccall((:magmablas_dlarft_dtrmv_sm32x32_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, tau_array, taui, Tin_array, Tini, Tinj, ldtin, Tout_array, Touti, Toutj, ldtout, batchCount, queue)
end

"""
    magmablas_dnrm2_cols_batched(m, n, dA_array, lda, dxnorm_array, batchCount)


### Prototype
```c
void magmablas_dnrm2_cols_batched( magma_int_t m, magma_int_t n, double **dA_array, magma_int_t lda, double **dxnorm_array, magma_int_t batchCount);
```
"""
function magmablas_dnrm2_cols_batched(m, n, dA_array, lda, dxnorm_array, batchCount)
    ccall((:magmablas_dnrm2_cols_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t), m, n, dA_array, lda, dxnorm_array, batchCount)
end

"""
    magma_dlarfgx_batched(n, dx0_array, dx_array, dtau_array, dxnorm_array, dR_array, it, batchCount)


### Prototype
```c
void magma_dlarfgx_batched( magma_int_t n, double **dx0_array, double **dx_array, double **dtau_array, double **dxnorm_array, double **dR_array, magma_int_t it, magma_int_t batchCount);
```
"""
function magma_dlarfgx_batched(n, dx0_array, dx_array, dtau_array, dxnorm_array, dR_array, it, batchCount)
    ccall((:magma_dlarfgx_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t), n, dx0_array, dx_array, dtau_array, dxnorm_array, dR_array, it, batchCount)
end

"""
    magma_dlarfx_batched_v4(m, n, v_array, tau_array, C_array, ldc, xnorm_array, step, batchCount)


### Prototype
```c
void magma_dlarfx_batched_v4( magma_int_t m, magma_int_t n, double **v_array, double **tau_array, double **C_array, magma_int_t ldc, double **xnorm_array, magma_int_t step, magma_int_t batchCount);
```
"""
function magma_dlarfx_batched_v4(m, n, v_array, tau_array, C_array, ldc, xnorm_array, step, batchCount)
    ccall((:magma_dlarfx_batched_v4, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t), m, n, v_array, tau_array, C_array, ldc, xnorm_array, step, batchCount)
end

"""
    magmablas_dlarfg_batched(n, dalpha_array, dx_array, incx, dtau_array, batchCount)


### Prototype
```c
void magmablas_dlarfg_batched( magma_int_t n, double** dalpha_array, double** dx_array, magma_int_t incx, double** dtau_array, magma_int_t batchCount );
```
"""
function magmablas_dlarfg_batched(n, dalpha_array, dx_array, incx, dtau_array, batchCount)
    ccall((:magmablas_dlarfg_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t), n, dalpha_array, dx_array, incx, dtau_array, batchCount)
end

"""
    magma_dpotrf_lpout_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotrf_lpout_batched( magma_uplo_t uplo, magma_int_t n, double **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotrf_lpout_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
    ccall((:magma_dpotrf_lpout_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
end

"""
    magma_dpotrf_lpin_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotrf_lpin_batched( magma_uplo_t uplo, magma_int_t n, double **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotrf_lpin_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
    ccall((:magma_dpotrf_lpin_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
end

"""
    magma_dpotrf_v33_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotrf_v33_batched( magma_uplo_t uplo, magma_int_t n, double **dA_array, magma_int_t lda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotrf_v33_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)
    ccall((:magma_dpotrf_v33_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, lda, info_array, batchCount, queue)
end

"""
    blas_dlacpy_batched(uplo, m, n, hA_array, lda, hB_array, ldb, batchCount)

host interface
### Prototype
```c
void blas_dlacpy_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, double const * const * hA_array, magma_int_t lda, double **hB_array, magma_int_t ldb, magma_int_t batchCount );
```
"""
function blas_dlacpy_batched(uplo, m, n, hA_array, lda, hB_array, ldb, batchCount)
    ccall((:blas_dlacpy_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t), uplo, m, n, hA_array, lda, hB_array, ldb, batchCount)
end

"""
    blas_dgemm_batched(transA, transB, m, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_dgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, double alpha, double const * const * hA_array, magma_int_t lda, double const * const * hB_array, magma_int_t ldb, double beta, double **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_dgemm_batched(transA, transB, m, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
    ccall((:blas_dgemm_batched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t), transA, transB, m, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
end

"""
    blas_dtrsm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)


### Prototype
```c
void blas_dtrsm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, double **hA_array, magma_int_t lda, double **hB_array, magma_int_t ldb, magma_int_t batchCount );
```
"""
function blas_dtrsm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
    ccall((:blas_dtrsm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t), side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
end

"""
    blas_dtrmm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)


### Prototype
```c
void blas_dtrmm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, double **hA_array, magma_int_t lda, double **hB_array, magma_int_t ldb, magma_int_t batchCount );
```
"""
function blas_dtrmm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
    ccall((:blas_dtrmm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t), side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
end

"""
    blas_dsymm_batched(side, uplo, m, n, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_dsymm_batched( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, double alpha, double **hA_array, magma_int_t lda, double **hB_array, magma_int_t ldb, double beta, double **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_dsymm_batched(side, uplo, m, n, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
    ccall((:blas_dsymm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t), side, uplo, m, n, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
end

"""
    blas_dsyrk_batched(uplo, trans, n, k, alpha, hA_array, lda, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_dsyrk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, double const * const * hA_array, magma_int_t lda, double beta, double **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_dsyrk_batched(uplo, trans, n, k, alpha, hA_array, lda, beta, hC_array, ldc, batchCount)
    ccall((:blas_dsyrk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t), uplo, trans, n, k, alpha, hA_array, lda, beta, hC_array, ldc, batchCount)
end

"""
    blas_dsyr2k_batched(uplo, trans, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_dsyr2k_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, double alpha, double const * const * hA_array, magma_int_t lda, double const * const * hB_array, magma_int_t ldb, double beta, double **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_dsyr2k_batched(uplo, trans, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
    ccall((:blas_dsyr2k_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t), uplo, trans, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
end

"""
    dset_stepinit_ipiv(ipiv_array, pm, batchCount)

for debugging purpose
### Prototype
```c
void dset_stepinit_ipiv( magma_int_t **ipiv_array, magma_int_t pm, magma_int_t batchCount);
```
"""
function dset_stepinit_ipiv(ipiv_array, pm, batchCount)
    ccall((:dset_stepinit_ipiv, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t), ipiv_array, pm, batchCount)
end

"""
    magma_sset_pointer(output_array, input, lda, row, column, batch_offset, batchCount, queue)

 local auxiliary routines
### Prototype
```c
void magma_sset_pointer( float **output_array, float *input, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batch_offset, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sset_pointer(output_array, input, lda, row, column, batch_offset, batchCount, queue)
    ccall((:magma_sset_pointer, libmagma), Cvoid, (Ptr{Ptr{Cfloat}}, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input, lda, row, column, batch_offset, batchCount, queue)
end

"""
    magma_sdisplace_pointers(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_sdisplace_pointers( float **output_array, float **input_array, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sdisplace_pointers(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_sdisplace_pointers, libmagma), Cvoid, (Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_srecommend_cublas_gemm_batched(transa, transb, m, n, k)


### Prototype
```c
magma_int_t magma_srecommend_cublas_gemm_batched( magma_trans_t transa, magma_trans_t transb, magma_int_t m, magma_int_t n, magma_int_t k);
```
"""
function magma_srecommend_cublas_gemm_batched(transa, transb, m, n, k)
    ccall((:magma_srecommend_cublas_gemm_batched, libmagma), magma_int_t, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t), transa, transb, m, n, k)
end

"""
    magma_srecommend_cublas_gemm_stream(transa, transb, m, n, k)


### Prototype
```c
magma_int_t magma_srecommend_cublas_gemm_stream( magma_trans_t transa, magma_trans_t transb, magma_int_t m, magma_int_t n, magma_int_t k);
```
"""
function magma_srecommend_cublas_gemm_stream(transa, transb, m, n, k)
    ccall((:magma_srecommend_cublas_gemm_stream, libmagma), magma_int_t, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t), transa, transb, m, n, k)
end

"""
    magma_get_spotrf_batched_nbparam(n, nb, recnb)


### Prototype
```c
void magma_get_spotrf_batched_nbparam(magma_int_t n, magma_int_t *nb, magma_int_t *recnb);
```
"""
function magma_get_spotrf_batched_nbparam(n, nb, recnb)
    ccall((:magma_get_spotrf_batched_nbparam, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, recnb)
end

# no prototype is found for this function at magma_sbatched.h:55:13, please use with caution
"""
    magma_get_spotrf_batched_crossover()


### Prototype
```c
magma_int_t magma_get_spotrf_batched_crossover();
```
"""
function magma_get_spotrf_batched_crossover()
    ccall((:magma_get_spotrf_batched_crossover, libmagma), magma_int_t, ())
end

"""
    magma_get_sgetrf_batched_nbparam(n, nb, recnb)


### Prototype
```c
void magma_get_sgetrf_batched_nbparam(magma_int_t n, magma_int_t *nb, magma_int_t *recnb);
```
"""
function magma_get_sgetrf_batched_nbparam(n, nb, recnb)
    ccall((:magma_get_sgetrf_batched_nbparam, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, recnb)
end

"""
    magma_get_sgetrf_batched_ntcol(m, n)


### Prototype
```c
magma_int_t magma_get_sgetrf_batched_ntcol(magma_int_t m, magma_int_t n);
```
"""
function magma_get_sgetrf_batched_ntcol(m, n)
    ccall((:magma_get_sgetrf_batched_ntcol, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_sgemm_batched_ntcol(n)


### Prototype
```c
magma_int_t magma_get_sgemm_batched_ntcol(magma_int_t n);
```
"""
function magma_get_sgemm_batched_ntcol(n)
    ccall((:magma_get_sgemm_batched_ntcol, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_sgemm_batched_smallsq_limit(n)


### Prototype
```c
magma_int_t magma_get_sgemm_batched_smallsq_limit(magma_int_t n);
```
"""
function magma_get_sgemm_batched_smallsq_limit(n)
    ccall((:magma_get_sgemm_batched_smallsq_limit, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_sgeqrf_batched_nb(m)


### Prototype
```c
magma_int_t magma_get_sgeqrf_batched_nb(magma_int_t m);
```
"""
function magma_get_sgeqrf_batched_nb(m)
    ccall((:magma_get_sgeqrf_batched_nb, libmagma), magma_int_t, (magma_int_t,), m)
end

"""
    magma_use_sgeqrf_batched_fused_update(m, n, batchCount)


### Prototype
```c
magma_int_t magma_use_sgeqrf_batched_fused_update(magma_int_t m, magma_int_t n, magma_int_t batchCount);
```
"""
function magma_use_sgeqrf_batched_fused_update(m, n, batchCount)
    ccall((:magma_use_sgeqrf_batched_fused_update, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), m, n, batchCount)
end

"""
    magma_get_sgeqr2_fused_sm_batched_nthreads(m, n)


### Prototype
```c
magma_int_t magma_get_sgeqr2_fused_sm_batched_nthreads(magma_int_t m, magma_int_t n);
```
"""
function magma_get_sgeqr2_fused_sm_batched_nthreads(m, n)
    ccall((:magma_get_sgeqr2_fused_sm_batched_nthreads, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_sgeqrf_batched_ntcol(m, n)


### Prototype
```c
magma_int_t magma_get_sgeqrf_batched_ntcol(magma_int_t m, magma_int_t n);
```
"""
function magma_get_sgeqrf_batched_ntcol(m, n)
    ccall((:magma_get_sgeqrf_batched_ntcol, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_sgetri_batched_ntcol(m, n)


### Prototype
```c
magma_int_t magma_get_sgetri_batched_ntcol(magma_int_t m, magma_int_t n);
```
"""
function magma_get_sgetri_batched_ntcol(m, n)
    ccall((:magma_get_sgetri_batched_ntcol, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_strsm_batched_stop_nb(side, m, n)


### Prototype
```c
magma_int_t magma_get_strsm_batched_stop_nb(magma_side_t side, magma_int_t m, magma_int_t n);
```
"""
function magma_get_strsm_batched_stop_nb(side, m, n)
    ccall((:magma_get_strsm_batched_stop_nb, libmagma), magma_int_t, (magma_side_t, magma_int_t, magma_int_t), side, m, n)
end

"""
    magmablas_sswapdblk_batched(n, nb, dA, ldda, inca, dB, lddb, incb, batchCount, queue)


### Prototype
```c
void magmablas_sswapdblk_batched( magma_int_t n, magma_int_t nb, float **dA, magma_int_t ldda, magma_int_t inca, float **dB, magma_int_t lddb, magma_int_t incb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_sswapdblk_batched(n, nb, dA, ldda, inca, dB, lddb, incb, batchCount, queue)
    ccall((:magmablas_sswapdblk_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, nb, dA, ldda, inca, dB, lddb, incb, batchCount, queue)
end

"""
    magmablas_sgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)

 BLAS batched routines
### Prototype
```c
void magmablas_sgemm_batched_core( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, float alpha, float const * const * dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float const * const * dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, float beta, float **dC_array, magma_int_t Ci, magma_int_t Cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_sgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
    ccall((:magmablas_sgemm_batched_core, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
end

"""
    magma_sgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)


### Prototype
```c
void magma_sgemm_batched_core( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, float alpha, float const * const * dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float const * const * dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, float beta, float **dC_array, magma_int_t Ci, magma_int_t Cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_sgemm_batched_core(transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
    ccall((:magma_sgemm_batched_core, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
end

"""
    magma_sgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magma_sgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, float alpha, float const * const * dA_array, magma_int_t ldda, float const * const * dB_array, magma_int_t lddb, float beta, float **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_sgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magma_sgemm_batched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_sgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_sgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, float alpha, float const * const * dA_array, magma_int_t ldda, float const * const * dB_array, magma_int_t lddb, float beta, float **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_sgemm_batched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_sgemm_batched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_sgemm_batched_strided(transA, transB, m, n, k, alpha, dA, ldda, strideA, dB, lddb, strideB, beta, dC, lddc, strideC, batchCount, queue)


### Prototype
```c
void magmablas_sgemm_batched_strided( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, float alpha, float const * dA, magma_int_t ldda, magma_int_t strideA, float const * dB, magma_int_t lddb, magma_int_t strideB, float beta, float * dC, magma_int_t lddc, magma_int_t strideC, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_sgemm_batched_strided(transA, transB, m, n, k, alpha, dA, ldda, strideA, dB, lddb, strideB, beta, dC, lddc, strideC, batchCount, queue)
    ccall((:magmablas_sgemm_batched_strided, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Cfloat}, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, Cfloat, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA, ldda, strideA, dB, lddb, strideB, beta, dC, lddc, strideC, batchCount, queue)
end

"""
    magmablas_sgemm_batched_smallsq(transA, transB, m, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)


### Prototype
```c
void magmablas_sgemm_batched_smallsq( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, float alpha, float const * const * dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, float const * const * dB_array, magma_int_t bi, magma_int_t bj, magma_int_t lddb, float beta, float **dC_array, magma_int_t ci, magma_int_t cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_sgemm_batched_smallsq(transA, transB, m, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
    ccall((:magmablas_sgemm_batched_smallsq, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
end

"""
    magmablas_ssyrk_batched_core(uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)


### Prototype
```c
void magmablas_ssyrk_batched_core( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, float const * const * dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, float const * const * dB_array, magma_int_t bi, magma_int_t bj, magma_int_t lddb, float beta, float **dC_array, magma_int_t ci, magma_int_t cj, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssyrk_batched_core(uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
    ccall((:magmablas_ssyrk_batched_core, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ai, aj, ldda, dB_array, bi, bj, lddb, beta, dC_array, ci, cj, lddc, batchCount, queue)
end

"""
    magmablas_ssyrk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_ssyrk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, float const * const * dA_array, magma_int_t ldda, float beta, float **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssyrk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_ssyrk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magma_ssyrk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magma_ssyrk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, float const * const * dA_array, magma_int_t ldda, float beta, float **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_ssyrk_batched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magma_ssyrk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_ssyr2k_batched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_ssyr2k_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, float const * const * dA_array, magma_int_t ldda, float const * const * dB_array, magma_int_t lddb, float beta, float **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssyr2k_batched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_ssyr2k_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_strtri_diag_batched(uplo, diag, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_strtri_diag_batched( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, float const * const *dA_array, magma_int_t ldda, float **dinvA_array, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_strtri_diag_batched(uplo, diag, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
    ccall((:magmablas_strtri_diag_batched, libmagma), Cvoid, (magma_uplo_t, magma_diag_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), uplo, diag, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
end

"""
    magmablas_strsm_small_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strsm_small_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, float **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strsm_small_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_strsm_small_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_strsm_recursive_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strsm_recursive_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, float **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strsm_recursive_batched(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_strsm_recursive_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_strsm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strsm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, float **dA_array, magma_int_t ldda, float **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strsm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_strsm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_strsm_inv_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strsm_inv_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, float** dA_array, magma_int_t ldda, float** dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_strsm_inv_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_strsm_inv_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_strsm_inv_work_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_strsm_inv_work_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t m, magma_int_t n, float alpha, float** dA_array, magma_int_t ldda, float** dB_array, magma_int_t lddb, float** dX_array, magma_int_t lddx, float** dinvA_array, magma_int_t dinvA_length, float** dA_displ, float** dB_displ, float** dX_displ, float** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_strsm_inv_work_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
    ccall((:magmablas_strsm_inv_work_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
end

"""
    magmablas_strsm_inv_outofplace_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_strsm_inv_outofplace_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t m, magma_int_t n, float alpha, float** dA_array, magma_int_t ldda, float** dB_array, magma_int_t lddb, float** dX_array, magma_int_t lddx, float** dinvA_array, magma_int_t dinvA_length, float** dA_displ, float** dB_displ, float** dX_displ, float** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_strsm_inv_outofplace_batched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
    ccall((:magmablas_strsm_inv_outofplace_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, queue)
end

"""
    magmablas_strsv_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, batchCount, queue)


### Prototype
```c
void magmablas_strsv_batched( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, float** dA_array, magma_int_t ldda, float** dB_array, magma_int_t incb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_strsv_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, batchCount, queue)
    ccall((:magmablas_strsv_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), uplo, transA, diag, n, dA_array, ldda, dB_array, incb, batchCount, queue)
end

"""
    magmablas_strsv_work_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, dX_array, batchCount, queue)


### Prototype
```c
void magmablas_strsv_work_batched( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, float** dA_array, magma_int_t ldda, float** dB_array, magma_int_t incb, float** dX_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_strsv_work_batched(uplo, transA, diag, n, dA_array, ldda, dB_array, incb, dX_array, batchCount, queue)
    ccall((:magmablas_strsv_work_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_queue_t), uplo, transA, diag, n, dA_array, ldda, dB_array, incb, dX_array, batchCount, queue)
end

"""
    magmablas_strsv_outofplace_batched(uplo, transA, diag, n, A_array, lda, b_array, incb, x_array, batchCount, queue, flag)


### Prototype
```c
void magmablas_strsv_outofplace_batched( magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t n, float ** A_array, magma_int_t lda, float **b_array, magma_int_t incb, float **x_array, magma_int_t batchCount, magma_queue_t queue, magma_int_t flag);
```
"""
function magmablas_strsv_outofplace_batched(uplo, transA, diag, n, A_array, lda, b_array, incb, x_array, batchCount, queue, flag)
    ccall((:magmablas_strsv_outofplace_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_queue_t, magma_int_t), uplo, transA, diag, n, A_array, lda, b_array, incb, x_array, batchCount, queue, flag)
end

"""
    magmablas_strmm_batched_core(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strmm_batched_core( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, float **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strmm_batched_core(side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_strmm_batched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_strmm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strmm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, float **dA_array, magma_int_t ldda, float **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strmm_batched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_strmm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ssymm_batched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, roffA, coffA, roffB, coffB, roffC, coffC, batchCount, queue)


### Prototype
```c
void magmablas_ssymm_batched_core( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, float alpha, float **dA_array, magma_int_t ldda, float **dB_array, magma_int_t lddb, float beta, float **dC_array, magma_int_t lddc, magma_int_t roffA, magma_int_t coffA, magma_int_t roffB, magma_int_t coffB, magma_int_t roffC, magma_int_t coffC, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssymm_batched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, roffA, coffA, roffB, coffB, roffC, coffC, batchCount, queue)
    ccall((:magmablas_ssymm_batched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, roffA, coffA, roffB, coffB, roffC, coffC, batchCount, queue)
end

"""
    magmablas_ssymm_batched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_ssymm_batched( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, float alpha, float **dA_array, magma_int_t ldda, float **dB_array, magma_int_t lddb, float beta, float **dC_array, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssymm_batched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_ssymm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_ssymv_batched_core(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, offA, offX, offY, batchCount, queue)


### Prototype
```c
void magmablas_ssymv_batched_core( magma_uplo_t uplo, magma_int_t n, float alpha, float **dA_array, magma_int_t ldda, float **dX_array, magma_int_t incx, float beta, float **dY_array, magma_int_t incy, magma_int_t offA, magma_int_t offX, magma_int_t offY, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssymv_batched_core(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, offA, offX, offY, batchCount, queue)
    ccall((:magmablas_ssymv_batched_core, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, offA, offX, offY, batchCount, queue)
end

"""
    magmablas_ssymv_batched(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_ssymv_batched( magma_uplo_t uplo, magma_int_t n, float alpha, float **dA_array, magma_int_t ldda, float **dX_array, magma_int_t incx, float beta, float **dY_array, magma_int_t incy, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssymv_batched(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, batchCount, queue)
    ccall((:magmablas_ssymv_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, batchCount, queue)
end

"""
    magma_spotrf_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotrf_batched( magma_uplo_t uplo, magma_int_t n, float **dA_array, magma_int_t lda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotrf_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)
    ccall((:magma_spotrf_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, lda, info_array, batchCount, queue)
end

"""
    magma_spotf2_batched(uplo, n, dA_array, ai, aj, lda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotf2_batched( magma_uplo_t uplo, magma_int_t n, float **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotf2_batched(uplo, n, dA_array, ai, aj, lda, info_array, gbstep, batchCount, queue)
    ccall((:magma_spotf2_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, dA_array, ai, aj, lda, info_array, gbstep, batchCount, queue)
end

"""
    magma_spotrf_panel_batched(uplo, n, nb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotrf_panel_batched( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, float** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotrf_panel_batched(uplo, n, nb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_spotrf_panel_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, nb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_spotrf_recpanel_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotrf_recpanel_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t min_recpnb, float** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotrf_recpanel_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_spotrf_recpanel_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_spotrf_rectile_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotrf_rectile_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t min_recpnb, float** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotrf_rectile_batched(uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_spotrf_rectile_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, min_recpnb, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_spotrs_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotrs_batched( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, float **dA_array, magma_int_t ldda, float **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotrs_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magma_spotrs_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, nrhs, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magma_sposv_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, dinfo_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sposv_batched( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, float **dA_array, magma_int_t ldda, float **dB_array, magma_int_t lddb, magma_int_t *dinfo_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sposv_batched(uplo, n, nrhs, dA_array, ldda, dB_array, lddb, dinfo_array, batchCount, queue)
    ccall((:magma_sposv_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, nrhs, dA_array, ldda, dB_array, lddb, dinfo_array, batchCount, queue)
end

"""
    magma_sgetrs_batched(trans, n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetrs_batched( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, float **dA_array, magma_int_t ldda, magma_int_t **dipiv_array, float **dB_array, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetrs_batched(trans, n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, batchCount, queue)
    ccall((:magma_sgetrs_batched, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), trans, n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, batchCount, queue)
end

"""
    magma_slaswp_rowparallel_batched(n, input_array, input_i, input_j, ldi, output_array, output_i, output_j, ldo, k1, k2, pivinfo_array, batchCount, queue)


### Prototype
```c
void magma_slaswp_rowparallel_batched( magma_int_t n, float** input_array, magma_int_t input_i, magma_int_t input_j, magma_int_t ldi, float** output_array, magma_int_t output_i, magma_int_t output_j, magma_int_t ldo, magma_int_t k1, magma_int_t k2, magma_int_t **pivinfo_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_slaswp_rowparallel_batched(n, input_array, input_i, input_j, ldi, output_array, output_i, output_j, ldo, k1, k2, pivinfo_array, batchCount, queue)
    ccall((:magma_slaswp_rowparallel_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, input_array, input_i, input_j, ldi, output_array, output_i, output_j, ldo, k1, k2, pivinfo_array, batchCount, queue)
end

"""
    magma_slaswp_rowserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)


### Prototype
```c
void magma_slaswp_rowserial_batched( magma_int_t n, float** dA_array, magma_int_t lda, magma_int_t k1, magma_int_t k2, magma_int_t **ipiv_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_slaswp_rowserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
    ccall((:magma_slaswp_rowserial_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
end

"""
    magma_slaswp_columnserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)


### Prototype
```c
void magma_slaswp_columnserial_batched( magma_int_t n, float** dA_array, magma_int_t lda, magma_int_t k1, magma_int_t k2, magma_int_t **ipiv_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_slaswp_columnserial_batched(n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
    ccall((:magma_slaswp_columnserial_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, dA_array, lda, k1, k2, ipiv_array, batchCount, queue)
end

"""
    magmablas_stranspose_batched(m, n, dA_array, ldda, dAT_array, lddat, batchCount, queue)


### Prototype
```c
void magmablas_stranspose_batched( magma_int_t m, magma_int_t n, float **dA_array, magma_int_t ldda, float **dAT_array, magma_int_t lddat, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_stranspose_batched(m, n, dA_array, ldda, dAT_array, lddat, batchCount, queue)
    ccall((:magmablas_stranspose_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ldda, dAT_array, lddat, batchCount, queue)
end

"""
    magmablas_slaset_internal_batched(uplo, m, n, offdiag, diag, dAarray, Ai, Aj, ldda, batchCount, queue)


### Prototype
```c
void magmablas_slaset_internal_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, float offdiag, float diag, magmaFloat_ptr dAarray[], magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_slaset_internal_batched(uplo, m, n, offdiag, diag, dAarray, Ai, Aj, ldda, batchCount, queue)
    ccall((:magmablas_slaset_internal_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Cfloat, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, offdiag, diag, dAarray, Ai, Aj, ldda, batchCount, queue)
end

"""
    magmablas_slaset_batched(uplo, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)


### Prototype
```c
void magmablas_slaset_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, float offdiag, float diag, magmaFloat_ptr dAarray[], magma_int_t ldda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_slaset_batched(uplo, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
    ccall((:magmablas_slaset_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Cfloat, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
end

"""
    magma_sgesv_batched_small(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgesv_batched_small( magma_int_t n, magma_int_t nrhs, float** dA_array, magma_int_t ldda, magma_int_t** dipiv_array, float **dB_array, magma_int_t lddb, magma_int_t* dinfo_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_sgesv_batched_small(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
    ccall((:magma_sgesv_batched_small, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
end

"""
    magma_sgetf2_batched(m, n, dA_array, ai, aj, lda, ipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetf2_batched( magma_int_t m, magma_int_t n, float **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t **ipiv_array, magma_int_t **dpivinfo_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetf2_batched(m, n, dA_array, ai, aj, lda, ipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_sgetf2_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, lda, ipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_sgetrf_recpanel_batched(m, n, min_recpnb, dA_array, ai, aj, ldda, dipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetrf_recpanel_batched( magma_int_t m, magma_int_t n, magma_int_t min_recpnb, float** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t** dipiv_array, magma_int_t** dpivinfo_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetrf_recpanel_batched(m, n, min_recpnb, dA_array, ai, aj, ldda, dipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_sgetrf_recpanel_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, min_recpnb, dA_array, ai, aj, ldda, dipiv_array, dpivinfo_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_sgetrf_batched(m, n, dA_array, lda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetrf_batched( magma_int_t m, magma_int_t n, float **dA_array, magma_int_t lda, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetrf_batched(m, n, dA_array, lda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_sgetrf_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, lda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_sgetf2_fused_batched(m, n, dA_array, ai, aj, ldda, dipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetf2_fused_batched( magma_int_t m, magma_int_t n, float **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t **dipiv_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetf2_fused_batched(m, n, dA_array, ai, aj, ldda, dipiv_array, info_array, batchCount, queue)
    ccall((:magma_sgetf2_fused_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, ldda, dipiv_array, info_array, batchCount, queue)
end

"""
    magma_sgetrf_batched_smallsq_noshfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetrf_batched_smallsq_noshfl( magma_int_t n, float** dA_array, magma_int_t ldda, magma_int_t** ipiv_array, magma_int_t* info_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_sgetrf_batched_smallsq_noshfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_sgetrf_batched_smallsq_noshfl, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_sgetrf_batched_smallsq_shfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetrf_batched_smallsq_shfl( magma_int_t n, float** dA_array, magma_int_t ldda, magma_int_t** ipiv_array, magma_int_t* info_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_sgetrf_batched_smallsq_shfl(n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_sgetrf_batched_smallsq_shfl, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_sgetri_outofplace_batched(n, dA_array, ldda, dipiv_array, dinvA_array, lddia, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetri_outofplace_batched( magma_int_t n, float **dA_array, magma_int_t ldda, magma_int_t **dipiv_array, float **dinvA_array, magma_int_t lddia, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetri_outofplace_batched(n, dA_array, ldda, dipiv_array, dinvA_array, lddia, info_array, batchCount, queue)
    ccall((:magma_sgetri_outofplace_batched, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, ldda, dipiv_array, dinvA_array, lddia, info_array, batchCount, queue)
end

"""
    magma_sdisplace_intpointers(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_sdisplace_intpointers( magma_int_t **output_array, magma_int_t **input_array, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sdisplace_intpointers(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_sdisplace_intpointers, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magmablas_isamax_atomic_batched(n, x_array, incx, max_id_array, batchCount)


### Prototype
```c
void magmablas_isamax_atomic_batched( magma_int_t n, float** x_array, magma_int_t incx, magma_int_t **max_id_array, magma_int_t batchCount);
```
"""
function magmablas_isamax_atomic_batched(n, x_array, incx, max_id_array, batchCount)
    ccall((:magmablas_isamax_atomic_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t), n, x_array, incx, max_id_array, batchCount)
end

"""
    magmablas_isamax_tree_batched(n, x_array, incx, max_id_array, batchCount)


### Prototype
```c
void magmablas_isamax_tree_batched( magma_int_t n, float** x_array, magma_int_t incx, magma_int_t **max_id_array, magma_int_t batchCount);
```
"""
function magmablas_isamax_tree_batched(n, x_array, incx, max_id_array, batchCount)
    ccall((:magmablas_isamax_tree_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t), n, x_array, incx, max_id_array, batchCount)
end

"""
    magmablas_isamax_batched(n, x_array, incx, max_id_array, batchCount)


### Prototype
```c
void magmablas_isamax_batched( magma_int_t n, float** x_array, magma_int_t incx, magma_int_t **max_id_array, magma_int_t batchCount);
```
"""
function magmablas_isamax_batched(n, x_array, incx, max_id_array, batchCount)
    ccall((:magmablas_isamax_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t), n, x_array, incx, max_id_array, batchCount)
end

"""
    magmablas_isamax(n, x, incx, max_id)


### Prototype
```c
void magmablas_isamax( magma_int_t n, float* x, magma_int_t incx, magma_int_t *max_id);
```
"""
function magmablas_isamax(n, x, incx, max_id)
    ccall((:magmablas_isamax, libmagma), Cvoid, (magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), n, x, incx, max_id)
end

"""
    magma_isamax_batched(length, x_array, xi, xj, lda, incx, ipiv_array, ipiv_i, step, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_isamax_batched( magma_int_t length, float **x_array, magma_int_t xi, magma_int_t xj, magma_int_t lda, magma_int_t incx, magma_int_t** ipiv_array, magma_int_t ipiv_i, magma_int_t step, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_isamax_batched(length, x_array, xi, xj, lda, incx, ipiv_array, ipiv_i, step, gbstep, info_array, batchCount, queue)
    ccall((:magma_isamax_batched, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), length, x_array, xi, xj, lda, incx, ipiv_array, ipiv_i, step, gbstep, info_array, batchCount, queue)
end

"""
    magma_sswap_batched(n, x_array, xi, xj, incx, step, ipiv_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sswap_batched( magma_int_t n, float **x_array, magma_int_t xi, magma_int_t xj, magma_int_t incx, magma_int_t step, magma_int_t** ipiv_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sswap_batched(n, x_array, xi, xj, incx, step, ipiv_array, batchCount, queue)
    ccall((:magma_sswap_batched, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_queue_t), n, x_array, xi, xj, incx, step, ipiv_array, batchCount, queue)
end

"""
    magma_sscal_sger_batched(m, n, dA_array, ai, aj, lda, info_array, step, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_sscal_sger_batched( magma_int_t m, magma_int_t n, float **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t *info_array, magma_int_t step, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sscal_sger_batched(m, n, dA_array, ai, aj, lda, info_array, step, gbstep, batchCount, queue)
    ccall((:magma_sscal_sger_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, lda, info_array, step, gbstep, batchCount, queue)
end

"""
    magma_scomputecolumn_batched(m, paneloffset, step, dA_array, lda, ai, aj, ipiv_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_scomputecolumn_batched( magma_int_t m, magma_int_t paneloffset, magma_int_t step, float **dA_array, magma_int_t lda, magma_int_t ai, magma_int_t aj, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_scomputecolumn_batched(m, paneloffset, step, dA_array, lda, ai, aj, ipiv_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_scomputecolumn_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, paneloffset, step, dA_array, lda, ai, aj, ipiv_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_sgetf2trsm_batched(ib, n, dA_array, j, lda, batchCount, queue)


### Prototype
```c
void magma_sgetf2trsm_batched( magma_int_t ib, magma_int_t n, float **dA_array, magma_int_t j, magma_int_t lda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetf2trsm_batched(ib, n, dA_array, j, lda, batchCount, queue)
    ccall((:magma_sgetf2trsm_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), ib, n, dA_array, j, lda, batchCount, queue)
end

"""
    magma_sgetf2_nopiv_internal_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetf2_nopiv_internal_batched( magma_int_t m, magma_int_t n, float** dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t* info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_sgetf2_nopiv_internal_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_sgetf2_nopiv_internal_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_sgetf2_nopiv_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetf2_nopiv_batched( magma_int_t m, magma_int_t n, float **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t ldda, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetf2_nopiv_batched(m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
    ccall((:magma_sgetf2_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, ai, aj, ldda, info_array, gbstep, batchCount, queue)
end

"""
    magma_sgetrf_recpanel_nopiv_batched(m, n, min_recpnb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW1_displ, dW2_displ, dW3_displ, dW4_displ, dW5_displ, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetrf_recpanel_nopiv_batched( magma_int_t m, magma_int_t n, magma_int_t min_recpnb, float** dA_array, magma_int_t ldda, float** dX_array, magma_int_t dX_length, float** dinvA_array, magma_int_t dinvA_length, float** dW1_displ, float** dW2_displ, float** dW3_displ, float** dW4_displ, float** dW5_displ, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetrf_recpanel_nopiv_batched(m, n, min_recpnb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW1_displ, dW2_displ, dW3_displ, dW4_displ, dW5_displ, info_array, gbstep, batchCount, queue)
    ccall((:magma_sgetrf_recpanel_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, min_recpnb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW1_displ, dW2_displ, dW3_displ, dW4_displ, dW5_displ, info_array, gbstep, batchCount, queue)
end

"""
    magma_sgetrf_nopiv_batched(m, n, dA_array, lda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetrf_nopiv_batched( magma_int_t m, magma_int_t n, float **dA_array, magma_int_t lda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetrf_nopiv_batched(m, n, dA_array, lda, info_array, batchCount, queue)
    ccall((:magma_sgetrf_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, lda, info_array, batchCount, queue)
end

"""
    magma_sgetrs_nopiv_batched(trans, n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetrs_nopiv_batched( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, float **dA_array, magma_int_t ldda, float **dB_array, magma_int_t lddb, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetrs_nopiv_batched(trans, n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
    ccall((:magma_sgetrs_nopiv_batched, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
end

"""
    magma_sgesv_nopiv_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgesv_nopiv_batched( magma_int_t n, magma_int_t nrhs, float **dA_array, magma_int_t ldda, float **dB_array, magma_int_t lddb, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgesv_nopiv_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
    ccall((:magma_sgesv_nopiv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
end

"""
    magma_sgesv_rbt_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgesv_rbt_batched( magma_int_t n, magma_int_t nrhs, float **dA_array, magma_int_t ldda, float **dB_array, magma_int_t lddb, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgesv_rbt_batched(n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
    ccall((:magma_sgesv_rbt_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dB_array, lddb, info_array, batchCount, queue)
end

"""
    magma_sgesv_batched(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgesv_batched( magma_int_t n, magma_int_t nrhs, float **dA_array, magma_int_t ldda, magma_int_t **dipiv_array, float **dB_array, magma_int_t lddb, magma_int_t *dinfo_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgesv_batched(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
    ccall((:magma_sgesv_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, PtrOrCuPtr{PtrOrCuPtr{Cfloat}}, magma_int_t, PtrOrCuPtr{PtrOrCuPtr{magma_int_t}}, PtrOrCuPtr{PtrOrCuPtr{Cfloat}}, magma_int_t, PtrOrCuPtr{magma_int_t}, magma_int_t, magma_queue_t), n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batchCount, queue)
end

"""
    magma_sgerbt_batched(gen, n, nrhs, dA_array, ldda, dB_array, lddb, U, V, info, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgerbt_batched( magma_bool_t gen, magma_int_t n, magma_int_t nrhs, float **dA_array, magma_int_t ldda, float **dB_array, magma_int_t lddb, float *U, float *V, magma_int_t *info, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgerbt_batched(gen, n, nrhs, dA_array, ldda, dB_array, lddb, U, V, info, batchCount, queue)
    ccall((:magma_sgerbt_batched, libmagma), magma_int_t, (magma_bool_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), gen, n, nrhs, dA_array, ldda, dB_array, lddb, U, V, info, batchCount, queue)
end

"""
    magmablas_sprbt_batched(n, dA_array, ldda, du, dv, batchCount, queue)


### Prototype
```c
void magmablas_sprbt_batched( magma_int_t n, float **dA_array, magma_int_t ldda, float *du, float *dv, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_sprbt_batched(n, dA_array, ldda, du, dv, batchCount, queue)
    ccall((:magmablas_sprbt_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, magma_queue_t), n, dA_array, ldda, du, dv, batchCount, queue)
end

"""
    magmablas_sprbt_mv_batched(n, dv, db_array, batchCount, queue)


### Prototype
```c
void magmablas_sprbt_mv_batched( magma_int_t n, float *dv, float **db_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_sprbt_mv_batched(n, dv, db_array, batchCount, queue)
    ccall((:magmablas_sprbt_mv_batched, libmagma), Cvoid, (magma_int_t, Ptr{Cfloat}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_queue_t), n, dv, db_array, batchCount, queue)
end

"""
    magmablas_sprbt_mtv_batched(n, du, db_array, batchCount, queue)


### Prototype
```c
void magmablas_sprbt_mtv_batched( magma_int_t n, float *du, float **db_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_sprbt_mtv_batched(n, du, db_array, batchCount, queue)
    ccall((:magmablas_sprbt_mtv_batched, libmagma), Cvoid, (magma_int_t, Ptr{Cfloat}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_queue_t), n, du, db_array, batchCount, queue)
end

"""
    magmablas_sgeadd_batched(m, n, alpha, dAarray, ldda, dBarray, lddb, batchCount, queue)


### Prototype
```c
void magmablas_sgeadd_batched( magma_int_t m, magma_int_t n, float alpha, magmaFloat_const_ptr const dAarray[], magma_int_t ldda, magmaFloat_ptr dBarray[], magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_sgeadd_batched(m, n, alpha, dAarray, ldda, dBarray, lddb, batchCount, queue)
    ccall((:magmablas_sgeadd_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloat_const_ptr}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_queue_t), m, n, alpha, dAarray, ldda, dBarray, lddb, batchCount, queue)
end

"""
    magmablas_slacpy_internal_batched(uplo, m, n, dAarray, Ai, Aj, ldda, dBarray, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_slacpy_internal_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloat_const_ptr const dAarray[], magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, magmaFloat_ptr dBarray[], magma_int_t Bi, magma_int_t Bj, magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_slacpy_internal_batched(uplo, m, n, dAarray, Ai, Aj, ldda, dBarray, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_slacpy_internal_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloat_const_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, dAarray, Ai, Aj, ldda, dBarray, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_slacpy_batched(uplo, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)


### Prototype
```c
void magmablas_slacpy_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloat_const_ptr const dAarray[], magma_int_t ldda, magmaFloat_ptr dBarray[], magma_int_t lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_slacpy_batched(uplo, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
    ccall((:magmablas_slacpy_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloat_const_ptr}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_queue_t), uplo, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
end

"""
    magmablas_sgemv_batched_template(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_sgemv_batched_template( magma_trans_t trans, magma_int_t m, magma_int_t n, float alpha, magmaFloat_ptr dA_array[], magma_int_t ldda, magmaFloat_ptr dx_array[], magma_int_t incx, float beta, magmaFloat_ptr dy_array[], magma_int_t incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_sgemv_batched_template(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_sgemv_batched_template, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_sgemv_batched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_sgemv_batched( magma_trans_t trans, magma_int_t m, magma_int_t n, float alpha, magmaFloat_ptr dA_array[], magma_int_t ldda, magmaFloat_ptr dx_array[], magma_int_t incx, float beta, magmaFloat_ptr dy_array[], magma_int_t incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_sgemv_batched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_sgemv_batched, libmagma), Cvoid, (magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Cfloat, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magma_sgeqrf_batched_smallsq(n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgeqrf_batched_smallsq( magma_int_t n, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_sgeqrf_batched_smallsq(n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
    ccall((:magma_sgeqrf_batched_smallsq, libmagma), magma_int_t, (magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
end

"""
    magma_sgeqrf_batched(m, n, dA_array, lda, dtau_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgeqrf_batched( magma_int_t m, magma_int_t n, float **dA_array, magma_int_t lda, float **dtau_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgeqrf_batched(m, n, dA_array, lda, dtau_array, info_array, batchCount, queue)
    ccall((:magma_sgeqrf_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, lda, dtau_array, info_array, batchCount, queue)
end

"""
    magma_sgeqrf_expert_batched(m, n, nb, dA_array, ldda, dR_array, lddr, dT_array, lddt, dtau_array, provide_RT, dW_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgeqrf_expert_batched( magma_int_t m, magma_int_t n, magma_int_t nb, float **dA_array, magma_int_t ldda, float **dR_array, magma_int_t lddr, float **dT_array, magma_int_t lddt, float **dtau_array, magma_int_t provide_RT, float **dW_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgeqrf_expert_batched(m, n, nb, dA_array, ldda, dR_array, lddr, dT_array, lddt, dtau_array, provide_RT, dW_array, info_array, batchCount, queue)
    ccall((:magma_sgeqrf_expert_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, nb, dA_array, ldda, dR_array, lddr, dT_array, lddt, dtau_array, provide_RT, dW_array, info_array, batchCount, queue)
end

"""
    magma_sgeqrf_batched_v4(m, n, dA_array, lda, tau_array, info_array, batchCount)


### Prototype
```c
magma_int_t magma_sgeqrf_batched_v4( magma_int_t m, magma_int_t n, float **dA_array, magma_int_t lda, float **tau_array, magma_int_t *info_array, magma_int_t batchCount);
```
"""
function magma_sgeqrf_batched_v4(m, n, dA_array, lda, tau_array, info_array, batchCount)
    ccall((:magma_sgeqrf_batched_v4, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t), m, n, dA_array, lda, tau_array, info_array, batchCount)
end

"""
    magma_sgeqrf_panel_fused_update_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dR_array, Ri, Rj, lddr, info_array, separate_R_V, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgeqrf_panel_fused_update_batched( magma_int_t m, magma_int_t n, magma_int_t nb, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float** tau_array, magma_int_t taui, float** dR_array, magma_int_t Ri, magma_int_t Rj, magma_int_t lddr, magma_int_t *info_array, magma_int_t separate_R_V, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgeqrf_panel_fused_update_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dR_array, Ri, Rj, lddr, info_array, separate_R_V, batchCount, queue)
    ccall((:magma_sgeqrf_panel_fused_update_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dR_array, Ri, Rj, lddr, info_array, separate_R_V, batchCount, queue)
end

"""
    magma_sgeqrf_panel_internal_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dT_array, Ti, Tj, lddt, dR_array, Ri, Rj, lddr, dwork_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgeqrf_panel_internal_batched( magma_int_t m, magma_int_t n, magma_int_t nb, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float** tau_array, magma_int_t taui, float** dT_array, magma_int_t Ti, magma_int_t Tj, magma_int_t lddt, float** dR_array, magma_int_t Ri, magma_int_t Rj, magma_int_t lddr, float** dwork_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgeqrf_panel_internal_batched(m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dT_array, Ti, Tj, lddt, dR_array, Ri, Rj, lddr, dwork_array, info_array, batchCount, queue)
    ccall((:magma_sgeqrf_panel_internal_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, nb, dA_array, Ai, Aj, ldda, tau_array, taui, dT_array, Ti, Tj, lddt, dR_array, Ri, Rj, lddr, dwork_array, info_array, batchCount, queue)
end

"""
    magma_sgeqrf_panel_batched(m, n, nb, dA_array, ldda, tau_array, dT_array, ldt, dR_array, ldr, dwork_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgeqrf_panel_batched( magma_int_t m, magma_int_t n, magma_int_t nb, float** dA_array, magma_int_t ldda, float** tau_array, float** dT_array, magma_int_t ldt, float** dR_array, magma_int_t ldr, float** dwork_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgeqrf_panel_batched(m, n, nb, dA_array, ldda, tau_array, dT_array, ldt, dR_array, ldr, dwork_array, info_array, batchCount, queue)
    ccall((:magma_sgeqrf_panel_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, nb, dA_array, ldda, tau_array, dT_array, ldt, dR_array, ldr, dwork_array, info_array, batchCount, queue)
end

"""
    magma_sgels_batched(trans, m, n, nrhs, dA_array, ldda, dB_array, lddb, hwork, lwork, info, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgels_batched( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, float **dA_array, magma_int_t ldda, float **dB_array, magma_int_t lddb, float *hwork, magma_int_t lwork, magma_int_t *info, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgels_batched(trans, m, n, nrhs, dA_array, ldda, dB_array, lddb, hwork, lwork, info, batchCount, queue)
    ccall((:magma_sgels_batched, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, nrhs, dA_array, ldda, dB_array, lddb, hwork, lwork, info, batchCount, queue)
end

"""
    magma_sgeqr2_fused_reg_tall_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgeqr2_fused_reg_tall_batched( magma_int_t m, magma_int_t n, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_sgeqr2_fused_reg_tall_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
    ccall((:magma_sgeqr2_fused_reg_tall_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
end

"""
    magma_sgeqr2_fused_reg_medium_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgeqr2_fused_reg_medium_batched( magma_int_t m, magma_int_t n, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_sgeqr2_fused_reg_medium_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
    ccall((:magma_sgeqr2_fused_reg_medium_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
end

"""
    magma_sgeqr2_fused_reg_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgeqr2_fused_reg_batched( magma_int_t m, magma_int_t n, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_sgeqr2_fused_reg_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
    ccall((:magma_sgeqr2_fused_reg_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, check_launch_only, batchCount, queue)
end

"""
    magma_sgeqr2_fused_sm_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, nthreads, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgeqr2_fused_sm_batched( magma_int_t m, magma_int_t n, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float **dtau_array, magma_int_t taui, magma_int_t* info_array, magma_int_t nthreads, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_sgeqr2_fused_sm_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, nthreads, check_launch_only, batchCount, queue)
    ccall((:magma_sgeqr2_fused_sm_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, nthreads, check_launch_only, batchCount, queue)
end

"""
    magma_sgeqr2_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgeqr2_batched( magma_int_t m, magma_int_t n, float **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float **dtau_array, magma_int_t taui, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgeqr2_batched(m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
    ccall((:magma_sgeqr2_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, Ai, Aj, ldda, dtau_array, taui, info_array, batchCount, queue)
end

"""
    magma_slarf_fused_reg_tall_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_slarf_fused_reg_tall_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, float **dtau_array, magma_int_t taui, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_slarf_fused_reg_tall_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
    ccall((:magma_slarf_fused_reg_tall_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
end

"""
    magma_slarf_fused_reg_medium_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_slarf_fused_reg_medium_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, float **dtau_array, magma_int_t taui, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_slarf_fused_reg_medium_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
    ccall((:magma_slarf_fused_reg_medium_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
end

"""
    magma_slarf_fused_reg_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_slarf_fused_reg_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, float **dtau_array, magma_int_t taui, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_slarf_fused_reg_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
    ccall((:magma_slarf_fused_reg_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, check_launch_only, batchCount, queue)
end

"""
    magma_slarf_fused_sm_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, nthreads, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_slarf_fused_sm_batched( magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t ib, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t ldda, float** dV_array, magma_int_t Vi, magma_int_t Vj, magma_int_t lddv, float **dtau_array, magma_int_t taui, magma_int_t nthreads, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_slarf_fused_sm_batched(m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, nthreads, check_launch_only, batchCount, queue)
    ccall((:magma_slarf_fused_sm_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, nb, ib, dA_array, Ai, Aj, ldda, dV_array, Vi, Vj, lddv, dtau_array, taui, nthreads, check_launch_only, batchCount, queue)
end

"""
    magma_slarfb_gemm_internal_batched(side, trans, direct, storev, m, n, k, dV_array, vi, vj, lddv, dT_array, Ti, Tj, lddt, dC_array, Ci, Cj, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)


### Prototype
```c
magma_int_t magma_slarfb_gemm_internal_batched( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloat_const_ptr dV_array[], magma_int_t vi, magma_int_t vj, magma_int_t lddv, magmaFloat_const_ptr dT_array[], magma_int_t Ti, magma_int_t Tj, magma_int_t lddt, magmaFloat_ptr dC_array[], magma_int_t Ci, magma_int_t Cj, magma_int_t lddc, magmaFloat_ptr dwork_array[], magma_int_t ldwork, magmaFloat_ptr dworkvt_array[], magma_int_t ldworkvt, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_slarfb_gemm_internal_batched(side, trans, direct, storev, m, n, k, dV_array, vi, vj, lddv, dT_array, Ti, Tj, lddt, dC_array, Ci, Cj, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
    ccall((:magma_slarfb_gemm_internal_batched, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloat_const_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloat_const_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_queue_t), side, trans, direct, storev, m, n, k, dV_array, vi, vj, lddv, dT_array, Ti, Tj, lddt, dC_array, Ci, Cj, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
end

"""
    magma_slarfb_gemm_batched(side, trans, direct, storev, m, n, k, dV_array, lddv, dT_array, lddt, dC_array, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)


### Prototype
```c
magma_int_t magma_slarfb_gemm_batched( magma_side_t side, magma_trans_t trans, magma_direct_t direct, magma_storev_t storev, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloat_const_ptr dV_array[], magma_int_t lddv, magmaFloat_const_ptr dT_array[], magma_int_t lddt, magmaFloat_ptr dC_array[], magma_int_t lddc, magmaFloat_ptr dwork_array[], magma_int_t ldwork, magmaFloat_ptr dworkvt_array[], magma_int_t ldworkvt, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_slarfb_gemm_batched(side, trans, direct, storev, m, n, k, dV_array, lddv, dT_array, lddt, dC_array, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
    ccall((:magma_slarfb_gemm_batched, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_direct_t, magma_storev_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloat_const_ptr}, magma_int_t, Ptr{magmaFloat_const_ptr}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_queue_t), side, trans, direct, storev, m, n, k, dV_array, lddv, dT_array, lddt, dC_array, lddc, dwork_array, ldwork, dworkvt_array, ldworkvt, batchCount, queue)
end

"""
    magma_slarft_internal_batched(n, k, stair_T, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, work_array, lwork, batchCount, queue)


### Prototype
```c
magma_int_t magma_slarft_internal_batched( magma_int_t n, magma_int_t k, magma_int_t stair_T, float **v_array, magma_int_t vi, magma_int_t vj, magma_int_t ldv, float **tau_array, magma_int_t taui, float **T_array, magma_int_t Ti, magma_int_t Tj, magma_int_t ldt, float **work_array, magma_int_t lwork, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_slarft_internal_batched(n, k, stair_T, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, work_array, lwork, batchCount, queue)
    ccall((:magma_slarft_internal_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), n, k, stair_T, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, work_array, lwork, batchCount, queue)
end

"""
    magma_slarft_batched(n, k, stair_T, v_array, ldv, tau_array, T_array, ldt, work_array, lwork, batchCount, queue)


### Prototype
```c
magma_int_t magma_slarft_batched( magma_int_t n, magma_int_t k, magma_int_t stair_T, float **v_array, magma_int_t ldv, float **tau_array, float **T_array, magma_int_t ldt, float **work_array, magma_int_t lwork, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_slarft_batched(n, k, stair_T, v_array, ldv, tau_array, T_array, ldt, work_array, lwork, batchCount, queue)
    ccall((:magma_slarft_batched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), n, k, stair_T, v_array, ldv, tau_array, T_array, ldt, work_array, lwork, batchCount, queue)
end

"""
    magma_slarft_sm32x32_batched(n, k, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, batchCount, queue)


### Prototype
```c
void magma_slarft_sm32x32_batched( magma_int_t n, magma_int_t k, float **v_array, magma_int_t vi, magma_int_t vj, magma_int_t ldv, float **tau_array, magma_int_t taui, float **T_array, magma_int_t Ti, magma_int_t Tj, magma_int_t ldt, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_slarft_sm32x32_batched(n, k, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, batchCount, queue)
    ccall((:magma_slarft_sm32x32_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, k, v_array, vi, vj, ldv, tau_array, taui, T_array, Ti, Tj, ldt, batchCount, queue)
end

"""
    magmablas_slarft_recstrmv_sm32x32(m, n, tau, Trec, ldtrec, Ttri, ldttri, queue)


### Prototype
```c
void magmablas_slarft_recstrmv_sm32x32( magma_int_t m, magma_int_t n, float *tau, float *Trec, magma_int_t ldtrec, float *Ttri, magma_int_t ldttri, magma_queue_t queue);
```
"""
function magmablas_slarft_recstrmv_sm32x32(m, n, tau, Trec, ldtrec, Ttri, ldttri, queue)
    ccall((:magmablas_slarft_recstrmv_sm32x32, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t), m, n, tau, Trec, ldtrec, Ttri, ldttri, queue)
end

"""
    magmablas_slarft_recstrmv_sm32x32_batched(m, n, tau_array, taui, Trec_array, Treci, Trecj, ldtrec, Ttri_array, Ttrii, Ttrij, ldttri, batchCount, queue)


### Prototype
```c
void magmablas_slarft_recstrmv_sm32x32_batched( magma_int_t m, magma_int_t n, float **tau_array, magma_int_t taui, float **Trec_array, magma_int_t Treci, magma_int_t Trecj, magma_int_t ldtrec, float **Ttri_array, magma_int_t Ttrii, magma_int_t Ttrij, magma_int_t ldttri, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_slarft_recstrmv_sm32x32_batched(m, n, tau_array, taui, Trec_array, Treci, Trecj, ldtrec, Ttri_array, Ttrii, Ttrij, ldttri, batchCount, queue)
    ccall((:magmablas_slarft_recstrmv_sm32x32_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, tau_array, taui, Trec_array, Treci, Trecj, ldtrec, Ttri_array, Ttrii, Ttrij, ldttri, batchCount, queue)
end

"""
    magmablas_slarft_strmv_sm32x32(m, n, tau, Tin, ldtin, Tout, ldtout, queue)


### Prototype
```c
void magmablas_slarft_strmv_sm32x32( magma_int_t m, magma_int_t n, float *tau, float *Tin, magma_int_t ldtin, float *Tout, magma_int_t ldtout, magma_queue_t queue);
```
"""
function magmablas_slarft_strmv_sm32x32(m, n, tau, Tin, ldtin, Tout, ldtout, queue)
    ccall((:magmablas_slarft_strmv_sm32x32, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t), m, n, tau, Tin, ldtin, Tout, ldtout, queue)
end

"""
    magmablas_slarft_strmv_sm32x32_batched(m, n, tau_array, taui, Tin_array, Tini, Tinj, ldtin, Tout_array, Touti, Toutj, ldtout, batchCount, queue)


### Prototype
```c
void magmablas_slarft_strmv_sm32x32_batched( magma_int_t m, magma_int_t n, float **tau_array, magma_int_t taui, float **Tin_array, magma_int_t Tini, magma_int_t Tinj, magma_int_t ldtin, float **Tout_array, magma_int_t Touti, magma_int_t Toutj, magma_int_t ldtout, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_slarft_strmv_sm32x32_batched(m, n, tau_array, taui, Tin_array, Tini, Tinj, ldtin, Tout_array, Touti, Toutj, ldtout, batchCount, queue)
    ccall((:magmablas_slarft_strmv_sm32x32_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), m, n, tau_array, taui, Tin_array, Tini, Tinj, ldtin, Tout_array, Touti, Toutj, ldtout, batchCount, queue)
end

"""
    magmablas_snrm2_cols_batched(m, n, dA_array, lda, dxnorm_array, batchCount)


### Prototype
```c
void magmablas_snrm2_cols_batched( magma_int_t m, magma_int_t n, float **dA_array, magma_int_t lda, float **dxnorm_array, magma_int_t batchCount);
```
"""
function magmablas_snrm2_cols_batched(m, n, dA_array, lda, dxnorm_array, batchCount)
    ccall((:magmablas_snrm2_cols_batched, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t), m, n, dA_array, lda, dxnorm_array, batchCount)
end

"""
    magma_slarfgx_batched(n, dx0_array, dx_array, dtau_array, dxnorm_array, dR_array, it, batchCount)


### Prototype
```c
void magma_slarfgx_batched( magma_int_t n, float **dx0_array, float **dx_array, float **dtau_array, float **dxnorm_array, float **dR_array, magma_int_t it, magma_int_t batchCount);
```
"""
function magma_slarfgx_batched(n, dx0_array, dx_array, dtau_array, dxnorm_array, dR_array, it, batchCount)
    ccall((:magma_slarfgx_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t), n, dx0_array, dx_array, dtau_array, dxnorm_array, dR_array, it, batchCount)
end

"""
    magma_slarfx_batched_v4(m, n, v_array, tau_array, C_array, ldc, xnorm_array, step, batchCount)


### Prototype
```c
void magma_slarfx_batched_v4( magma_int_t m, magma_int_t n, float **v_array, float **tau_array, float **C_array, magma_int_t ldc, float **xnorm_array, magma_int_t step, magma_int_t batchCount);
```
"""
function magma_slarfx_batched_v4(m, n, v_array, tau_array, C_array, ldc, xnorm_array, step, batchCount)
    ccall((:magma_slarfx_batched_v4, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t), m, n, v_array, tau_array, C_array, ldc, xnorm_array, step, batchCount)
end

"""
    magmablas_slarfg_batched(n, dalpha_array, dx_array, incx, dtau_array, batchCount)


### Prototype
```c
void magmablas_slarfg_batched( magma_int_t n, float** dalpha_array, float** dx_array, magma_int_t incx, float** dtau_array, magma_int_t batchCount );
```
"""
function magmablas_slarfg_batched(n, dalpha_array, dx_array, incx, dtau_array, batchCount)
    ccall((:magmablas_slarfg_batched, libmagma), Cvoid, (magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t), n, dalpha_array, dx_array, incx, dtau_array, batchCount)
end

"""
    magma_spotrf_lpout_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotrf_lpout_batched( magma_uplo_t uplo, magma_int_t n, float **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotrf_lpout_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
    ccall((:magma_spotrf_lpout_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
end

"""
    magma_spotrf_lpin_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotrf_lpin_batched( magma_uplo_t uplo, magma_int_t n, float **dA_array, magma_int_t ai, magma_int_t aj, magma_int_t lda, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotrf_lpin_batched(uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
    ccall((:magma_spotrf_lpin_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, ai, aj, lda, gbstep, info_array, batchCount, queue)
end

"""
    magma_spotrf_v33_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotrf_v33_batched( magma_uplo_t uplo, magma_int_t n, float **dA_array, magma_int_t lda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotrf_v33_batched(uplo, n, dA_array, lda, info_array, batchCount, queue)
    ccall((:magma_spotrf_v33_batched, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, lda, info_array, batchCount, queue)
end

"""
    blas_slacpy_batched(uplo, m, n, hA_array, lda, hB_array, ldb, batchCount)

host interface
### Prototype
```c
void blas_slacpy_batched( magma_uplo_t uplo, magma_int_t m, magma_int_t n, float const * const * hA_array, magma_int_t lda, float **hB_array, magma_int_t ldb, magma_int_t batchCount );
```
"""
function blas_slacpy_batched(uplo, m, n, hA_array, lda, hB_array, ldb, batchCount)
    ccall((:blas_slacpy_batched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t), uplo, m, n, hA_array, lda, hB_array, ldb, batchCount)
end

"""
    blas_sgemm_batched(transA, transB, m, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_sgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, float alpha, float const * const * hA_array, magma_int_t lda, float const * const * hB_array, magma_int_t ldb, float beta, float **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_sgemm_batched(transA, transB, m, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
    ccall((:blas_sgemm_batched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t), transA, transB, m, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
end

"""
    blas_strsm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)


### Prototype
```c
void blas_strsm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, float **hA_array, magma_int_t lda, float **hB_array, magma_int_t ldb, magma_int_t batchCount );
```
"""
function blas_strsm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
    ccall((:blas_strsm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t), side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
end

"""
    blas_strmm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)


### Prototype
```c
void blas_strmm_batched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, float **hA_array, magma_int_t lda, float **hB_array, magma_int_t ldb, magma_int_t batchCount );
```
"""
function blas_strmm_batched(side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
    ccall((:blas_strmm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t), side, uplo, transA, diag, m, n, alpha, hA_array, lda, hB_array, ldb, batchCount)
end

"""
    blas_ssymm_batched(side, uplo, m, n, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_ssymm_batched( magma_side_t side, magma_uplo_t uplo, magma_int_t m, magma_int_t n, float alpha, float **hA_array, magma_int_t lda, float **hB_array, magma_int_t ldb, float beta, float **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_ssymm_batched(side, uplo, m, n, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
    ccall((:blas_ssymm_batched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t), side, uplo, m, n, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
end

"""
    blas_ssyrk_batched(uplo, trans, n, k, alpha, hA_array, lda, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_ssyrk_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, float const * const * hA_array, magma_int_t lda, float beta, float **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_ssyrk_batched(uplo, trans, n, k, alpha, hA_array, lda, beta, hC_array, ldc, batchCount)
    ccall((:blas_ssyrk_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t), uplo, trans, n, k, alpha, hA_array, lda, beta, hC_array, ldc, batchCount)
end

"""
    blas_ssyr2k_batched(uplo, trans, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)


### Prototype
```c
void blas_ssyr2k_batched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t n, magma_int_t k, float alpha, float const * const * hA_array, magma_int_t lda, float const * const * hB_array, magma_int_t ldb, float beta, float **hC_array, magma_int_t ldc, magma_int_t batchCount );
```
"""
function blas_ssyr2k_batched(uplo, trans, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
    ccall((:blas_ssyr2k_batched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t), uplo, trans, n, k, alpha, hA_array, lda, hB_array, ldb, beta, hC_array, ldc, batchCount)
end

"""
    sset_stepinit_ipiv(ipiv_array, pm, batchCount)

for debugging purpose
### Prototype
```c
void sset_stepinit_ipiv( magma_int_t **ipiv_array, magma_int_t pm, magma_int_t batchCount);
```
"""
function sset_stepinit_ipiv(ipiv_array, pm, batchCount)
    ccall((:sset_stepinit_ipiv, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t), ipiv_array, pm, batchCount)
end

"""
    magma_hset_pointer(output_array, input, lda, row, column, batch_offset, batchCount, queue)


### Prototype
```c
void magma_hset_pointer( magmaHalf **output_array, magmaHalf *input, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batch_offset, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_hset_pointer(output_array, input, lda, row, column, batch_offset, batchCount, queue)
    ccall((:magma_hset_pointer, libmagma), Cvoid, (Ptr{Ptr{magmaHalf}}, Ptr{magmaHalf}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input, lda, row, column, batch_offset, batchCount, queue)
end

"""
    magmablas_hgemm_batched(transA, transB, m, n, k, alpha, dAarray, ldda, dBarray, lddb, beta, dCarray, lddc, batchCount, queue)


### Prototype
```c
magma_int_t magmablas_hgemm_batched( magma_trans_t transA, magma_trans_t transB, magma_int_t m, magma_int_t n, magma_int_t k, magmaHalf alpha, magmaHalf const * const * dAarray, magma_int_t ldda, magmaHalf const * const * dBarray, magma_int_t lddb, magmaHalf beta, magmaHalf **dCarray, magma_int_t lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_hgemm_batched(transA, transB, m, n, k, alpha, dAarray, ldda, dBarray, lddb, beta, dCarray, lddc, batchCount, queue)
    ccall((:magmablas_hgemm_batched, libmagma), magma_int_t, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaHalf, Ptr{Ptr{magmaHalf}}, magma_int_t, Ptr{Ptr{magmaHalf}}, magma_int_t, magmaHalf, Ptr{Ptr{magmaHalf}}, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dAarray, ldda, dBarray, lddb, beta, dCarray, lddc, batchCount, queue)
end

"""
    setup_pivinfo_batched(pivinfo_array, ipiv_array, ipiv_offset, m, nb, batchCount, queue)


### Prototype
```c
void setup_pivinfo_batched( magma_int_t **pivinfo_array, magma_int_t **ipiv_array, magma_int_t ipiv_offset, magma_int_t m, magma_int_t nb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function setup_pivinfo_batched(pivinfo_array, ipiv_array, ipiv_offset, m, nb, batchCount, queue)
    ccall((:setup_pivinfo_batched, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), pivinfo_array, ipiv_array, ipiv_offset, m, nb, batchCount, queue)
end

"""
    adjust_ipiv_batched(ipiv_array, ipiv_offset, m, offset, batchCount, queue)


### Prototype
```c
void adjust_ipiv_batched( magma_int_t **ipiv_array, magma_int_t ipiv_offset, magma_int_t m, magma_int_t offset, magma_int_t batchCount, magma_queue_t queue);
```
"""
function adjust_ipiv_batched(ipiv_array, ipiv_offset, m, offset, batchCount, queue)
    ccall((:adjust_ipiv_batched, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), ipiv_array, ipiv_offset, m, offset, batchCount, queue)
end

"""
    magma_idisplace_pointers(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_idisplace_pointers(magma_int_t **output_array, magma_int_t **input_array, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_idisplace_pointers(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_idisplace_pointers, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    stepinit_ipiv(ipiv_array, pm, batchCount, queue)


### Prototype
```c
void stepinit_ipiv(magma_int_t **ipiv_array, magma_int_t pm, magma_int_t batchCount, magma_queue_t queue);
```
"""
function stepinit_ipiv(ipiv_array, pm, batchCount, queue)
    ccall((:stepinit_ipiv, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), ipiv_array, pm, batchCount, queue)
end

"""
    adjust_ipiv(ipiv, m, offset, queue)


### Prototype
```c
void adjust_ipiv( magma_int_t *ipiv, magma_int_t m, magma_int_t offset, magma_queue_t queue);
```
"""
function adjust_ipiv(ipiv, m, offset, queue)
    ccall((:adjust_ipiv, libmagma), Cvoid, (Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), ipiv, m, offset, queue)
end

"""
    magma_iset_pointer(output_array, input, lda, row, column, batchSize, batchCount, queue)


### Prototype
```c
void magma_iset_pointer( magma_int_t **output_array, magma_int_t *input, magma_int_t lda, magma_int_t row, magma_int_t column, magma_int_t batchSize, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_iset_pointer(output_array, input, lda, row, column, batchSize, batchCount, queue)
    ccall((:magma_iset_pointer, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input, lda, row, column, batchSize, batchCount, queue)
end

"""
    magma_get_zgetrf_vbatched_nbparam(max_m, max_n, nb, recnb)

 control and tuning
### Prototype
```c
void magma_get_zgetrf_vbatched_nbparam(magma_int_t max_m, magma_int_t max_n, magma_int_t *nb, magma_int_t *recnb);
```
"""
function magma_get_zgetrf_vbatched_nbparam(max_m, max_n, nb, recnb)
    ccall((:magma_get_zgetrf_vbatched_nbparam, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), max_m, max_n, nb, recnb)
end

"""
    magma_zgetf2_fused_vbatched(max_M, max_N, max_minMN, max_MxN, M, N, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, batchCount, queue)

 LAPACK vbatched routines
### Prototype
```c
magma_int_t magma_zgetf2_fused_vbatched( magma_int_t max_M, magma_int_t max_N, magma_int_t max_minMN, magma_int_t max_MxN, magma_int_t* M, magma_int_t* N, magmaDoubleComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t **dipiv_array, magma_int_t ipiv_i, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetf2_fused_vbatched(max_M, max_N, max_minMN, max_MxN, M, N, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, batchCount, queue)
    ccall((:magma_zgetf2_fused_vbatched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), max_M, max_N, max_minMN, max_MxN, M, N, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, batchCount, queue)
end

"""
    magma_zgetf2_fused_sm_vbatched(max_M, max_N, max_minMN, max_MxN, m, n, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, gbstep, nthreads, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetf2_fused_sm_vbatched( magma_int_t max_M, magma_int_t max_N, magma_int_t max_minMN, magma_int_t max_MxN, magma_int_t* m, magma_int_t* n, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t** dipiv_array, magma_int_t ipiv_i, magma_int_t* info_array, magma_int_t gbstep, magma_int_t nthreads, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_zgetf2_fused_sm_vbatched(max_M, max_N, max_minMN, max_MxN, m, n, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, gbstep, nthreads, check_launch_only, batchCount, queue)
    ccall((:magma_zgetf2_fused_sm_vbatched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), max_M, max_N, max_minMN, max_MxN, m, n, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, gbstep, nthreads, check_launch_only, batchCount, queue)
end

"""
    magma_zgetrf_vbatched(m, n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetrf_vbatched( magma_int_t* m, magma_int_t* n, magmaDoubleComplex **dA_array, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetrf_vbatched(m, n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_zgetrf_vbatched, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_zgetrf_vbatched_max_nocheck(m, n, minmn, max_m, max_n, max_minmn, max_mxn, nb, recnb, dA_array, ldda, ipiv_array, pivinfo_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetrf_vbatched_max_nocheck( magma_int_t* m, magma_int_t* n, magma_int_t* minmn, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, magma_int_t nb, magma_int_t recnb, magmaDoubleComplex **dA_array, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t** pivinfo_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetrf_vbatched_max_nocheck(m, n, minmn, max_m, max_n, max_minmn, max_mxn, nb, recnb, dA_array, ldda, ipiv_array, pivinfo_array, info_array, batchCount, queue)
    ccall((:magma_zgetrf_vbatched_max_nocheck, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, minmn, max_m, max_n, max_minmn, max_mxn, nb, recnb, dA_array, ldda, ipiv_array, pivinfo_array, info_array, batchCount, queue)
end

"""
    magma_zgetrf_vbatched_max_nocheck_work(m, n, max_m, max_n, max_minmn, max_mxn, dA_array, ldda, dipiv_array, info_array, work, lwork, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetrf_vbatched_max_nocheck_work( magma_int_t* m, magma_int_t* n, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, magmaDoubleComplex **dA_array, magma_int_t *ldda, magma_int_t **dipiv_array, magma_int_t *info_array, void* work, magma_int_t* lwork, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetrf_vbatched_max_nocheck_work(m, n, max_m, max_n, max_minmn, max_mxn, dA_array, ldda, dipiv_array, info_array, work, lwork, batchCount, queue)
    ccall((:magma_zgetrf_vbatched_max_nocheck_work, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, Ptr{Cvoid}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, max_m, max_n, max_minmn, max_mxn, dA_array, ldda, dipiv_array, info_array, work, lwork, batchCount, queue)
end

"""
    magma_izamax_vbatched(length, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_i, info_array, step, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_izamax_vbatched( magma_int_t length, magma_int_t *M, magma_int_t *N, magmaDoubleComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t** ipiv_array, magma_int_t ipiv_i, magma_int_t *info_array, magma_int_t step, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_izamax_vbatched(length, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_i, info_array, step, gbstep, batchCount, queue)
    ccall((:magma_izamax_vbatched, libmagma), magma_int_t, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), length, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_i, info_array, step, gbstep, batchCount, queue)
end

"""
    magma_zswap_vbatched(max_n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, piv_adjustment, batchCount, queue)


### Prototype
```c
magma_int_t magma_zswap_vbatched( magma_int_t max_n, magma_int_t *M, magma_int_t *N, magmaDoubleComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t** ipiv_array, magma_int_t piv_adjustment, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zswap_vbatched(max_n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, piv_adjustment, batchCount, queue)
    ccall((:magma_zswap_vbatched, libmagma), magma_int_t, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), max_n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, piv_adjustment, batchCount, queue)
end

"""
    magma_zscal_zgeru_vbatched(max_M, max_N, M, N, dA_array, Ai, Aj, ldda, info_array, step, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zscal_zgeru_vbatched( magma_int_t max_M, magma_int_t max_N, magma_int_t *M, magma_int_t *N, magmaDoubleComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t *info_array, magma_int_t step, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zscal_zgeru_vbatched(max_M, max_N, M, N, dA_array, Ai, Aj, ldda, info_array, step, gbstep, batchCount, queue)
    ccall((:magma_zscal_zgeru_vbatched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), max_M, max_N, M, N, dA_array, Ai, Aj, ldda, info_array, step, gbstep, batchCount, queue)
end

"""
    magma_zgetf2_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, dA_array, Ai, Aj, ldda, ipiv_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetf2_vbatched( magma_int_t *m, magma_int_t *n, magma_int_t *minmn, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, magmaDoubleComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetf2_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, dA_array, Ai, Aj, ldda, ipiv_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_zgetf2_vbatched, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, minmn, max_m, max_n, max_minmn, max_mxn, dA_array, Ai, Aj, ldda, ipiv_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_zgetrf_recpanel_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, min_recpnb, dA_array, Ai, Aj, ldda, dipiv_array, dipiv_i, dpivinfo_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zgetrf_recpanel_vbatched( magma_int_t* m, magma_int_t* n, magma_int_t* minmn, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, magma_int_t min_recpnb, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t** dipiv_array, magma_int_t dipiv_i, magma_int_t** dpivinfo_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zgetrf_recpanel_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, min_recpnb, dA_array, Ai, Aj, ldda, dipiv_array, dipiv_i, dpivinfo_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_zgetrf_recpanel_vbatched, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, minmn, max_m, max_n, max_minmn, max_mxn, min_recpnb, dA_array, Ai, Aj, ldda, dipiv_array, dipiv_i, dpivinfo_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_zlaswp_left_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)


### Prototype
```c
void magma_zlaswp_left_rowserial_vbatched( magma_int_t n, magma_int_t *M, magma_int_t *N, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t ipiv_offset, magma_int_t k1, magma_int_t k2, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zlaswp_left_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
    ccall((:magma_zlaswp_left_rowserial_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
end

"""
    magma_zlaswp_right_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)


### Prototype
```c
void magma_zlaswp_right_rowserial_vbatched( magma_int_t n, magma_int_t *M, magma_int_t *N, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t ipiv_offset, magma_int_t k1, magma_int_t k2, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zlaswp_right_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
    ccall((:magma_zlaswp_right_rowserial_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
end

"""
    magma_zlaswp_left_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)


### Prototype
```c
void magma_zlaswp_left_rowparallel_vbatched( magma_int_t n, magma_int_t* M, magma_int_t* N, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t k1, magma_int_t k2, magma_int_t **pivinfo_array, magma_int_t pivinfo_i, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zlaswp_left_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
    ccall((:magma_zlaswp_left_rowparallel_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
end

"""
    magma_zlaswp_right_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)


### Prototype
```c
void magma_zlaswp_right_rowparallel_vbatched( magma_int_t n, magma_int_t* M, magma_int_t* N, magmaDoubleComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t k1, magma_int_t k2, magma_int_t **pivinfo_array, magma_int_t pivinfo_i, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zlaswp_right_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
    ccall((:magma_zlaswp_right_rowparallel_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
end

"""
    magma_zpotrf_lpout_vbatched(uplo, n, max_n, dA_array, lda, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotrf_lpout_vbatched( magma_uplo_t uplo, magma_int_t *n, magma_int_t max_n, magmaDoubleComplex **dA_array, magma_int_t *lda, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotrf_lpout_vbatched(uplo, n, max_n, dA_array, lda, gbstep, info_array, batchCount, queue)
    ccall((:magma_zpotrf_lpout_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, max_n, dA_array, lda, gbstep, info_array, batchCount, queue)
end

"""
    magma_zpotf2_vbatched(uplo, n, max_n, dA_array, lda, dA_displ, dW_displ, dB_displ, dC_displ, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotf2_vbatched( magma_uplo_t uplo, magma_int_t* n, magma_int_t max_n, magmaDoubleComplex **dA_array, magma_int_t* lda, magmaDoubleComplex **dA_displ, magmaDoubleComplex **dW_displ, magmaDoubleComplex **dB_displ, magmaDoubleComplex **dC_displ, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotf2_vbatched(uplo, n, max_n, dA_array, lda, dA_displ, dW_displ, dB_displ, dC_displ, info_array, gbstep, batchCount, queue)
    ccall((:magma_zpotf2_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, max_n, dA_array, lda, dA_displ, dW_displ, dB_displ, dC_displ, info_array, gbstep, batchCount, queue)
end

"""
    magma_zpotrf_panel_vbatched(uplo, n, max_n, ibvec, nb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW0_displ, dW1_displ, dW2_displ, dW3_displ, dW4_displ, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotrf_panel_vbatched( magma_uplo_t uplo, magma_int_t* n, magma_int_t max_n, magma_int_t *ibvec, magma_int_t nb, magmaDoubleComplex** dA_array, magma_int_t* ldda, magmaDoubleComplex** dX_array, magma_int_t* dX_length, magmaDoubleComplex** dinvA_array, magma_int_t* dinvA_length, magmaDoubleComplex** dW0_displ, magmaDoubleComplex** dW1_displ, magmaDoubleComplex** dW2_displ, magmaDoubleComplex** dW3_displ, magmaDoubleComplex** dW4_displ, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotrf_panel_vbatched(uplo, n, max_n, ibvec, nb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW0_displ, dW1_displ, dW2_displ, dW3_displ, dW4_displ, info_array, gbstep, batchCount, queue)
    ccall((:magma_zpotrf_panel_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, max_n, ibvec, nb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW0_displ, dW1_displ, dW2_displ, dW3_displ, dW4_displ, info_array, gbstep, batchCount, queue)
end

"""
    magma_zpotrf_vbatched_max_nocheck(uplo, n, dA_array, ldda, info_array, batchCount, max_n, queue)


### Prototype
```c
magma_int_t magma_zpotrf_vbatched_max_nocheck( magma_uplo_t uplo, magma_int_t *n, magmaDoubleComplex **dA_array, magma_int_t *ldda, magma_int_t *info_array, magma_int_t batchCount, magma_int_t max_n, magma_queue_t queue);
```
"""
function magma_zpotrf_vbatched_max_nocheck(uplo, n, dA_array, ldda, info_array, batchCount, max_n, queue)
    ccall((:magma_zpotrf_vbatched_max_nocheck, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, dA_array, ldda, info_array, batchCount, max_n, queue)
end

"""
    magma_zpotrf_vbatched(uplo, n, dA_array, ldda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_zpotrf_vbatched( magma_uplo_t uplo, magma_int_t *n, magmaDoubleComplex **dA_array, magma_int_t *ldda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zpotrf_vbatched(uplo, n, dA_array, ldda, info_array, batchCount, queue)
    ccall((:magma_zpotrf_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, ldda, info_array, batchCount, queue)
end

"""
    magmablas_zgemm_vbatched_core(transA, transB, max_m, max_n, max_k, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)

 BLAS vbatched routines
/
/* Level 3 
### Prototype
```c
void magmablas_zgemm_vbatched_core( magma_trans_t transA, magma_trans_t transB, magma_int_t max_m, magma_int_t max_n, magma_int_t max_k, magma_int_t* m, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magmaDoubleComplex beta, magmaDoubleComplex ** dC_array, magma_int_t Ci, magma_int_t Cj, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zgemm_vbatched_core(transA, transB, max_m, max_n, max_k, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
    ccall((:magmablas_zgemm_vbatched_core, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, max_m, max_n, max_k, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
end

"""
    magmablas_zgemm_vbatched_max_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_zgemm_vbatched_max_nocheck( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t max_m, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zgemm_vbatched_max_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
    ccall((:magmablas_zgemm_vbatched_max_nocheck, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
end

"""
    magmablas_zgemm_vbatched_max(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_zgemm_vbatched_max( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t max_m, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zgemm_vbatched_max(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
    ccall((:magmablas_zgemm_vbatched_max, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
end

"""
    magmablas_zgemm_vbatched_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zgemm_vbatched_nocheck( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zgemm_vbatched_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zgemm_vbatched_nocheck, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zgemm_vbatched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zgemm_vbatched( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zgemm_vbatched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zgemm_vbatched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zherk_internal_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_zherk_internal_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zherk_internal_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)
    ccall((:magmablas_zherk_internal_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)
end

"""
    magmablas_zsyrk_internal_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_zsyrk_internal_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zsyrk_internal_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)
    ccall((:magmablas_zsyrk_internal_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)
end

"""
    magmablas_zherk_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_zherk_vbatched_max_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, double beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_zherk_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_zherk_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_zherk_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_zherk_vbatched_max( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, double beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_zherk_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_zherk_vbatched_max, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_zherk_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zherk_vbatched_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, double beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zherk_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zherk_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zherk_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zherk_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, double beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zherk_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zherk_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zsyrk_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_zsyrk_vbatched_max_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_zsyrk_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_zsyrk_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_zsyrk_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_zsyrk_vbatched_max( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_zsyrk_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_zsyrk_vbatched_max, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_zsyrk_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zsyrk_vbatched_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zsyrk_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zsyrk_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zsyrk_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zsyrk_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zsyrk_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zsyrk_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zher2k_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_zher2k_vbatched_max_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, double beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_zher2k_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_zher2k_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_zher2k_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_zher2k_vbatched_max( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, double beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_zher2k_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_zher2k_vbatched_max, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_zher2k_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zher2k_vbatched_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, double beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zher2k_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zher2k_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zher2k_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zher2k_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, double beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zher2k_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zher2k_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zsyr2k_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_zsyr2k_vbatched_max_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_zsyr2k_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_zsyr2k_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_zsyr2k_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_zsyr2k_vbatched_max( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_zsyr2k_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_zsyr2k_vbatched_max, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_zsyr2k_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zsyr2k_vbatched_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zsyr2k_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zsyr2k_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zsyr2k_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zsyr2k_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaDoubleComplex alpha, magmaDoubleComplex const * const * dA_array, magma_int_t* ldda, magmaDoubleComplex const * const * dB_array, magma_int_t* lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zsyr2k_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zsyr2k_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_ztrmm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrmm_vbatched_core( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magmaDoubleComplex **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrmm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_ztrmm_vbatched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_ztrmm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrmm_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t* ldda, magmaDoubleComplex **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrmm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ztrmm_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ztrmm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrmm_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t* ldda, magmaDoubleComplex **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrmm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ztrmm_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ztrmm_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrmm_vbatched_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t* ldda, magmaDoubleComplex **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrmm_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ztrmm_vbatched_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ztrmm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrmm_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t* ldda, magmaDoubleComplex **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrmm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ztrmm_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ztrsm_small_vbatched(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_small_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magmaDoubleComplex **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrsm_small_vbatched(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_ztrsm_small_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_ztrsm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_vbatched_core( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magmaDoubleComplex **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrsm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_ztrsm_vbatched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_ztrsm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t* ldda, magmaDoubleComplex **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ztrsm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ztrsm_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ztrsm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex** dA_array, magma_int_t* ldda, magmaDoubleComplex** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ztrsm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ztrsm_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ztrsm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex** dA_array, magma_int_t* ldda, magmaDoubleComplex** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ztrsm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ztrsm_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ztrsm_inv_outofplace_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_ztrsm_inv_outofplace_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t *m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex** dA_array, magma_int_t* ldda, magmaDoubleComplex** dB_array, magma_int_t* lddb, magmaDoubleComplex** dX_array, magma_int_t* lddx, magmaDoubleComplex** dinvA_array, magma_int_t* dinvA_length, magmaDoubleComplex** dA_displ, magmaDoubleComplex** dB_displ, magmaDoubleComplex** dX_displ, magmaDoubleComplex** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_ztrsm_inv_outofplace_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
    ccall((:magmablas_ztrsm_inv_outofplace_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
end

"""
    magmablas_ztrsm_inv_work_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_ztrsm_inv_work_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex** dA_array, magma_int_t* ldda, magmaDoubleComplex** dB_array, magma_int_t* lddb, magmaDoubleComplex** dX_array, magma_int_t* lddx, magmaDoubleComplex** dinvA_array, magma_int_t* dinvA_length, magmaDoubleComplex** dA_displ, magmaDoubleComplex** dB_displ, magmaDoubleComplex** dX_displ, magmaDoubleComplex** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_ztrsm_inv_work_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
    ccall((:magmablas_ztrsm_inv_work_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
end

"""
    magmablas_ztrsm_inv_vbatched_max_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_ztrsm_inv_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex** dA_array, magma_int_t* ldda, magmaDoubleComplex** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_ztrsm_inv_vbatched_max_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
    ccall((:magmablas_ztrsm_inv_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
end

"""
    magmablas_ztrsm_inv_vbatched_max(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_ztrsm_inv_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex** dA_array, magma_int_t* ldda, magmaDoubleComplex** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_ztrsm_inv_vbatched_max(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
    ccall((:magmablas_ztrsm_inv_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
end

"""
    magmablas_ztrsm_inv_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_inv_vbatched_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex** dA_array, magma_int_t* ldda, magmaDoubleComplex** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ztrsm_inv_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ztrsm_inv_vbatched_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ztrsm_inv_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ztrsm_inv_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex** dA_array, magma_int_t* ldda, magmaDoubleComplex** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ztrsm_inv_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ztrsm_inv_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ztrtri_diag_vbatched(uplo, diag, nmax, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_ztrtri_diag_vbatched( magma_uplo_t uplo, magma_diag_t diag, magma_int_t nmax, magma_int_t *n, magmaDoubleComplex const * const *dA_array, magma_int_t *ldda, magmaDoubleComplex **dinvA_array, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ztrtri_diag_vbatched(uplo, diag, nmax, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
    ccall((:magmablas_ztrtri_diag_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_diag_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, diag, nmax, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
end

"""
    magmablas_zhemm_vbatched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, roffA, coffA, roffB, coffB, roffC, coffC, specM, specN, batchCount, queue)


### Prototype
```c
void magmablas_zhemm_vbatched_core( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t *ldda, magmaDoubleComplex **dB_array, magma_int_t *lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t *lddc, magma_int_t max_m, magma_int_t max_n, magma_int_t roffA, magma_int_t coffA, magma_int_t roffB, magma_int_t coffB, magma_int_t roffC, magma_int_t coffC, magma_int_t specM, magma_int_t specN, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zhemm_vbatched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, roffA, coffA, roffB, coffB, roffC, coffC, specM, specN, batchCount, queue)
    ccall((:magmablas_zhemm_vbatched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, roffA, coffA, roffB, coffB, roffC, coffC, specM, specN, batchCount, queue)
end

"""
    magmablas_zhemm_vbatched_max_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_zhemm_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t *ldda, magmaDoubleComplex **dB_array, magma_int_t *lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue );
```
"""
function magmablas_zhemm_vbatched_max_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
    ccall((:magmablas_zhemm_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
end

"""
    magmablas_zhemm_vbatched_max(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_zhemm_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t *ldda, magmaDoubleComplex **dB_array, magma_int_t *lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue );
```
"""
function magmablas_zhemm_vbatched_max(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
    ccall((:magmablas_zhemm_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
end

"""
    magmablas_zhemm_vbatched_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zhemm_vbatched_nocheck( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t *ldda, magmaDoubleComplex **dB_array, magma_int_t *lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zhemm_vbatched_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zhemm_vbatched_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zhemm_vbatched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_zhemm_vbatched( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t *ldda, magmaDoubleComplex **dB_array, magma_int_t *lddb, magmaDoubleComplex beta, magmaDoubleComplex **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zhemm_vbatched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_zhemm_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_zgemv_vbatched_max_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)

Level 2 
### Prototype
```c
void magmablas_zgemv_vbatched_max_nocheck( magma_trans_t trans, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dA_array[], magma_int_t* ldda, magmaDoubleComplex_ptr dx_array[], magma_int_t* incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_zgemv_vbatched_max_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
    ccall((:magmablas_zgemv_vbatched_max_nocheck, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
end

"""
    magmablas_zgemv_vbatched_max(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_zgemv_vbatched_max( magma_trans_t trans, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dA_array[], magma_int_t* ldda, magmaDoubleComplex_ptr dx_array[], magma_int_t* incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_zgemv_vbatched_max(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
    ccall((:magmablas_zgemv_vbatched_max, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
end

"""
    magmablas_zgemv_vbatched_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_zgemv_vbatched_nocheck( magma_trans_t trans, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dA_array[], magma_int_t* ldda, magmaDoubleComplex_ptr dx_array[], magma_int_t* incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zgemv_vbatched_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_zgemv_vbatched_nocheck, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_zgemv_vbatched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_zgemv_vbatched( magma_trans_t trans, magma_int_t* m, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dA_array[], magma_int_t* ldda, magmaDoubleComplex_ptr dx_array[], magma_int_t* incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zgemv_vbatched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_zgemv_vbatched, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_zhemv_vbatched_max_nocheck(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, max_n, batchCount, queue)


### Prototype
```c
void magmablas_zhemv_vbatched_max_nocheck( magma_uplo_t uplo, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex **dA_array, magma_int_t* ldda, magmaDoubleComplex **dX_array, magma_int_t* incx, magmaDoubleComplex beta, magmaDoubleComplex **dY_array, magma_int_t* incy, magma_int_t max_n, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zhemv_vbatched_max_nocheck(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, max_n, batchCount, queue)
    ccall((:magmablas_zhemv_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, max_n, batchCount, queue)
end

"""
    magmablas_zhemv_vbatched_max(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_n, queue)


### Prototype
```c
void magmablas_zhemv_vbatched_max( magma_uplo_t uplo, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dA_array[], magma_int_t* ldda, magmaDoubleComplex_ptr dx_array[], magma_int_t* incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_zhemv_vbatched_max(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_n, queue)
    ccall((:magmablas_zhemv_vbatched_max, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_n, queue)
end

"""
    magmablas_zhemv_vbatched_nocheck(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_zhemv_vbatched_nocheck( magma_uplo_t uplo, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dA_array[], magma_int_t* ldda, magmaDoubleComplex_ptr dx_array[], magma_int_t* incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zhemv_vbatched_nocheck(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_zhemv_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_zhemv_vbatched(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_zhemv_vbatched( magma_uplo_t uplo, magma_int_t* n, magmaDoubleComplex alpha, magmaDoubleComplex_ptr dA_array[], magma_int_t* ldda, magmaDoubleComplex_ptr dx_array[], magma_int_t* incx, magmaDoubleComplex beta, magmaDoubleComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zhemv_vbatched(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_zhemv_vbatched, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magma_zset_pointer_var_cc(output_array, input, lda, row, column, batch_offset, batchCount, queue)

Level 1 */
/* Auxiliary routines 
### Prototype
```c
void magma_zset_pointer_var_cc( magmaDoubleComplex **output_array, magmaDoubleComplex *input, magma_int_t *lda, magma_int_t row, magma_int_t column, magma_int_t *batch_offset, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zset_pointer_var_cc(output_array, input, lda, row, column, batch_offset, batchCount, queue)
    ccall((:magma_zset_pointer_var_cc, libmagma), Cvoid, (Ptr{Ptr{magmaDoubleComplex}}, Ptr{magmaDoubleComplex}, Ptr{magma_int_t}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), output_array, input, lda, row, column, batch_offset, batchCount, queue)
end

"""
    magma_zdisplace_pointers_var_cc(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_zdisplace_pointers_var_cc(magmaDoubleComplex **output_array, magmaDoubleComplex **input_array, magma_int_t* lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zdisplace_pointers_var_cc(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_zdisplace_pointers_var_cc, libmagma), Cvoid, (Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_zdisplace_pointers_var_cv(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_zdisplace_pointers_var_cv(magmaDoubleComplex **output_array, magmaDoubleComplex **input_array, magma_int_t* lda, magma_int_t row, magma_int_t* column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zdisplace_pointers_var_cv(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_zdisplace_pointers_var_cv, libmagma), Cvoid, (Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_zdisplace_pointers_var_vc(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_zdisplace_pointers_var_vc(magmaDoubleComplex **output_array, magmaDoubleComplex **input_array, magma_int_t* lda, magma_int_t *row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zdisplace_pointers_var_vc(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_zdisplace_pointers_var_vc, libmagma), Cvoid, (Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_zdisplace_pointers_var_vv(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_zdisplace_pointers_var_vv(magmaDoubleComplex **output_array, magmaDoubleComplex **input_array, magma_int_t* lda, magma_int_t* row, magma_int_t* column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_zdisplace_pointers_var_vv(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_zdisplace_pointers_var_vv, libmagma), Cvoid, (Ptr{Ptr{magmaDoubleComplex}}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magmablas_zlaset_vbatched(uplo, max_m, max_n, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)


### Prototype
```c
void magmablas_zlaset_vbatched( magma_uplo_t uplo, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaDoubleComplex offdiag, magmaDoubleComplex diag, magmaDoubleComplex_ptr dAarray[], magma_int_t* ldda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_zlaset_vbatched(uplo, max_m, max_n, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
    ccall((:magmablas_zlaset_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaDoubleComplex, magmaDoubleComplex, Ptr{magmaDoubleComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, max_m, max_n, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
end

"""
    magmablas_zlacpy_vbatched(uplo, max_m, max_n, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)


### Prototype
```c
void magmablas_zlacpy_vbatched( magma_uplo_t uplo, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaDoubleComplex const * const * dAarray, magma_int_t* ldda, magmaDoubleComplex** dBarray, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_zlacpy_vbatched(uplo, max_m, max_n, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
    ccall((:magmablas_zlacpy_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaDoubleComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, max_m, max_n, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
end

# no prototype is found for this function at magma_zvbatched.h:814:13, please use with caution
"""
    magma_get_zpotrf_vbatched_crossover()

 Aux. vbatched routines
### Prototype
```c
magma_int_t magma_get_zpotrf_vbatched_crossover();
```
"""
function magma_get_zpotrf_vbatched_crossover()
    ccall((:magma_get_zpotrf_vbatched_crossover, libmagma), magma_int_t, ())
end

"""
    magma_get_cgetrf_vbatched_nbparam(max_m, max_n, nb, recnb)

 control and tuning
### Prototype
```c
void magma_get_cgetrf_vbatched_nbparam(magma_int_t max_m, magma_int_t max_n, magma_int_t *nb, magma_int_t *recnb);
```
"""
function magma_get_cgetrf_vbatched_nbparam(max_m, max_n, nb, recnb)
    ccall((:magma_get_cgetrf_vbatched_nbparam, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), max_m, max_n, nb, recnb)
end

"""
    magma_cgetf2_fused_vbatched(max_M, max_N, max_minMN, max_MxN, M, N, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, batchCount, queue)

 LAPACK vbatched routines
### Prototype
```c
magma_int_t magma_cgetf2_fused_vbatched( magma_int_t max_M, magma_int_t max_N, magma_int_t max_minMN, magma_int_t max_MxN, magma_int_t* M, magma_int_t* N, magmaFloatComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t **dipiv_array, magma_int_t ipiv_i, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetf2_fused_vbatched(max_M, max_N, max_minMN, max_MxN, M, N, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, batchCount, queue)
    ccall((:magma_cgetf2_fused_vbatched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), max_M, max_N, max_minMN, max_MxN, M, N, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, batchCount, queue)
end

"""
    magma_cgetf2_fused_sm_vbatched(max_M, max_N, max_minMN, max_MxN, m, n, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, gbstep, nthreads, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetf2_fused_sm_vbatched( magma_int_t max_M, magma_int_t max_N, magma_int_t max_minMN, magma_int_t max_MxN, magma_int_t* m, magma_int_t* n, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t** dipiv_array, magma_int_t ipiv_i, magma_int_t* info_array, magma_int_t gbstep, magma_int_t nthreads, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_cgetf2_fused_sm_vbatched(max_M, max_N, max_minMN, max_MxN, m, n, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, gbstep, nthreads, check_launch_only, batchCount, queue)
    ccall((:magma_cgetf2_fused_sm_vbatched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), max_M, max_N, max_minMN, max_MxN, m, n, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, gbstep, nthreads, check_launch_only, batchCount, queue)
end

"""
    magma_cgetrf_vbatched(m, n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetrf_vbatched( magma_int_t* m, magma_int_t* n, magmaFloatComplex **dA_array, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetrf_vbatched(m, n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_cgetrf_vbatched, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_cgetrf_vbatched_max_nocheck(m, n, minmn, max_m, max_n, max_minmn, max_mxn, nb, recnb, dA_array, ldda, ipiv_array, pivinfo_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetrf_vbatched_max_nocheck( magma_int_t* m, magma_int_t* n, magma_int_t* minmn, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, magma_int_t nb, magma_int_t recnb, magmaFloatComplex **dA_array, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t** pivinfo_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetrf_vbatched_max_nocheck(m, n, minmn, max_m, max_n, max_minmn, max_mxn, nb, recnb, dA_array, ldda, ipiv_array, pivinfo_array, info_array, batchCount, queue)
    ccall((:magma_cgetrf_vbatched_max_nocheck, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, minmn, max_m, max_n, max_minmn, max_mxn, nb, recnb, dA_array, ldda, ipiv_array, pivinfo_array, info_array, batchCount, queue)
end

"""
    magma_cgetrf_vbatched_max_nocheck_work(m, n, max_m, max_n, max_minmn, max_mxn, dA_array, ldda, dipiv_array, info_array, work, lwork, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetrf_vbatched_max_nocheck_work( magma_int_t* m, magma_int_t* n, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, magmaFloatComplex **dA_array, magma_int_t *ldda, magma_int_t **dipiv_array, magma_int_t *info_array, void* work, magma_int_t* lwork, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetrf_vbatched_max_nocheck_work(m, n, max_m, max_n, max_minmn, max_mxn, dA_array, ldda, dipiv_array, info_array, work, lwork, batchCount, queue)
    ccall((:magma_cgetrf_vbatched_max_nocheck_work, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, Ptr{Cvoid}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, max_m, max_n, max_minmn, max_mxn, dA_array, ldda, dipiv_array, info_array, work, lwork, batchCount, queue)
end

"""
    magma_icamax_vbatched(length, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_i, info_array, step, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_icamax_vbatched( magma_int_t length, magma_int_t *M, magma_int_t *N, magmaFloatComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t** ipiv_array, magma_int_t ipiv_i, magma_int_t *info_array, magma_int_t step, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_icamax_vbatched(length, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_i, info_array, step, gbstep, batchCount, queue)
    ccall((:magma_icamax_vbatched, libmagma), magma_int_t, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), length, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_i, info_array, step, gbstep, batchCount, queue)
end

"""
    magma_cswap_vbatched(max_n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, piv_adjustment, batchCount, queue)


### Prototype
```c
magma_int_t magma_cswap_vbatched( magma_int_t max_n, magma_int_t *M, magma_int_t *N, magmaFloatComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t** ipiv_array, magma_int_t piv_adjustment, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cswap_vbatched(max_n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, piv_adjustment, batchCount, queue)
    ccall((:magma_cswap_vbatched, libmagma), magma_int_t, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), max_n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, piv_adjustment, batchCount, queue)
end

"""
    magma_cscal_cgeru_vbatched(max_M, max_N, M, N, dA_array, Ai, Aj, ldda, info_array, step, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cscal_cgeru_vbatched( magma_int_t max_M, magma_int_t max_N, magma_int_t *M, magma_int_t *N, magmaFloatComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t *info_array, magma_int_t step, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cscal_cgeru_vbatched(max_M, max_N, M, N, dA_array, Ai, Aj, ldda, info_array, step, gbstep, batchCount, queue)
    ccall((:magma_cscal_cgeru_vbatched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), max_M, max_N, M, N, dA_array, Ai, Aj, ldda, info_array, step, gbstep, batchCount, queue)
end

"""
    magma_cgetf2_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, dA_array, Ai, Aj, ldda, ipiv_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetf2_vbatched( magma_int_t *m, magma_int_t *n, magma_int_t *minmn, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, magmaFloatComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetf2_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, dA_array, Ai, Aj, ldda, ipiv_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_cgetf2_vbatched, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, minmn, max_m, max_n, max_minmn, max_mxn, dA_array, Ai, Aj, ldda, ipiv_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_cgetrf_recpanel_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, min_recpnb, dA_array, Ai, Aj, ldda, dipiv_array, dipiv_i, dpivinfo_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cgetrf_recpanel_vbatched( magma_int_t* m, magma_int_t* n, magma_int_t* minmn, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, magma_int_t min_recpnb, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t** dipiv_array, magma_int_t dipiv_i, magma_int_t** dpivinfo_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cgetrf_recpanel_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, min_recpnb, dA_array, Ai, Aj, ldda, dipiv_array, dipiv_i, dpivinfo_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_cgetrf_recpanel_vbatched, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, minmn, max_m, max_n, max_minmn, max_mxn, min_recpnb, dA_array, Ai, Aj, ldda, dipiv_array, dipiv_i, dpivinfo_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_claswp_left_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)


### Prototype
```c
void magma_claswp_left_rowserial_vbatched( magma_int_t n, magma_int_t *M, magma_int_t *N, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t ipiv_offset, magma_int_t k1, magma_int_t k2, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_claswp_left_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
    ccall((:magma_claswp_left_rowserial_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
end

"""
    magma_claswp_right_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)


### Prototype
```c
void magma_claswp_right_rowserial_vbatched( magma_int_t n, magma_int_t *M, magma_int_t *N, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t ipiv_offset, magma_int_t k1, magma_int_t k2, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_claswp_right_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
    ccall((:magma_claswp_right_rowserial_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
end

"""
    magma_claswp_left_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)


### Prototype
```c
void magma_claswp_left_rowparallel_vbatched( magma_int_t n, magma_int_t* M, magma_int_t* N, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t k1, magma_int_t k2, magma_int_t **pivinfo_array, magma_int_t pivinfo_i, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_claswp_left_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
    ccall((:magma_claswp_left_rowparallel_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
end

"""
    magma_claswp_right_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)


### Prototype
```c
void magma_claswp_right_rowparallel_vbatched( magma_int_t n, magma_int_t* M, magma_int_t* N, magmaFloatComplex** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t k1, magma_int_t k2, magma_int_t **pivinfo_array, magma_int_t pivinfo_i, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_claswp_right_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
    ccall((:magma_claswp_right_rowparallel_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
end

"""
    magma_cpotrf_lpout_vbatched(uplo, n, max_n, dA_array, lda, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotrf_lpout_vbatched( magma_uplo_t uplo, magma_int_t *n, magma_int_t max_n, magmaFloatComplex **dA_array, magma_int_t *lda, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotrf_lpout_vbatched(uplo, n, max_n, dA_array, lda, gbstep, info_array, batchCount, queue)
    ccall((:magma_cpotrf_lpout_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, max_n, dA_array, lda, gbstep, info_array, batchCount, queue)
end

"""
    magma_cpotf2_vbatched(uplo, n, max_n, dA_array, lda, dA_displ, dW_displ, dB_displ, dC_displ, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotf2_vbatched( magma_uplo_t uplo, magma_int_t* n, magma_int_t max_n, magmaFloatComplex **dA_array, magma_int_t* lda, magmaFloatComplex **dA_displ, magmaFloatComplex **dW_displ, magmaFloatComplex **dB_displ, magmaFloatComplex **dC_displ, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotf2_vbatched(uplo, n, max_n, dA_array, lda, dA_displ, dW_displ, dB_displ, dC_displ, info_array, gbstep, batchCount, queue)
    ccall((:magma_cpotf2_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, max_n, dA_array, lda, dA_displ, dW_displ, dB_displ, dC_displ, info_array, gbstep, batchCount, queue)
end

"""
    magma_cpotrf_panel_vbatched(uplo, n, max_n, ibvec, nb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW0_displ, dW1_displ, dW2_displ, dW3_displ, dW4_displ, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotrf_panel_vbatched( magma_uplo_t uplo, magma_int_t* n, magma_int_t max_n, magma_int_t *ibvec, magma_int_t nb, magmaFloatComplex** dA_array, magma_int_t* ldda, magmaFloatComplex** dX_array, magma_int_t* dX_length, magmaFloatComplex** dinvA_array, magma_int_t* dinvA_length, magmaFloatComplex** dW0_displ, magmaFloatComplex** dW1_displ, magmaFloatComplex** dW2_displ, magmaFloatComplex** dW3_displ, magmaFloatComplex** dW4_displ, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotrf_panel_vbatched(uplo, n, max_n, ibvec, nb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW0_displ, dW1_displ, dW2_displ, dW3_displ, dW4_displ, info_array, gbstep, batchCount, queue)
    ccall((:magma_cpotrf_panel_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, max_n, ibvec, nb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW0_displ, dW1_displ, dW2_displ, dW3_displ, dW4_displ, info_array, gbstep, batchCount, queue)
end

"""
    magma_cpotrf_vbatched_max_nocheck(uplo, n, dA_array, ldda, info_array, batchCount, max_n, queue)


### Prototype
```c
magma_int_t magma_cpotrf_vbatched_max_nocheck( magma_uplo_t uplo, magma_int_t *n, magmaFloatComplex **dA_array, magma_int_t *ldda, magma_int_t *info_array, magma_int_t batchCount, magma_int_t max_n, magma_queue_t queue);
```
"""
function magma_cpotrf_vbatched_max_nocheck(uplo, n, dA_array, ldda, info_array, batchCount, max_n, queue)
    ccall((:magma_cpotrf_vbatched_max_nocheck, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, dA_array, ldda, info_array, batchCount, max_n, queue)
end

"""
    magma_cpotrf_vbatched(uplo, n, dA_array, ldda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_cpotrf_vbatched( magma_uplo_t uplo, magma_int_t *n, magmaFloatComplex **dA_array, magma_int_t *ldda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cpotrf_vbatched(uplo, n, dA_array, ldda, info_array, batchCount, queue)
    ccall((:magma_cpotrf_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, ldda, info_array, batchCount, queue)
end

"""
    magmablas_cgemm_vbatched_core(transA, transB, max_m, max_n, max_k, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)

 BLAS vbatched routines
/
/* Level 3 
### Prototype
```c
void magmablas_cgemm_vbatched_core( magma_trans_t transA, magma_trans_t transB, magma_int_t max_m, magma_int_t max_n, magma_int_t max_k, magma_int_t* m, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magmaFloatComplex beta, magmaFloatComplex ** dC_array, magma_int_t Ci, magma_int_t Cj, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cgemm_vbatched_core(transA, transB, max_m, max_n, max_k, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
    ccall((:magmablas_cgemm_vbatched_core, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, max_m, max_n, max_k, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
end

"""
    magmablas_cgemm_vbatched_max_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_cgemm_vbatched_max_nocheck( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t max_m, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cgemm_vbatched_max_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
    ccall((:magmablas_cgemm_vbatched_max_nocheck, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
end

"""
    magmablas_cgemm_vbatched_max(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_cgemm_vbatched_max( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t max_m, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cgemm_vbatched_max(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
    ccall((:magmablas_cgemm_vbatched_max, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
end

"""
    magmablas_cgemm_vbatched_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_cgemm_vbatched_nocheck( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cgemm_vbatched_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_cgemm_vbatched_nocheck, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_cgemm_vbatched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_cgemm_vbatched( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cgemm_vbatched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_cgemm_vbatched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_cherk_internal_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_cherk_internal_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cherk_internal_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)
    ccall((:magmablas_cherk_internal_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)
end

"""
    magmablas_csyrk_internal_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_csyrk_internal_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_csyrk_internal_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)
    ccall((:magmablas_csyrk_internal_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)
end

"""
    magmablas_cherk_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_cherk_vbatched_max_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, float beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_cherk_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_cherk_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_cherk_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_cherk_vbatched_max( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, float beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_cherk_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_cherk_vbatched_max, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_cherk_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_cherk_vbatched_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, float beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cherk_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_cherk_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_cherk_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_cherk_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, float beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cherk_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_cherk_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_csyrk_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_csyrk_vbatched_max_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_csyrk_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_csyrk_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_csyrk_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_csyrk_vbatched_max( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_csyrk_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_csyrk_vbatched_max, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_csyrk_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_csyrk_vbatched_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_csyrk_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_csyrk_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_csyrk_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_csyrk_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_csyrk_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_csyrk_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_cher2k_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_cher2k_vbatched_max_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, float beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_cher2k_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_cher2k_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_cher2k_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_cher2k_vbatched_max( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, float beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_cher2k_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_cher2k_vbatched_max, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_cher2k_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_cher2k_vbatched_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, float beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cher2k_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_cher2k_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_cher2k_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_cher2k_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, float beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_cher2k_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_cher2k_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_csyr2k_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_csyr2k_vbatched_max_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_csyr2k_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_csyr2k_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_csyr2k_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_csyr2k_vbatched_max( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_csyr2k_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_csyr2k_vbatched_max, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_csyr2k_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_csyr2k_vbatched_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_csyr2k_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_csyr2k_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_csyr2k_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_csyr2k_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, magmaFloatComplex alpha, magmaFloatComplex const * const * dA_array, magma_int_t* ldda, magmaFloatComplex const * const * dB_array, magma_int_t* lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_csyr2k_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_csyr2k_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_ctrmm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrmm_vbatched_core( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magmaFloatComplex **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrmm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_ctrmm_vbatched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_ctrmm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrmm_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t* ldda, magmaFloatComplex **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrmm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ctrmm_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ctrmm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrmm_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t* ldda, magmaFloatComplex **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrmm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ctrmm_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ctrmm_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrmm_vbatched_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t* ldda, magmaFloatComplex **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrmm_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ctrmm_vbatched_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ctrmm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrmm_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t* ldda, magmaFloatComplex **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrmm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ctrmm_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ctrsm_small_vbatched(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_small_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magmaFloatComplex **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrsm_small_vbatched(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_ctrsm_small_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_ctrsm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_vbatched_core( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magmaFloatComplex **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrsm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_ctrsm_vbatched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_ctrsm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t* ldda, magmaFloatComplex **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ctrsm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ctrsm_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ctrsm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex** dA_array, magma_int_t* ldda, magmaFloatComplex** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ctrsm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ctrsm_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ctrsm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex** dA_array, magma_int_t* ldda, magmaFloatComplex** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ctrsm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ctrsm_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ctrsm_inv_outofplace_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_ctrsm_inv_outofplace_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t *m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex** dA_array, magma_int_t* ldda, magmaFloatComplex** dB_array, magma_int_t* lddb, magmaFloatComplex** dX_array, magma_int_t* lddx, magmaFloatComplex** dinvA_array, magma_int_t* dinvA_length, magmaFloatComplex** dA_displ, magmaFloatComplex** dB_displ, magmaFloatComplex** dX_displ, magmaFloatComplex** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_ctrsm_inv_outofplace_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
    ccall((:magmablas_ctrsm_inv_outofplace_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
end

"""
    magmablas_ctrsm_inv_work_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_ctrsm_inv_work_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex** dA_array, magma_int_t* ldda, magmaFloatComplex** dB_array, magma_int_t* lddb, magmaFloatComplex** dX_array, magma_int_t* lddx, magmaFloatComplex** dinvA_array, magma_int_t* dinvA_length, magmaFloatComplex** dA_displ, magmaFloatComplex** dB_displ, magmaFloatComplex** dX_displ, magmaFloatComplex** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_ctrsm_inv_work_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
    ccall((:magmablas_ctrsm_inv_work_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
end

"""
    magmablas_ctrsm_inv_vbatched_max_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_ctrsm_inv_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex** dA_array, magma_int_t* ldda, magmaFloatComplex** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_ctrsm_inv_vbatched_max_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
    ccall((:magmablas_ctrsm_inv_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
end

"""
    magmablas_ctrsm_inv_vbatched_max(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_ctrsm_inv_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex** dA_array, magma_int_t* ldda, magmaFloatComplex** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_ctrsm_inv_vbatched_max(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
    ccall((:magmablas_ctrsm_inv_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
end

"""
    magmablas_ctrsm_inv_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_inv_vbatched_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex** dA_array, magma_int_t* ldda, magmaFloatComplex** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ctrsm_inv_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ctrsm_inv_vbatched_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ctrsm_inv_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_ctrsm_inv_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex** dA_array, magma_int_t* ldda, magmaFloatComplex** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ctrsm_inv_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_ctrsm_inv_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_ctrtri_diag_vbatched(uplo, diag, nmax, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_ctrtri_diag_vbatched( magma_uplo_t uplo, magma_diag_t diag, magma_int_t nmax, magma_int_t *n, magmaFloatComplex const * const *dA_array, magma_int_t *ldda, magmaFloatComplex **dinvA_array, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ctrtri_diag_vbatched(uplo, diag, nmax, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
    ccall((:magmablas_ctrtri_diag_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_diag_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, magma_int_t, magma_int_t, magma_queue_t), uplo, diag, nmax, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
end

"""
    magmablas_chemm_vbatched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, roffA, coffA, roffB, coffB, roffC, coffC, specM, specN, batchCount, queue)


### Prototype
```c
void magmablas_chemm_vbatched_core( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t *ldda, magmaFloatComplex **dB_array, magma_int_t *lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t *lddc, magma_int_t max_m, magma_int_t max_n, magma_int_t roffA, magma_int_t coffA, magma_int_t roffB, magma_int_t coffB, magma_int_t roffC, magma_int_t coffC, magma_int_t specM, magma_int_t specN, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_chemm_vbatched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, roffA, coffA, roffB, coffB, roffC, coffC, specM, specN, batchCount, queue)
    ccall((:magmablas_chemm_vbatched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, roffA, coffA, roffB, coffB, roffC, coffC, specM, specN, batchCount, queue)
end

"""
    magmablas_chemm_vbatched_max_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_chemm_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t *ldda, magmaFloatComplex **dB_array, magma_int_t *lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue );
```
"""
function magmablas_chemm_vbatched_max_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
    ccall((:magmablas_chemm_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
end

"""
    magmablas_chemm_vbatched_max(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_chemm_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t *ldda, magmaFloatComplex **dB_array, magma_int_t *lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue );
```
"""
function magmablas_chemm_vbatched_max(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
    ccall((:magmablas_chemm_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
end

"""
    magmablas_chemm_vbatched_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_chemm_vbatched_nocheck( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t *ldda, magmaFloatComplex **dB_array, magma_int_t *lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_chemm_vbatched_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_chemm_vbatched_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_chemm_vbatched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_chemm_vbatched( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t *ldda, magmaFloatComplex **dB_array, magma_int_t *lddb, magmaFloatComplex beta, magmaFloatComplex **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_chemm_vbatched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_chemm_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_cgemv_vbatched_max_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)

Level 2 
### Prototype
```c
void magmablas_cgemv_vbatched_max_nocheck( magma_trans_t trans, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex_ptr dA_array[], magma_int_t* ldda, magmaFloatComplex_ptr dx_array[], magma_int_t* incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_cgemv_vbatched_max_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
    ccall((:magmablas_cgemv_vbatched_max_nocheck, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
end

"""
    magmablas_cgemv_vbatched_max(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_cgemv_vbatched_max( magma_trans_t trans, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex_ptr dA_array[], magma_int_t* ldda, magmaFloatComplex_ptr dx_array[], magma_int_t* incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_cgemv_vbatched_max(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
    ccall((:magmablas_cgemv_vbatched_max, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
end

"""
    magmablas_cgemv_vbatched_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_cgemv_vbatched_nocheck( magma_trans_t trans, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex_ptr dA_array[], magma_int_t* ldda, magmaFloatComplex_ptr dx_array[], magma_int_t* incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_cgemv_vbatched_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_cgemv_vbatched_nocheck, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_cgemv_vbatched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_cgemv_vbatched( magma_trans_t trans, magma_int_t* m, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex_ptr dA_array[], magma_int_t* ldda, magmaFloatComplex_ptr dx_array[], magma_int_t* incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_cgemv_vbatched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_cgemv_vbatched, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_chemv_vbatched_max_nocheck(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, max_n, batchCount, queue)


### Prototype
```c
void magmablas_chemv_vbatched_max_nocheck( magma_uplo_t uplo, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex **dA_array, magma_int_t* ldda, magmaFloatComplex **dX_array, magma_int_t* incx, magmaFloatComplex beta, magmaFloatComplex **dY_array, magma_int_t* incy, magma_int_t max_n, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_chemv_vbatched_max_nocheck(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, max_n, batchCount, queue)
    ccall((:magmablas_chemv_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, max_n, batchCount, queue)
end

"""
    magmablas_chemv_vbatched_max(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_n, queue)


### Prototype
```c
void magmablas_chemv_vbatched_max( magma_uplo_t uplo, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex_ptr dA_array[], magma_int_t* ldda, magmaFloatComplex_ptr dx_array[], magma_int_t* incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_chemv_vbatched_max(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_n, queue)
    ccall((:magmablas_chemv_vbatched_max, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_n, queue)
end

"""
    magmablas_chemv_vbatched_nocheck(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_chemv_vbatched_nocheck( magma_uplo_t uplo, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex_ptr dA_array[], magma_int_t* ldda, magmaFloatComplex_ptr dx_array[], magma_int_t* incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_chemv_vbatched_nocheck(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_chemv_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_chemv_vbatched(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_chemv_vbatched( magma_uplo_t uplo, magma_int_t* n, magmaFloatComplex alpha, magmaFloatComplex_ptr dA_array[], magma_int_t* ldda, magmaFloatComplex_ptr dx_array[], magma_int_t* incx, magmaFloatComplex beta, magmaFloatComplex_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_chemv_vbatched(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_chemv_vbatched, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magma_cset_pointer_var_cc(output_array, input, lda, row, column, batch_offset, batchCount, queue)

Level 1 */
/* Auxiliary routines 
### Prototype
```c
void magma_cset_pointer_var_cc( magmaFloatComplex **output_array, magmaFloatComplex *input, magma_int_t *lda, magma_int_t row, magma_int_t column, magma_int_t *batch_offset, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cset_pointer_var_cc(output_array, input, lda, row, column, batch_offset, batchCount, queue)
    ccall((:magma_cset_pointer_var_cc, libmagma), Cvoid, (Ptr{Ptr{magmaFloatComplex}}, Ptr{magmaFloatComplex}, Ptr{magma_int_t}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), output_array, input, lda, row, column, batch_offset, batchCount, queue)
end

"""
    magma_cdisplace_pointers_var_cc(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_cdisplace_pointers_var_cc(magmaFloatComplex **output_array, magmaFloatComplex **input_array, magma_int_t* lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cdisplace_pointers_var_cc(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_cdisplace_pointers_var_cc, libmagma), Cvoid, (Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_cdisplace_pointers_var_cv(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_cdisplace_pointers_var_cv(magmaFloatComplex **output_array, magmaFloatComplex **input_array, magma_int_t* lda, magma_int_t row, magma_int_t* column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cdisplace_pointers_var_cv(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_cdisplace_pointers_var_cv, libmagma), Cvoid, (Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_cdisplace_pointers_var_vc(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_cdisplace_pointers_var_vc(magmaFloatComplex **output_array, magmaFloatComplex **input_array, magma_int_t* lda, magma_int_t *row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cdisplace_pointers_var_vc(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_cdisplace_pointers_var_vc, libmagma), Cvoid, (Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_cdisplace_pointers_var_vv(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_cdisplace_pointers_var_vv(magmaFloatComplex **output_array, magmaFloatComplex **input_array, magma_int_t* lda, magma_int_t* row, magma_int_t* column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_cdisplace_pointers_var_vv(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_cdisplace_pointers_var_vv, libmagma), Cvoid, (Ptr{Ptr{magmaFloatComplex}}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magmablas_claset_vbatched(uplo, max_m, max_n, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)


### Prototype
```c
void magmablas_claset_vbatched( magma_uplo_t uplo, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaFloatComplex offdiag, magmaFloatComplex diag, magmaFloatComplex_ptr dAarray[], magma_int_t* ldda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_claset_vbatched(uplo, max_m, max_n, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
    ccall((:magmablas_claset_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magmaFloatComplex, magmaFloatComplex, Ptr{magmaFloatComplex_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, max_m, max_n, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
end

"""
    magmablas_clacpy_vbatched(uplo, max_m, max_n, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)


### Prototype
```c
void magmablas_clacpy_vbatched( magma_uplo_t uplo, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, magmaFloatComplex const * const * dAarray, magma_int_t* ldda, magmaFloatComplex** dBarray, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_clacpy_vbatched(uplo, max_m, max_n, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
    ccall((:magmablas_clacpy_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, Ptr{Ptr{magmaFloatComplex}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, max_m, max_n, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
end

# no prototype is found for this function at magma_cvbatched.h:814:13, please use with caution
"""
    magma_get_cpotrf_vbatched_crossover()

 Aux. vbatched routines
### Prototype
```c
magma_int_t magma_get_cpotrf_vbatched_crossover();
```
"""
function magma_get_cpotrf_vbatched_crossover()
    ccall((:magma_get_cpotrf_vbatched_crossover, libmagma), magma_int_t, ())
end

"""
    magma_get_dgetrf_vbatched_nbparam(max_m, max_n, nb, recnb)

 control and tuning
### Prototype
```c
void magma_get_dgetrf_vbatched_nbparam(magma_int_t max_m, magma_int_t max_n, magma_int_t *nb, magma_int_t *recnb);
```
"""
function magma_get_dgetrf_vbatched_nbparam(max_m, max_n, nb, recnb)
    ccall((:magma_get_dgetrf_vbatched_nbparam, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), max_m, max_n, nb, recnb)
end

"""
    magma_dgetf2_fused_vbatched(max_M, max_N, max_minMN, max_MxN, M, N, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, batchCount, queue)

 LAPACK vbatched routines
### Prototype
```c
magma_int_t magma_dgetf2_fused_vbatched( magma_int_t max_M, magma_int_t max_N, magma_int_t max_minMN, magma_int_t max_MxN, magma_int_t* M, magma_int_t* N, double **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t **dipiv_array, magma_int_t ipiv_i, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetf2_fused_vbatched(max_M, max_N, max_minMN, max_MxN, M, N, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, batchCount, queue)
    ccall((:magma_dgetf2_fused_vbatched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), max_M, max_N, max_minMN, max_MxN, M, N, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, batchCount, queue)
end

"""
    magma_dgetf2_fused_sm_vbatched(max_M, max_N, max_minMN, max_MxN, m, n, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, gbstep, nthreads, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetf2_fused_sm_vbatched( magma_int_t max_M, magma_int_t max_N, magma_int_t max_minMN, magma_int_t max_MxN, magma_int_t* m, magma_int_t* n, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t** dipiv_array, magma_int_t ipiv_i, magma_int_t* info_array, magma_int_t gbstep, magma_int_t nthreads, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_dgetf2_fused_sm_vbatched(max_M, max_N, max_minMN, max_MxN, m, n, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, gbstep, nthreads, check_launch_only, batchCount, queue)
    ccall((:magma_dgetf2_fused_sm_vbatched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), max_M, max_N, max_minMN, max_MxN, m, n, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, gbstep, nthreads, check_launch_only, batchCount, queue)
end

"""
    magma_dgetrf_vbatched(m, n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetrf_vbatched( magma_int_t* m, magma_int_t* n, double **dA_array, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetrf_vbatched(m, n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_dgetrf_vbatched, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_dgetrf_vbatched_max_nocheck(m, n, minmn, max_m, max_n, max_minmn, max_mxn, nb, recnb, dA_array, ldda, ipiv_array, pivinfo_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetrf_vbatched_max_nocheck( magma_int_t* m, magma_int_t* n, magma_int_t* minmn, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, magma_int_t nb, magma_int_t recnb, double **dA_array, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t** pivinfo_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetrf_vbatched_max_nocheck(m, n, minmn, max_m, max_n, max_minmn, max_mxn, nb, recnb, dA_array, ldda, ipiv_array, pivinfo_array, info_array, batchCount, queue)
    ccall((:magma_dgetrf_vbatched_max_nocheck, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, minmn, max_m, max_n, max_minmn, max_mxn, nb, recnb, dA_array, ldda, ipiv_array, pivinfo_array, info_array, batchCount, queue)
end

"""
    magma_dgetrf_vbatched_max_nocheck_work(m, n, max_m, max_n, max_minmn, max_mxn, dA_array, ldda, dipiv_array, info_array, work, lwork, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetrf_vbatched_max_nocheck_work( magma_int_t* m, magma_int_t* n, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, double **dA_array, magma_int_t *ldda, magma_int_t **dipiv_array, magma_int_t *info_array, void* work, magma_int_t* lwork, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetrf_vbatched_max_nocheck_work(m, n, max_m, max_n, max_minmn, max_mxn, dA_array, ldda, dipiv_array, info_array, work, lwork, batchCount, queue)
    ccall((:magma_dgetrf_vbatched_max_nocheck_work, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, Ptr{Cvoid}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, max_m, max_n, max_minmn, max_mxn, dA_array, ldda, dipiv_array, info_array, work, lwork, batchCount, queue)
end

"""
    magma_idamax_vbatched(length, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_i, info_array, step, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_idamax_vbatched( magma_int_t length, magma_int_t *M, magma_int_t *N, double **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t** ipiv_array, magma_int_t ipiv_i, magma_int_t *info_array, magma_int_t step, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_idamax_vbatched(length, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_i, info_array, step, gbstep, batchCount, queue)
    ccall((:magma_idamax_vbatched, libmagma), magma_int_t, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), length, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_i, info_array, step, gbstep, batchCount, queue)
end

"""
    magma_dswap_vbatched(max_n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, piv_adjustment, batchCount, queue)


### Prototype
```c
magma_int_t magma_dswap_vbatched( magma_int_t max_n, magma_int_t *M, magma_int_t *N, double **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t** ipiv_array, magma_int_t piv_adjustment, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dswap_vbatched(max_n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, piv_adjustment, batchCount, queue)
    ccall((:magma_dswap_vbatched, libmagma), magma_int_t, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), max_n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, piv_adjustment, batchCount, queue)
end

"""
    magma_dscal_dger_vbatched(max_M, max_N, M, N, dA_array, Ai, Aj, ldda, info_array, step, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dscal_dger_vbatched( magma_int_t max_M, magma_int_t max_N, magma_int_t *M, magma_int_t *N, double **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t *info_array, magma_int_t step, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dscal_dger_vbatched(max_M, max_N, M, N, dA_array, Ai, Aj, ldda, info_array, step, gbstep, batchCount, queue)
    ccall((:magma_dscal_dger_vbatched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), max_M, max_N, M, N, dA_array, Ai, Aj, ldda, info_array, step, gbstep, batchCount, queue)
end

"""
    magma_dgetf2_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, dA_array, Ai, Aj, ldda, ipiv_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetf2_vbatched( magma_int_t *m, magma_int_t *n, magma_int_t *minmn, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, double **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetf2_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, dA_array, Ai, Aj, ldda, ipiv_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_dgetf2_vbatched, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, minmn, max_m, max_n, max_minmn, max_mxn, dA_array, Ai, Aj, ldda, ipiv_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_dgetrf_recpanel_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, min_recpnb, dA_array, Ai, Aj, ldda, dipiv_array, dipiv_i, dpivinfo_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dgetrf_recpanel_vbatched( magma_int_t* m, magma_int_t* n, magma_int_t* minmn, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, magma_int_t min_recpnb, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t** dipiv_array, magma_int_t dipiv_i, magma_int_t** dpivinfo_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dgetrf_recpanel_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, min_recpnb, dA_array, Ai, Aj, ldda, dipiv_array, dipiv_i, dpivinfo_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_dgetrf_recpanel_vbatched, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, minmn, max_m, max_n, max_minmn, max_mxn, min_recpnb, dA_array, Ai, Aj, ldda, dipiv_array, dipiv_i, dpivinfo_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_dlaswp_left_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)


### Prototype
```c
void magma_dlaswp_left_rowserial_vbatched( magma_int_t n, magma_int_t *M, magma_int_t *N, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t ipiv_offset, magma_int_t k1, magma_int_t k2, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dlaswp_left_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
    ccall((:magma_dlaswp_left_rowserial_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
end

"""
    magma_dlaswp_right_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)


### Prototype
```c
void magma_dlaswp_right_rowserial_vbatched( magma_int_t n, magma_int_t *M, magma_int_t *N, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t ipiv_offset, magma_int_t k1, magma_int_t k2, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dlaswp_right_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
    ccall((:magma_dlaswp_right_rowserial_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
end

"""
    magma_dlaswp_left_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)


### Prototype
```c
void magma_dlaswp_left_rowparallel_vbatched( magma_int_t n, magma_int_t* M, magma_int_t* N, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t k1, magma_int_t k2, magma_int_t **pivinfo_array, magma_int_t pivinfo_i, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dlaswp_left_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
    ccall((:magma_dlaswp_left_rowparallel_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
end

"""
    magma_dlaswp_right_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)


### Prototype
```c
void magma_dlaswp_right_rowparallel_vbatched( magma_int_t n, magma_int_t* M, magma_int_t* N, double** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t k1, magma_int_t k2, magma_int_t **pivinfo_array, magma_int_t pivinfo_i, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dlaswp_right_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
    ccall((:magma_dlaswp_right_rowparallel_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
end

"""
    magma_dpotrf_lpout_vbatched(uplo, n, max_n, dA_array, lda, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotrf_lpout_vbatched( magma_uplo_t uplo, magma_int_t *n, magma_int_t max_n, double **dA_array, magma_int_t *lda, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotrf_lpout_vbatched(uplo, n, max_n, dA_array, lda, gbstep, info_array, batchCount, queue)
    ccall((:magma_dpotrf_lpout_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, max_n, dA_array, lda, gbstep, info_array, batchCount, queue)
end

"""
    magma_dpotf2_vbatched(uplo, n, max_n, dA_array, lda, dA_displ, dW_displ, dB_displ, dC_displ, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotf2_vbatched( magma_uplo_t uplo, magma_int_t* n, magma_int_t max_n, double **dA_array, magma_int_t* lda, double **dA_displ, double **dW_displ, double **dB_displ, double **dC_displ, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotf2_vbatched(uplo, n, max_n, dA_array, lda, dA_displ, dW_displ, dB_displ, dC_displ, info_array, gbstep, batchCount, queue)
    ccall((:magma_dpotf2_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, max_n, dA_array, lda, dA_displ, dW_displ, dB_displ, dC_displ, info_array, gbstep, batchCount, queue)
end

"""
    magma_dpotrf_panel_vbatched(uplo, n, max_n, ibvec, nb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW0_displ, dW1_displ, dW2_displ, dW3_displ, dW4_displ, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotrf_panel_vbatched( magma_uplo_t uplo, magma_int_t* n, magma_int_t max_n, magma_int_t *ibvec, magma_int_t nb, double** dA_array, magma_int_t* ldda, double** dX_array, magma_int_t* dX_length, double** dinvA_array, magma_int_t* dinvA_length, double** dW0_displ, double** dW1_displ, double** dW2_displ, double** dW3_displ, double** dW4_displ, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotrf_panel_vbatched(uplo, n, max_n, ibvec, nb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW0_displ, dW1_displ, dW2_displ, dW3_displ, dW4_displ, info_array, gbstep, batchCount, queue)
    ccall((:magma_dpotrf_panel_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, max_n, ibvec, nb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW0_displ, dW1_displ, dW2_displ, dW3_displ, dW4_displ, info_array, gbstep, batchCount, queue)
end

"""
    magma_dpotrf_vbatched_max_nocheck(uplo, n, dA_array, ldda, info_array, batchCount, max_n, queue)


### Prototype
```c
magma_int_t magma_dpotrf_vbatched_max_nocheck( magma_uplo_t uplo, magma_int_t *n, double **dA_array, magma_int_t *ldda, magma_int_t *info_array, magma_int_t batchCount, magma_int_t max_n, magma_queue_t queue);
```
"""
function magma_dpotrf_vbatched_max_nocheck(uplo, n, dA_array, ldda, info_array, batchCount, max_n, queue)
    ccall((:magma_dpotrf_vbatched_max_nocheck, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, dA_array, ldda, info_array, batchCount, max_n, queue)
end

"""
    magma_dpotrf_vbatched(uplo, n, dA_array, ldda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_dpotrf_vbatched( magma_uplo_t uplo, magma_int_t *n, double **dA_array, magma_int_t *ldda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dpotrf_vbatched(uplo, n, dA_array, ldda, info_array, batchCount, queue)
    ccall((:magma_dpotrf_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, ldda, info_array, batchCount, queue)
end

"""
    magmablas_dgemm_vbatched_core(transA, transB, max_m, max_n, max_k, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)

 BLAS vbatched routines
/
/* Level 3 
### Prototype
```c
void magmablas_dgemm_vbatched_core( magma_trans_t transA, magma_trans_t transB, magma_int_t max_m, magma_int_t max_n, magma_int_t max_k, magma_int_t* m, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, double const * const * dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, double beta, double ** dC_array, magma_int_t Ci, magma_int_t Cj, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dgemm_vbatched_core(transA, transB, max_m, max_n, max_k, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
    ccall((:magmablas_dgemm_vbatched_core, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, max_m, max_n, max_k, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
end

"""
    magmablas_dgemm_vbatched_max_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_dgemm_vbatched_max_nocheck( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double const * const * dB_array, magma_int_t* lddb, double beta, double **dC_array, magma_int_t* lddc, magma_int_t max_m, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dgemm_vbatched_max_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
    ccall((:magmablas_dgemm_vbatched_max_nocheck, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
end

"""
    magmablas_dgemm_vbatched_max(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_dgemm_vbatched_max( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double const * const * dB_array, magma_int_t* lddb, double beta, double **dC_array, magma_int_t* lddc, magma_int_t max_m, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dgemm_vbatched_max(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
    ccall((:magmablas_dgemm_vbatched_max, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
end

"""
    magmablas_dgemm_vbatched_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dgemm_vbatched_nocheck( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double const * const * dB_array, magma_int_t* lddb, double beta, double **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dgemm_vbatched_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_dgemm_vbatched_nocheck, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dgemm_vbatched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dgemm_vbatched( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double const * const * dB_array, magma_int_t* lddb, double beta, double **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dgemm_vbatched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_dgemm_vbatched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dsyrk_internal_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_dsyrk_internal_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double const * const * dB_array, magma_int_t* lddb, double beta, double **dC_array, magma_int_t* lddc, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsyrk_internal_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)
    ccall((:magmablas_dsyrk_internal_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)
end

"""
    magmablas_dsyrk_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_dsyrk_vbatched_max_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double beta, double **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_dsyrk_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_dsyrk_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_dsyrk_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_dsyrk_vbatched_max( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double beta, double **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_dsyrk_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_dsyrk_vbatched_max, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_dsyrk_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dsyrk_vbatched_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double beta, double **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsyrk_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_dsyrk_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dsyrk_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dsyrk_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double beta, double **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsyrk_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_dsyrk_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dsyr2k_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_dsyr2k_vbatched_max_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double const * const * dB_array, magma_int_t* lddb, double beta, double **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_dsyr2k_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_dsyr2k_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_dsyr2k_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_dsyr2k_vbatched_max( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double const * const * dB_array, magma_int_t* lddb, double beta, double **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_dsyr2k_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_dsyr2k_vbatched_max, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_dsyr2k_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dsyr2k_vbatched_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double const * const * dB_array, magma_int_t* lddb, double beta, double **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsyr2k_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_dsyr2k_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dsyr2k_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dsyr2k_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, double alpha, double const * const * dA_array, magma_int_t* ldda, double const * const * dB_array, magma_int_t* lddb, double beta, double **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsyr2k_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_dsyr2k_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dtrmm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrmm_vbatched_core( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, double alpha, double **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, double **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrmm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_dtrmm_vbatched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_dtrmm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrmm_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, double alpha, double **dA_array, magma_int_t* ldda, double **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrmm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_dtrmm_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_dtrmm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrmm_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, double alpha, double **dA_array, magma_int_t* ldda, double **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrmm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_dtrmm_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_dtrmm_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrmm_vbatched_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, double alpha, double **dA_array, magma_int_t* ldda, double **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrmm_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_dtrmm_vbatched_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_dtrmm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrmm_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, double alpha, double **dA_array, magma_int_t* ldda, double **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrmm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_dtrmm_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_dtrsm_small_vbatched(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_small_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, double alpha, double **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, double **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrsm_small_vbatched(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_dtrsm_small_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_dtrsm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_vbatched_core( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, double alpha, double **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, double **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrsm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_dtrsm_vbatched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_dtrsm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, double alpha, double **dA_array, magma_int_t* ldda, double **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dtrsm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_dtrsm_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_dtrsm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, double alpha, double** dA_array, magma_int_t* ldda, double** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dtrsm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_dtrsm_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_dtrsm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, double alpha, double** dA_array, magma_int_t* ldda, double** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dtrsm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_dtrsm_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_dtrsm_inv_outofplace_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_dtrsm_inv_outofplace_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t *m, magma_int_t* n, double alpha, double** dA_array, magma_int_t* ldda, double** dB_array, magma_int_t* lddb, double** dX_array, magma_int_t* lddx, double** dinvA_array, magma_int_t* dinvA_length, double** dA_displ, double** dB_displ, double** dX_displ, double** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_dtrsm_inv_outofplace_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
    ccall((:magmablas_dtrsm_inv_outofplace_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
end

"""
    magmablas_dtrsm_inv_work_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_dtrsm_inv_work_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t* m, magma_int_t* n, double alpha, double** dA_array, magma_int_t* ldda, double** dB_array, magma_int_t* lddb, double** dX_array, magma_int_t* lddx, double** dinvA_array, magma_int_t* dinvA_length, double** dA_displ, double** dB_displ, double** dX_displ, double** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_dtrsm_inv_work_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
    ccall((:magmablas_dtrsm_inv_work_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
end

"""
    magmablas_dtrsm_inv_vbatched_max_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_dtrsm_inv_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, double alpha, double** dA_array, magma_int_t* ldda, double** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_dtrsm_inv_vbatched_max_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
    ccall((:magmablas_dtrsm_inv_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
end

"""
    magmablas_dtrsm_inv_vbatched_max(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_dtrsm_inv_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, double alpha, double** dA_array, magma_int_t* ldda, double** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_dtrsm_inv_vbatched_max(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
    ccall((:magmablas_dtrsm_inv_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
end

"""
    magmablas_dtrsm_inv_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_inv_vbatched_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, double alpha, double** dA_array, magma_int_t* ldda, double** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dtrsm_inv_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_dtrsm_inv_vbatched_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_dtrsm_inv_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dtrsm_inv_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, double alpha, double** dA_array, magma_int_t* ldda, double** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dtrsm_inv_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_dtrsm_inv_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_dtrtri_diag_vbatched(uplo, diag, nmax, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_dtrtri_diag_vbatched( magma_uplo_t uplo, magma_diag_t diag, magma_int_t nmax, magma_int_t *n, double const * const *dA_array, magma_int_t *ldda, double **dinvA_array, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dtrtri_diag_vbatched(uplo, diag, nmax, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
    ccall((:magmablas_dtrtri_diag_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_diag_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, magma_int_t, magma_int_t, magma_queue_t), uplo, diag, nmax, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
end

"""
    magmablas_dsymm_vbatched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, roffA, coffA, roffB, coffB, roffC, coffC, specM, specN, batchCount, queue)


### Prototype
```c
void magmablas_dsymm_vbatched_core( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, double alpha, double **dA_array, magma_int_t *ldda, double **dB_array, magma_int_t *lddb, double beta, double **dC_array, magma_int_t *lddc, magma_int_t max_m, magma_int_t max_n, magma_int_t roffA, magma_int_t coffA, magma_int_t roffB, magma_int_t coffB, magma_int_t roffC, magma_int_t coffC, magma_int_t specM, magma_int_t specN, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsymm_vbatched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, roffA, coffA, roffB, coffB, roffC, coffC, specM, specN, batchCount, queue)
    ccall((:magmablas_dsymm_vbatched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, roffA, coffA, roffB, coffB, roffC, coffC, specM, specN, batchCount, queue)
end

"""
    magmablas_dsymm_vbatched_max_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_dsymm_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, double alpha, double **dA_array, magma_int_t *ldda, double **dB_array, magma_int_t *lddb, double beta, double **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue );
```
"""
function magmablas_dsymm_vbatched_max_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
    ccall((:magmablas_dsymm_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
end

"""
    magmablas_dsymm_vbatched_max(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_dsymm_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, double alpha, double **dA_array, magma_int_t *ldda, double **dB_array, magma_int_t *lddb, double beta, double **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue );
```
"""
function magmablas_dsymm_vbatched_max(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
    ccall((:magmablas_dsymm_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
end

"""
    magmablas_dsymm_vbatched_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dsymm_vbatched_nocheck( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, double alpha, double **dA_array, magma_int_t *ldda, double **dB_array, magma_int_t *lddb, double beta, double **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsymm_vbatched_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_dsymm_vbatched_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dsymm_vbatched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_dsymm_vbatched( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, double alpha, double **dA_array, magma_int_t *ldda, double **dB_array, magma_int_t *lddb, double beta, double **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsymm_vbatched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_dsymm_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_dgemv_vbatched_max_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)

Level 2 
### Prototype
```c
void magmablas_dgemv_vbatched_max_nocheck( magma_trans_t trans, magma_int_t* m, magma_int_t* n, double alpha, magmaDouble_ptr dA_array[], magma_int_t* ldda, magmaDouble_ptr dx_array[], magma_int_t* incx, double beta, magmaDouble_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_dgemv_vbatched_max_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
    ccall((:magmablas_dgemv_vbatched_max_nocheck, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
end

"""
    magmablas_dgemv_vbatched_max(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_dgemv_vbatched_max( magma_trans_t trans, magma_int_t* m, magma_int_t* n, double alpha, magmaDouble_ptr dA_array[], magma_int_t* ldda, magmaDouble_ptr dx_array[], magma_int_t* incx, double beta, magmaDouble_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_dgemv_vbatched_max(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
    ccall((:magmablas_dgemv_vbatched_max, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
end

"""
    magmablas_dgemv_vbatched_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_dgemv_vbatched_nocheck( magma_trans_t trans, magma_int_t* m, magma_int_t* n, double alpha, magmaDouble_ptr dA_array[], magma_int_t* ldda, magmaDouble_ptr dx_array[], magma_int_t* incx, double beta, magmaDouble_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dgemv_vbatched_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_dgemv_vbatched_nocheck, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_dgemv_vbatched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_dgemv_vbatched( magma_trans_t trans, magma_int_t* m, magma_int_t* n, double alpha, magmaDouble_ptr dA_array[], magma_int_t* ldda, magmaDouble_ptr dx_array[], magma_int_t* incx, double beta, magmaDouble_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dgemv_vbatched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_dgemv_vbatched, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_dsymv_vbatched_max_nocheck(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, max_n, batchCount, queue)


### Prototype
```c
void magmablas_dsymv_vbatched_max_nocheck( magma_uplo_t uplo, magma_int_t* n, double alpha, double **dA_array, magma_int_t* ldda, double **dX_array, magma_int_t* incx, double beta, double **dY_array, magma_int_t* incy, magma_int_t max_n, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dsymv_vbatched_max_nocheck(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, max_n, batchCount, queue)
    ccall((:magmablas_dsymv_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Cdouble, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, max_n, batchCount, queue)
end

"""
    magmablas_dsymv_vbatched_max(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_n, queue)


### Prototype
```c
void magmablas_dsymv_vbatched_max( magma_uplo_t uplo, magma_int_t* n, double alpha, magmaDouble_ptr dA_array[], magma_int_t* ldda, magmaDouble_ptr dx_array[], magma_int_t* incx, double beta, magmaDouble_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_dsymv_vbatched_max(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_n, queue)
    ccall((:magmablas_dsymv_vbatched_max, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_n, queue)
end

"""
    magmablas_dsymv_vbatched_nocheck(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_dsymv_vbatched_nocheck( magma_uplo_t uplo, magma_int_t* n, double alpha, magmaDouble_ptr dA_array[], magma_int_t* ldda, magmaDouble_ptr dx_array[], magma_int_t* incx, double beta, magmaDouble_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dsymv_vbatched_nocheck(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_dsymv_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_dsymv_vbatched(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_dsymv_vbatched( magma_uplo_t uplo, magma_int_t* n, double alpha, magmaDouble_ptr dA_array[], magma_int_t* ldda, magmaDouble_ptr dx_array[], magma_int_t* incx, double beta, magmaDouble_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dsymv_vbatched(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_dsymv_vbatched, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magma_dset_pointer_var_cc(output_array, input, lda, row, column, batch_offset, batchCount, queue)

Level 1 */
/* Auxiliary routines 
### Prototype
```c
void magma_dset_pointer_var_cc( double **output_array, double *input, magma_int_t *lda, magma_int_t row, magma_int_t column, magma_int_t *batch_offset, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_dset_pointer_var_cc(output_array, input, lda, row, column, batch_offset, batchCount, queue)
    ccall((:magma_dset_pointer_var_cc, libmagma), Cvoid, (Ptr{Ptr{Cdouble}}, Ptr{Cdouble}, Ptr{magma_int_t}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), output_array, input, lda, row, column, batch_offset, batchCount, queue)
end

"""
    magma_ddisplace_pointers_var_cc(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_ddisplace_pointers_var_cc(double **output_array, double **input_array, magma_int_t* lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_ddisplace_pointers_var_cc(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_ddisplace_pointers_var_cc, libmagma), Cvoid, (Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_ddisplace_pointers_var_cv(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_ddisplace_pointers_var_cv(double **output_array, double **input_array, magma_int_t* lda, magma_int_t row, magma_int_t* column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_ddisplace_pointers_var_cv(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_ddisplace_pointers_var_cv, libmagma), Cvoid, (Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_ddisplace_pointers_var_vc(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_ddisplace_pointers_var_vc(double **output_array, double **input_array, magma_int_t* lda, magma_int_t *row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_ddisplace_pointers_var_vc(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_ddisplace_pointers_var_vc, libmagma), Cvoid, (Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_ddisplace_pointers_var_vv(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_ddisplace_pointers_var_vv(double **output_array, double **input_array, magma_int_t* lda, magma_int_t* row, magma_int_t* column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_ddisplace_pointers_var_vv(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_ddisplace_pointers_var_vv, libmagma), Cvoid, (Ptr{Ptr{Cdouble}}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magmablas_dlaset_vbatched(uplo, max_m, max_n, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)


### Prototype
```c
void magmablas_dlaset_vbatched( magma_uplo_t uplo, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, double offdiag, double diag, magmaDouble_ptr dAarray[], magma_int_t* ldda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_dlaset_vbatched(uplo, max_m, max_n, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
    ccall((:magmablas_dlaset_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Cdouble, Ptr{magmaDouble_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, max_m, max_n, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
end

"""
    magmablas_dlacpy_vbatched(uplo, max_m, max_n, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)


### Prototype
```c
void magmablas_dlacpy_vbatched( magma_uplo_t uplo, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, double const * const * dAarray, magma_int_t* ldda, double** dBarray, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_dlacpy_vbatched(uplo, max_m, max_n, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
    ccall((:magmablas_dlacpy_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, Ptr{Ptr{Cdouble}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, max_m, max_n, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
end

# no prototype is found for this function at magma_dvbatched.h:814:13, please use with caution
"""
    magma_get_dpotrf_vbatched_crossover()

 Aux. vbatched routines
### Prototype
```c
magma_int_t magma_get_dpotrf_vbatched_crossover();
```
"""
function magma_get_dpotrf_vbatched_crossover()
    ccall((:magma_get_dpotrf_vbatched_crossover, libmagma), magma_int_t, ())
end

"""
    magma_get_sgetrf_vbatched_nbparam(max_m, max_n, nb, recnb)

 control and tuning
### Prototype
```c
void magma_get_sgetrf_vbatched_nbparam(magma_int_t max_m, magma_int_t max_n, magma_int_t *nb, magma_int_t *recnb);
```
"""
function magma_get_sgetrf_vbatched_nbparam(max_m, max_n, nb, recnb)
    ccall((:magma_get_sgetrf_vbatched_nbparam, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), max_m, max_n, nb, recnb)
end

"""
    magma_sgetf2_fused_vbatched(max_M, max_N, max_minMN, max_MxN, M, N, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, batchCount, queue)

 LAPACK vbatched routines
### Prototype
```c
magma_int_t magma_sgetf2_fused_vbatched( magma_int_t max_M, magma_int_t max_N, magma_int_t max_minMN, magma_int_t max_MxN, magma_int_t* M, magma_int_t* N, float **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t **dipiv_array, magma_int_t ipiv_i, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetf2_fused_vbatched(max_M, max_N, max_minMN, max_MxN, M, N, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, batchCount, queue)
    ccall((:magma_sgetf2_fused_vbatched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), max_M, max_N, max_minMN, max_MxN, M, N, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, batchCount, queue)
end

"""
    magma_sgetf2_fused_sm_vbatched(max_M, max_N, max_minMN, max_MxN, m, n, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, gbstep, nthreads, check_launch_only, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetf2_fused_sm_vbatched( magma_int_t max_M, magma_int_t max_N, magma_int_t max_minMN, magma_int_t max_MxN, magma_int_t* m, magma_int_t* n, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t** dipiv_array, magma_int_t ipiv_i, magma_int_t* info_array, magma_int_t gbstep, magma_int_t nthreads, magma_int_t check_launch_only, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_sgetf2_fused_sm_vbatched(max_M, max_N, max_minMN, max_MxN, m, n, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, gbstep, nthreads, check_launch_only, batchCount, queue)
    ccall((:magma_sgetf2_fused_sm_vbatched, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), max_M, max_N, max_minMN, max_MxN, m, n, dA_array, Ai, Aj, ldda, dipiv_array, ipiv_i, info_array, gbstep, nthreads, check_launch_only, batchCount, queue)
end

"""
    magma_sgetrf_vbatched(m, n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetrf_vbatched( magma_int_t* m, magma_int_t* n, float **dA_array, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetrf_vbatched(m, n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
    ccall((:magma_sgetrf_vbatched, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, dA_array, ldda, ipiv_array, info_array, batchCount, queue)
end

"""
    magma_sgetrf_vbatched_max_nocheck(m, n, minmn, max_m, max_n, max_minmn, max_mxn, nb, recnb, dA_array, ldda, ipiv_array, pivinfo_array, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetrf_vbatched_max_nocheck( magma_int_t* m, magma_int_t* n, magma_int_t* minmn, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, magma_int_t nb, magma_int_t recnb, float **dA_array, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t** pivinfo_array, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetrf_vbatched_max_nocheck(m, n, minmn, max_m, max_n, max_minmn, max_mxn, nb, recnb, dA_array, ldda, ipiv_array, pivinfo_array, info_array, batchCount, queue)
    ccall((:magma_sgetrf_vbatched_max_nocheck, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, minmn, max_m, max_n, max_minmn, max_mxn, nb, recnb, dA_array, ldda, ipiv_array, pivinfo_array, info_array, batchCount, queue)
end

"""
    magma_sgetrf_vbatched_max_nocheck_work(m, n, max_m, max_n, max_minmn, max_mxn, dA_array, ldda, dipiv_array, info_array, work, lwork, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetrf_vbatched_max_nocheck_work( magma_int_t* m, magma_int_t* n, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, float **dA_array, magma_int_t *ldda, magma_int_t **dipiv_array, magma_int_t *info_array, void* work, magma_int_t* lwork, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetrf_vbatched_max_nocheck_work(m, n, max_m, max_n, max_minmn, max_mxn, dA_array, ldda, dipiv_array, info_array, work, lwork, batchCount, queue)
    ccall((:magma_sgetrf_vbatched_max_nocheck_work, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, Ptr{Cvoid}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, max_m, max_n, max_minmn, max_mxn, dA_array, ldda, dipiv_array, info_array, work, lwork, batchCount, queue)
end

"""
    magma_isamax_vbatched(length, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_i, info_array, step, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_isamax_vbatched( magma_int_t length, magma_int_t *M, magma_int_t *N, float **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t** ipiv_array, magma_int_t ipiv_i, magma_int_t *info_array, magma_int_t step, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_isamax_vbatched(length, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_i, info_array, step, gbstep, batchCount, queue)
    ccall((:magma_isamax_vbatched, libmagma), magma_int_t, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), length, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_i, info_array, step, gbstep, batchCount, queue)
end

"""
    magma_sswap_vbatched(max_n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, piv_adjustment, batchCount, queue)


### Prototype
```c
magma_int_t magma_sswap_vbatched( magma_int_t max_n, magma_int_t *M, magma_int_t *N, float **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t** ipiv_array, magma_int_t piv_adjustment, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sswap_vbatched(max_n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, piv_adjustment, batchCount, queue)
    ccall((:magma_sswap_vbatched, libmagma), magma_int_t, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), max_n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, piv_adjustment, batchCount, queue)
end

"""
    magma_sscal_sger_vbatched(max_M, max_N, M, N, dA_array, Ai, Aj, ldda, info_array, step, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_sscal_sger_vbatched( magma_int_t max_M, magma_int_t max_N, magma_int_t *M, magma_int_t *N, float **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t *info_array, magma_int_t step, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sscal_sger_vbatched(max_M, max_N, M, N, dA_array, Ai, Aj, ldda, info_array, step, gbstep, batchCount, queue)
    ccall((:magma_sscal_sger_vbatched, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), max_M, max_N, M, N, dA_array, Ai, Aj, ldda, info_array, step, gbstep, batchCount, queue)
end

"""
    magma_sgetf2_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, dA_array, Ai, Aj, ldda, ipiv_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetf2_vbatched( magma_int_t *m, magma_int_t *n, magma_int_t *minmn, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, float **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetf2_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, dA_array, Ai, Aj, ldda, ipiv_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_sgetf2_vbatched, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, minmn, max_m, max_n, max_minmn, max_mxn, dA_array, Ai, Aj, ldda, ipiv_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_sgetrf_recpanel_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, min_recpnb, dA_array, Ai, Aj, ldda, dipiv_array, dipiv_i, dpivinfo_array, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_sgetrf_recpanel_vbatched( magma_int_t* m, magma_int_t* n, magma_int_t* minmn, magma_int_t max_m, magma_int_t max_n, magma_int_t max_minmn, magma_int_t max_mxn, magma_int_t min_recpnb, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t** dipiv_array, magma_int_t dipiv_i, magma_int_t** dpivinfo_array, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sgetrf_recpanel_vbatched(m, n, minmn, max_m, max_n, max_minmn, max_mxn, min_recpnb, dA_array, Ai, Aj, ldda, dipiv_array, dipiv_i, dpivinfo_array, info_array, gbstep, batchCount, queue)
    ccall((:magma_sgetrf_recpanel_vbatched, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{Ptr{magma_int_t}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), m, n, minmn, max_m, max_n, max_minmn, max_mxn, min_recpnb, dA_array, Ai, Aj, ldda, dipiv_array, dipiv_i, dpivinfo_array, info_array, gbstep, batchCount, queue)
end

"""
    magma_slaswp_left_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)


### Prototype
```c
void magma_slaswp_left_rowserial_vbatched( magma_int_t n, magma_int_t *M, magma_int_t *N, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t ipiv_offset, magma_int_t k1, magma_int_t k2, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_slaswp_left_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
    ccall((:magma_slaswp_left_rowserial_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
end

"""
    magma_slaswp_right_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)


### Prototype
```c
void magma_slaswp_right_rowserial_vbatched( magma_int_t n, magma_int_t *M, magma_int_t *N, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t *ldda, magma_int_t **ipiv_array, magma_int_t ipiv_offset, magma_int_t k1, magma_int_t k2, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_slaswp_right_rowserial_vbatched(n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
    ccall((:magma_slaswp_right_rowserial_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, ipiv_array, ipiv_offset, k1, k2, batchCount, queue)
end

"""
    magma_slaswp_left_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)


### Prototype
```c
void magma_slaswp_left_rowparallel_vbatched( magma_int_t n, magma_int_t* M, magma_int_t* N, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t k1, magma_int_t k2, magma_int_t **pivinfo_array, magma_int_t pivinfo_i, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_slaswp_left_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
    ccall((:magma_slaswp_left_rowparallel_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
end

"""
    magma_slaswp_right_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)


### Prototype
```c
void magma_slaswp_right_rowparallel_vbatched( magma_int_t n, magma_int_t* M, magma_int_t* N, float** dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, magma_int_t k1, magma_int_t k2, magma_int_t **pivinfo_array, magma_int_t pivinfo_i, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_slaswp_right_rowparallel_vbatched(n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
    ccall((:magma_slaswp_right_rowparallel_vbatched, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, magma_int_t, magma_queue_t), n, M, N, dA_array, Ai, Aj, ldda, k1, k2, pivinfo_array, pivinfo_i, batchCount, queue)
end

"""
    magma_spotrf_lpout_vbatched(uplo, n, max_n, dA_array, lda, gbstep, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotrf_lpout_vbatched( magma_uplo_t uplo, magma_int_t *n, magma_int_t max_n, float **dA_array, magma_int_t *lda, magma_int_t gbstep, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotrf_lpout_vbatched(uplo, n, max_n, dA_array, lda, gbstep, info_array, batchCount, queue)
    ccall((:magma_spotrf_lpout_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, max_n, dA_array, lda, gbstep, info_array, batchCount, queue)
end

"""
    magma_spotf2_vbatched(uplo, n, max_n, dA_array, lda, dA_displ, dW_displ, dB_displ, dC_displ, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotf2_vbatched( magma_uplo_t uplo, magma_int_t* n, magma_int_t max_n, float **dA_array, magma_int_t* lda, float **dA_displ, float **dW_displ, float **dB_displ, float **dC_displ, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotf2_vbatched(uplo, n, max_n, dA_array, lda, dA_displ, dW_displ, dB_displ, dC_displ, info_array, gbstep, batchCount, queue)
    ccall((:magma_spotf2_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, max_n, dA_array, lda, dA_displ, dW_displ, dB_displ, dC_displ, info_array, gbstep, batchCount, queue)
end

"""
    magma_spotrf_panel_vbatched(uplo, n, max_n, ibvec, nb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW0_displ, dW1_displ, dW2_displ, dW3_displ, dW4_displ, info_array, gbstep, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotrf_panel_vbatched( magma_uplo_t uplo, magma_int_t* n, magma_int_t max_n, magma_int_t *ibvec, magma_int_t nb, float** dA_array, magma_int_t* ldda, float** dX_array, magma_int_t* dX_length, float** dinvA_array, magma_int_t* dinvA_length, float** dW0_displ, float** dW1_displ, float** dW2_displ, float** dW3_displ, float** dW4_displ, magma_int_t *info_array, magma_int_t gbstep, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotrf_panel_vbatched(uplo, n, max_n, ibvec, nb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW0_displ, dW1_displ, dW2_displ, dW3_displ, dW4_displ, info_array, gbstep, batchCount, queue)
    ccall((:magma_spotrf_panel_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, max_n, ibvec, nb, dA_array, ldda, dX_array, dX_length, dinvA_array, dinvA_length, dW0_displ, dW1_displ, dW2_displ, dW3_displ, dW4_displ, info_array, gbstep, batchCount, queue)
end

"""
    magma_spotrf_vbatched_max_nocheck(uplo, n, dA_array, ldda, info_array, batchCount, max_n, queue)


### Prototype
```c
magma_int_t magma_spotrf_vbatched_max_nocheck( magma_uplo_t uplo, magma_int_t *n, float **dA_array, magma_int_t *ldda, magma_int_t *info_array, magma_int_t batchCount, magma_int_t max_n, magma_queue_t queue);
```
"""
function magma_spotrf_vbatched_max_nocheck(uplo, n, dA_array, ldda, info_array, batchCount, max_n, queue)
    ccall((:magma_spotrf_vbatched_max_nocheck, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, dA_array, ldda, info_array, batchCount, max_n, queue)
end

"""
    magma_spotrf_vbatched(uplo, n, dA_array, ldda, info_array, batchCount, queue)


### Prototype
```c
magma_int_t magma_spotrf_vbatched( magma_uplo_t uplo, magma_int_t *n, float **dA_array, magma_int_t *ldda, magma_int_t *info_array, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_spotrf_vbatched(uplo, n, dA_array, ldda, info_array, batchCount, queue)
    ccall((:magma_spotrf_vbatched, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, dA_array, ldda, info_array, batchCount, queue)
end

"""
    magmablas_sgemm_vbatched_core(transA, transB, max_m, max_n, max_k, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)

 BLAS vbatched routines
/
/* Level 3 
### Prototype
```c
void magmablas_sgemm_vbatched_core( magma_trans_t transA, magma_trans_t transB, magma_int_t max_m, magma_int_t max_n, magma_int_t max_k, magma_int_t* m, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, float const * const * dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, float beta, float ** dC_array, magma_int_t Ci, magma_int_t Cj, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_sgemm_vbatched_core(transA, transB, max_m, max_n, max_k, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
    ccall((:magmablas_sgemm_vbatched_core, libmagma), Cvoid, (magma_trans_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, max_m, max_n, max_k, m, n, k, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, beta, dC_array, Ci, Cj, lddc, batchCount, queue)
end

"""
    magmablas_sgemm_vbatched_max_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_sgemm_vbatched_max_nocheck( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float const * const * dB_array, magma_int_t* lddb, float beta, float **dC_array, magma_int_t* lddc, magma_int_t max_m, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_sgemm_vbatched_max_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
    ccall((:magmablas_sgemm_vbatched_max_nocheck, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
end

"""
    magmablas_sgemm_vbatched_max(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_sgemm_vbatched_max( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float const * const * dB_array, magma_int_t* lddb, float beta, float **dC_array, magma_int_t* lddc, magma_int_t max_m, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_sgemm_vbatched_max(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
    ccall((:magmablas_sgemm_vbatched_max, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, max_k, batchCount, queue)
end

"""
    magmablas_sgemm_vbatched_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_sgemm_vbatched_nocheck( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float const * const * dB_array, magma_int_t* lddb, float beta, float **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_sgemm_vbatched_nocheck(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_sgemm_vbatched_nocheck, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_sgemm_vbatched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_sgemm_vbatched( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float const * const * dB_array, magma_int_t* lddb, float beta, float **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_sgemm_vbatched(transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_sgemm_vbatched, libmagma), Cvoid, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, m, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_ssyrk_internal_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)


### Prototype
```c
void magmablas_ssyrk_internal_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float const * const * dB_array, magma_int_t* lddb, float beta, float **dC_array, magma_int_t* lddc, magma_int_t max_n, magma_int_t max_k, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssyrk_internal_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)
    ccall((:magmablas_ssyrk_internal_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_n, max_k, batchCount, queue)
end

"""
    magmablas_ssyrk_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_ssyrk_vbatched_max_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float beta, float **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_ssyrk_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_ssyrk_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_ssyrk_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_ssyrk_vbatched_max( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float beta, float **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_ssyrk_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_ssyrk_vbatched_max, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_ssyrk_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_ssyrk_vbatched_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float beta, float **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssyrk_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_ssyrk_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_ssyrk_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_ssyrk_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float beta, float **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssyrk_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_ssyrk_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_ssyr2k_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_ssyr2k_vbatched_max_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float const * const * dB_array, magma_int_t* lddb, float beta, float **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_ssyr2k_vbatched_max_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_ssyr2k_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_ssyr2k_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)


### Prototype
```c
void magmablas_ssyr2k_vbatched_max( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float const * const * dB_array, magma_int_t* lddb, float beta, float **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_int_t max_n, magma_int_t max_k, magma_queue_t queue );
```
"""
function magmablas_ssyr2k_vbatched_max(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
    ccall((:magmablas_ssyr2k_vbatched_max, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_n, max_k, queue)
end

"""
    magmablas_ssyr2k_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_ssyr2k_vbatched_nocheck( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float const * const * dB_array, magma_int_t* lddb, float beta, float **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssyr2k_vbatched_nocheck(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_ssyr2k_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_ssyr2k_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_ssyr2k_vbatched( magma_uplo_t uplo, magma_trans_t trans, magma_int_t* n, magma_int_t* k, float alpha, float const * const * dA_array, magma_int_t* ldda, float const * const * dB_array, magma_int_t* lddb, float beta, float **dC_array, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssyr2k_vbatched(uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_ssyr2k_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_strmm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strmm_vbatched_core( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, float alpha, float **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, float **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strmm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_strmm_vbatched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_strmm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strmm_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, float alpha, float **dA_array, magma_int_t* ldda, float **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strmm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_strmm_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_strmm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strmm_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, float alpha, float **dA_array, magma_int_t* ldda, float **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strmm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_strmm_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_strmm_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strmm_vbatched_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, float alpha, float **dA_array, magma_int_t* ldda, float **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strmm_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_strmm_vbatched_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_strmm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strmm_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, float alpha, float **dA_array, magma_int_t* ldda, float **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strmm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_strmm_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_strsm_small_vbatched(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strsm_small_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, float alpha, float **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, float **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strsm_small_vbatched(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_strsm_small_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_strsm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strsm_vbatched_core( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, float alpha, float **dA_array, magma_int_t Ai, magma_int_t Aj, magma_int_t* ldda, float **dB_array, magma_int_t Bi, magma_int_t Bj, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strsm_vbatched_core(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
    ccall((:magmablas_strsm_vbatched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, Ai, Aj, ldda, dB_array, Bi, Bj, lddb, batchCount, queue)
end

"""
    magmablas_strsm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strsm_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, float alpha, float **dA_array, magma_int_t* ldda, float **dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_strsm_vbatched_max_nocheck(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_strsm_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_strsm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strsm_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, float alpha, float** dA_array, magma_int_t* ldda, float** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_strsm_vbatched_max(side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_strsm_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, max_m, max_n, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_strsm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strsm_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, float alpha, float** dA_array, magma_int_t* ldda, float** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_strsm_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_strsm_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_strsm_inv_outofplace_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_strsm_inv_outofplace_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t *m, magma_int_t* n, float alpha, float** dA_array, magma_int_t* ldda, float** dB_array, magma_int_t* lddb, float** dX_array, magma_int_t* lddx, float** dinvA_array, magma_int_t* dinvA_length, float** dA_displ, float** dB_displ, float** dX_displ, float** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_strsm_inv_outofplace_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
    ccall((:magmablas_strsm_inv_outofplace_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
end

"""
    magmablas_strsm_inv_work_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_strsm_inv_work_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t flag, magma_int_t* m, magma_int_t* n, float alpha, float** dA_array, magma_int_t* ldda, float** dB_array, magma_int_t* lddb, float** dX_array, magma_int_t* lddx, float** dinvA_array, magma_int_t* dinvA_length, float** dA_displ, float** dB_displ, float** dX_displ, float** dinvA_displ, magma_int_t resetozero, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_strsm_inv_work_vbatched(side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
    ccall((:magmablas_strsm_inv_work_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, flag, m, n, alpha, dA_array, ldda, dB_array, lddb, dX_array, lddx, dinvA_array, dinvA_length, dA_displ, dB_displ, dX_displ, dinvA_displ, resetozero, batchCount, max_m, max_n, queue)
end

"""
    magmablas_strsm_inv_vbatched_max_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_strsm_inv_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, float alpha, float** dA_array, magma_int_t* ldda, float** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_strsm_inv_vbatched_max_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
    ccall((:magmablas_strsm_inv_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
end

"""
    magmablas_strsm_inv_vbatched_max(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_strsm_inv_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, float alpha, float** dA_array, magma_int_t* ldda, float** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_strsm_inv_vbatched_max(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
    ccall((:magmablas_strsm_inv_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, max_m, max_n, queue)
end

"""
    magmablas_strsm_inv_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strsm_inv_vbatched_nocheck( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, float alpha, float** dA_array, magma_int_t* ldda, float** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_strsm_inv_vbatched_nocheck(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_strsm_inv_vbatched_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_strsm_inv_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)


### Prototype
```c
void magmablas_strsm_inv_vbatched( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, float alpha, float** dA_array, magma_int_t* ldda, float** dB_array, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_strsm_inv_vbatched(side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
    ccall((:magmablas_strsm_inv_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, alpha, dA_array, ldda, dB_array, lddb, batchCount, queue)
end

"""
    magmablas_strtri_diag_vbatched(uplo, diag, nmax, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)


### Prototype
```c
void magmablas_strtri_diag_vbatched( magma_uplo_t uplo, magma_diag_t diag, magma_int_t nmax, magma_int_t *n, float const * const *dA_array, magma_int_t *ldda, float **dinvA_array, magma_int_t resetozero, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_strtri_diag_vbatched(uplo, diag, nmax, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
    ccall((:magmablas_strtri_diag_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_diag_t, magma_int_t, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, magma_int_t, magma_int_t, magma_queue_t), uplo, diag, nmax, n, dA_array, ldda, dinvA_array, resetozero, batchCount, queue)
end

"""
    magmablas_ssymm_vbatched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, roffA, coffA, roffB, coffB, roffC, coffC, specM, specN, batchCount, queue)


### Prototype
```c
void magmablas_ssymm_vbatched_core( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, float alpha, float **dA_array, magma_int_t *ldda, float **dB_array, magma_int_t *lddb, float beta, float **dC_array, magma_int_t *lddc, magma_int_t max_m, magma_int_t max_n, magma_int_t roffA, magma_int_t coffA, magma_int_t roffB, magma_int_t coffB, magma_int_t roffC, magma_int_t coffC, magma_int_t specM, magma_int_t specN, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssymm_vbatched_core(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, roffA, coffA, roffB, coffB, roffC, coffC, specM, specN, batchCount, queue)
    ccall((:magmablas_ssymm_vbatched_core, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, max_m, max_n, roffA, coffA, roffB, coffB, roffC, coffC, specM, specN, batchCount, queue)
end

"""
    magmablas_ssymm_vbatched_max_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_ssymm_vbatched_max_nocheck( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, float alpha, float **dA_array, magma_int_t *ldda, float **dB_array, magma_int_t *lddb, float beta, float **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue );
```
"""
function magmablas_ssymm_vbatched_max_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
    ccall((:magmablas_ssymm_vbatched_max_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
end

"""
    magmablas_ssymm_vbatched_max(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_ssymm_vbatched_max( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, float alpha, float **dA_array, magma_int_t *ldda, float **dB_array, magma_int_t *lddb, float beta, float **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue );
```
"""
function magmablas_ssymm_vbatched_max(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
    ccall((:magmablas_ssymm_vbatched_max, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, max_m, max_n, queue)
end

"""
    magmablas_ssymm_vbatched_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_ssymm_vbatched_nocheck( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, float alpha, float **dA_array, magma_int_t *ldda, float **dB_array, magma_int_t *lddb, float beta, float **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssymm_vbatched_nocheck(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_ssymm_vbatched_nocheck, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_ssymm_vbatched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)


### Prototype
```c
void magmablas_ssymm_vbatched( magma_side_t side, magma_uplo_t uplo, magma_int_t *m, magma_int_t *n, float alpha, float **dA_array, magma_int_t *ldda, float **dB_array, magma_int_t *lddb, float beta, float **dC_array, magma_int_t *lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssymm_vbatched(side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
    ccall((:magmablas_ssymm_vbatched, libmagma), Cvoid, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, m, n, alpha, dA_array, ldda, dB_array, lddb, beta, dC_array, lddc, batchCount, queue)
end

"""
    magmablas_sgemv_vbatched_max_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)

Level 2 
### Prototype
```c
void magmablas_sgemv_vbatched_max_nocheck( magma_trans_t trans, magma_int_t* m, magma_int_t* n, float alpha, magmaFloat_ptr dA_array[], magma_int_t* ldda, magmaFloat_ptr dx_array[], magma_int_t* incx, float beta, magmaFloat_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_sgemv_vbatched_max_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
    ccall((:magmablas_sgemv_vbatched_max_nocheck, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
end

"""
    magmablas_sgemv_vbatched_max(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)


### Prototype
```c
void magmablas_sgemv_vbatched_max( magma_trans_t trans, magma_int_t* m, magma_int_t* n, float alpha, magmaFloat_ptr dA_array[], magma_int_t* ldda, magmaFloat_ptr dx_array[], magma_int_t* incx, float beta, magmaFloat_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_int_t max_m, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_sgemv_vbatched_max(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
    ccall((:magmablas_sgemv_vbatched_max, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_m, max_n, queue)
end

"""
    magmablas_sgemv_vbatched_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_sgemv_vbatched_nocheck( magma_trans_t trans, magma_int_t* m, magma_int_t* n, float alpha, magmaFloat_ptr dA_array[], magma_int_t* ldda, magmaFloat_ptr dx_array[], magma_int_t* incx, float beta, magmaFloat_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_sgemv_vbatched_nocheck(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_sgemv_vbatched_nocheck, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_sgemv_vbatched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_sgemv_vbatched( magma_trans_t trans, magma_int_t* m, magma_int_t* n, float alpha, magmaFloat_ptr dA_array[], magma_int_t* ldda, magmaFloat_ptr dx_array[], magma_int_t* incx, float beta, magmaFloat_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_sgemv_vbatched(trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_sgemv_vbatched, libmagma), Cvoid, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_ssymv_vbatched_max_nocheck(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, max_n, batchCount, queue)


### Prototype
```c
void magmablas_ssymv_vbatched_max_nocheck( magma_uplo_t uplo, magma_int_t* n, float alpha, float **dA_array, magma_int_t* ldda, float **dX_array, magma_int_t* incx, float beta, float **dY_array, magma_int_t* incy, magma_int_t max_n, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_ssymv_vbatched_max_nocheck(uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, max_n, batchCount, queue)
    ccall((:magmablas_ssymv_vbatched_max_nocheck, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Cfloat, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dX_array, incx, beta, dY_array, incy, max_n, batchCount, queue)
end

"""
    magmablas_ssymv_vbatched_max(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_n, queue)


### Prototype
```c
void magmablas_ssymv_vbatched_max( magma_uplo_t uplo, magma_int_t* n, float alpha, magmaFloat_ptr dA_array[], magma_int_t* ldda, magmaFloat_ptr dx_array[], magma_int_t* incx, float beta, magmaFloat_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_int_t max_n, magma_queue_t queue);
```
"""
function magmablas_ssymv_vbatched_max(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_n, queue)
    ccall((:magmablas_ssymv_vbatched_max, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, max_n, queue)
end

"""
    magmablas_ssymv_vbatched_nocheck(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_ssymv_vbatched_nocheck( magma_uplo_t uplo, magma_int_t* n, float alpha, magmaFloat_ptr dA_array[], magma_int_t* ldda, magmaFloat_ptr dx_array[], magma_int_t* incx, float beta, magmaFloat_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ssymv_vbatched_nocheck(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_ssymv_vbatched_nocheck, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magmablas_ssymv_vbatched(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)


### Prototype
```c
void magmablas_ssymv_vbatched( magma_uplo_t uplo, magma_int_t* n, float alpha, magmaFloat_ptr dA_array[], magma_int_t* ldda, magmaFloat_ptr dx_array[], magma_int_t* incx, float beta, magmaFloat_ptr dy_array[], magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_ssymv_vbatched(uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
    ccall((:magmablas_ssymv_vbatched, libmagma), Cvoid, (magma_uplo_t, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, alpha, dA_array, ldda, dx_array, incx, beta, dy_array, incy, batchCount, queue)
end

"""
    magma_sset_pointer_var_cc(output_array, input, lda, row, column, batch_offset, batchCount, queue)

Level 1 */
/* Auxiliary routines 
### Prototype
```c
void magma_sset_pointer_var_cc( float **output_array, float *input, magma_int_t *lda, magma_int_t row, magma_int_t column, magma_int_t *batch_offset, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sset_pointer_var_cc(output_array, input, lda, row, column, batch_offset, batchCount, queue)
    ccall((:magma_sset_pointer_var_cc, libmagma), Cvoid, (Ptr{Ptr{Cfloat}}, Ptr{Cfloat}, Ptr{magma_int_t}, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), output_array, input, lda, row, column, batch_offset, batchCount, queue)
end

"""
    magma_sdisplace_pointers_var_cc(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_sdisplace_pointers_var_cc(float **output_array, float **input_array, magma_int_t* lda, magma_int_t row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sdisplace_pointers_var_cc(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_sdisplace_pointers_var_cc, libmagma), Cvoid, (Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_sdisplace_pointers_var_cv(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_sdisplace_pointers_var_cv(float **output_array, float **input_array, magma_int_t* lda, magma_int_t row, magma_int_t* column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sdisplace_pointers_var_cv(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_sdisplace_pointers_var_cv, libmagma), Cvoid, (Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_sdisplace_pointers_var_vc(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_sdisplace_pointers_var_vc(float **output_array, float **input_array, magma_int_t* lda, magma_int_t *row, magma_int_t column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sdisplace_pointers_var_vc(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_sdisplace_pointers_var_vc, libmagma), Cvoid, (Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magma_sdisplace_pointers_var_vv(output_array, input_array, lda, row, column, batchCount, queue)


### Prototype
```c
void magma_sdisplace_pointers_var_vv(float **output_array, float **input_array, magma_int_t* lda, magma_int_t* row, magma_int_t* column, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_sdisplace_pointers_var_vv(output_array, input_array, lda, row, column, batchCount, queue)
    ccall((:magma_sdisplace_pointers_var_vv, libmagma), Cvoid, (Ptr{Ptr{Cfloat}}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), output_array, input_array, lda, row, column, batchCount, queue)
end

"""
    magmablas_slaset_vbatched(uplo, max_m, max_n, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)


### Prototype
```c
void magmablas_slaset_vbatched( magma_uplo_t uplo, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, float offdiag, float diag, magmaFloat_ptr dAarray[], magma_int_t* ldda, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magmablas_slaset_vbatched(uplo, max_m, max_n, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
    ccall((:magmablas_slaset_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Cfloat, Ptr{magmaFloat_ptr}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, max_m, max_n, m, n, offdiag, diag, dAarray, ldda, batchCount, queue)
end

"""
    magmablas_slacpy_vbatched(uplo, max_m, max_n, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)


### Prototype
```c
void magmablas_slacpy_vbatched( magma_uplo_t uplo, magma_int_t max_m, magma_int_t max_n, magma_int_t* m, magma_int_t* n, float const * const * dAarray, magma_int_t* ldda, float** dBarray, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magmablas_slacpy_vbatched(uplo, max_m, max_n, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
    ccall((:magmablas_slacpy_vbatched, libmagma), Cvoid, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, Ptr{Ptr{Cfloat}}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, max_m, max_n, m, n, dAarray, ldda, dBarray, lddb, batchCount, queue)
end

# no prototype is found for this function at magma_svbatched.h:814:13, please use with caution
"""
    magma_get_spotrf_vbatched_crossover()

 Aux. vbatched routines
### Prototype
```c
magma_int_t magma_get_spotrf_vbatched_crossover();
```
"""
function magma_get_spotrf_vbatched_crossover()
    ccall((:magma_get_spotrf_vbatched_crossover, libmagma), magma_int_t, ())
end

"""
    magma_getrf_vbatched_setup(m, n, stats, batchCount, queue)

getrf vbatched setup
### Prototype
```c
void magma_getrf_vbatched_setup( magma_int_t *m, magma_int_t *n, magma_int_t *stats, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_getrf_vbatched_setup(m, n, stats, batchCount, queue)
    ccall((:magma_getrf_vbatched_setup, libmagma), Cvoid, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, stats, batchCount, queue)
end

"""
    setup_pivinfo_vbatched(pivinfo_array, pivinfo_offset, ipiv_array, ipiv_offset, m, n, max_m, nb, batchCount, queue)

getrf vbatched: setup pivinfo
### Prototype
```c
void setup_pivinfo_vbatched( magma_int_t **pivinfo_array, magma_int_t pivinfo_offset, magma_int_t **ipiv_array, magma_int_t ipiv_offset, magma_int_t* m, magma_int_t* n, magma_int_t max_m, magma_int_t nb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function setup_pivinfo_vbatched(pivinfo_array, pivinfo_offset, ipiv_array, ipiv_offset, m, n, max_m, nb, batchCount, queue)
    ccall((:setup_pivinfo_vbatched, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), pivinfo_array, pivinfo_offset, ipiv_array, ipiv_offset, m, n, max_m, nb, batchCount, queue)
end

"""
    adjust_ipiv_vbatched(ipiv_array, ipiv_offset, minmn, max_minmn, offset, batchCount, queue)

adjust pivot for LU
### Prototype
```c
void adjust_ipiv_vbatched( magma_int_t **ipiv_array, magma_int_t ipiv_offset, magma_int_t *minmn, magma_int_t max_minmn, magma_int_t offset, magma_int_t batchCount, magma_queue_t queue);
```
"""
function adjust_ipiv_vbatched(ipiv_array, ipiv_offset, minmn, max_minmn, offset, batchCount, queue)
    ccall((:adjust_ipiv_vbatched, libmagma), Cvoid, (Ptr{Ptr{magma_int_t}}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_int_t, magma_int_t, magma_queue_t), ipiv_array, ipiv_offset, minmn, max_minmn, offset, batchCount, queue)
end

"""
    magma_getrf_vbatched_checker(m, n, ldda, errors, batchCount, queue)

checker routines - LAPACK
### Prototype
```c
magma_int_t magma_getrf_vbatched_checker( magma_int_t* m, magma_int_t* n, magma_int_t* ldda, magma_int_t* errors, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_getrf_vbatched_checker(m, n, ldda, errors, batchCount, queue)
    ccall((:magma_getrf_vbatched_checker, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, ldda, errors, batchCount, queue)
end

"""
    magma_potrf_vbatched_checker(uplo, n, ldda, batchCount, queue)


### Prototype
```c
magma_int_t magma_potrf_vbatched_checker( magma_uplo_t uplo, magma_int_t* n, magma_int_t* ldda, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_potrf_vbatched_checker(uplo, n, ldda, batchCount, queue)
    ccall((:magma_potrf_vbatched_checker, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, ldda, batchCount, queue)
end

"""
    magma_gemm_vbatched_checker(transA, transB, m, n, k, ldda, lddb, lddc, batchCount, queue)

checker routines - Level 3 BLAS
### Prototype
```c
magma_int_t magma_gemm_vbatched_checker( magma_trans_t transA, magma_trans_t transB, magma_int_t* m, magma_int_t* n, magma_int_t* k, magma_int_t* ldda, magma_int_t* lddb, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_gemm_vbatched_checker(transA, transB, m, n, k, ldda, lddb, lddc, batchCount, queue)
    ccall((:magma_gemm_vbatched_checker, libmagma), magma_int_t, (magma_trans_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), transA, transB, m, n, k, ldda, lddb, lddc, batchCount, queue)
end

"""
    magma_trsm_vbatched_checker(side, uplo, transA, diag, m, n, ldda, lddb, batchCount, queue)


### Prototype
```c
magma_int_t magma_trsm_vbatched_checker( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magma_int_t* ldda, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_trsm_vbatched_checker(side, uplo, transA, diag, m, n, ldda, lddb, batchCount, queue)
    ccall((:magma_trsm_vbatched_checker, libmagma), magma_int_t, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, ldda, lddb, batchCount, queue)
end

"""
    magma_syrk_vbatched_checker(icomplex, uplo, trans, n, k, ldda, lddc, batchCount, queue)


### Prototype
```c
magma_int_t magma_syrk_vbatched_checker( magma_int_t icomplex, magma_uplo_t uplo, magma_trans_t trans, magma_int_t *n, magma_int_t *k, magma_int_t *ldda, magma_int_t *lddc, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_syrk_vbatched_checker(icomplex, uplo, trans, n, k, ldda, lddc, batchCount, queue)
    ccall((:magma_syrk_vbatched_checker, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), icomplex, uplo, trans, n, k, ldda, lddc, batchCount, queue)
end

"""
    magma_herk_vbatched_checker(uplo, trans, n, k, ldda, lddc, batchCount, queue)


### Prototype
```c
magma_int_t magma_herk_vbatched_checker( magma_uplo_t uplo, magma_trans_t trans, magma_int_t *n, magma_int_t *k, magma_int_t *ldda, magma_int_t *lddc, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_herk_vbatched_checker(uplo, trans, n, k, ldda, lddc, batchCount, queue)
    ccall((:magma_herk_vbatched_checker, libmagma), magma_int_t, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, ldda, lddc, batchCount, queue)
end

"""
    magma_syr2k_vbatched_checker(icomplex, uplo, trans, n, k, ldda, lddb, lddc, batchCount, queue)


### Prototype
```c
magma_int_t magma_syr2k_vbatched_checker( magma_int_t icomplex, magma_uplo_t uplo, magma_trans_t trans, magma_int_t *n, magma_int_t *k, magma_int_t *ldda, magma_int_t *lddb, magma_int_t *lddc, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_syr2k_vbatched_checker(icomplex, uplo, trans, n, k, ldda, lddb, lddc, batchCount, queue)
    ccall((:magma_syr2k_vbatched_checker, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), icomplex, uplo, trans, n, k, ldda, lddb, lddc, batchCount, queue)
end

"""
    magma_her2k_vbatched_checker(uplo, trans, n, k, ldda, lddb, lddc, batchCount, queue)


### Prototype
```c
magma_int_t magma_her2k_vbatched_checker( magma_uplo_t uplo, magma_trans_t trans, magma_int_t *n, magma_int_t *k, magma_int_t *ldda, magma_int_t *lddb, magma_int_t *lddc, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_her2k_vbatched_checker(uplo, trans, n, k, ldda, lddb, lddc, batchCount, queue)
    ccall((:magma_her2k_vbatched_checker, libmagma), magma_int_t, (magma_uplo_t, magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, trans, n, k, ldda, lddb, lddc, batchCount, queue)
end

"""
    magma_trmm_vbatched_checker(side, uplo, transA, diag, m, n, ldda, lddb, batchCount, queue)


### Prototype
```c
magma_int_t magma_trmm_vbatched_checker( magma_side_t side, magma_uplo_t uplo, magma_trans_t transA, magma_diag_t diag, magma_int_t* m, magma_int_t* n, magma_int_t* ldda, magma_int_t* lddb, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_trmm_vbatched_checker(side, uplo, transA, diag, m, n, ldda, lddb, batchCount, queue)
    ccall((:magma_trmm_vbatched_checker, libmagma), magma_int_t, (magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, transA, diag, m, n, ldda, lddb, batchCount, queue)
end

"""
    magma_hemm_vbatched_checker(side, uplo, m, n, ldda, lddb, lddc, batchCount, queue)


### Prototype
```c
magma_int_t magma_hemm_vbatched_checker( magma_side_t side, magma_uplo_t uplo, magma_int_t* m, magma_int_t* n, magma_int_t* ldda, magma_int_t* lddb, magma_int_t* lddc, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_hemm_vbatched_checker(side, uplo, m, n, ldda, lddb, lddc, batchCount, queue)
    ccall((:magma_hemm_vbatched_checker, libmagma), magma_int_t, (magma_side_t, magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), side, uplo, m, n, ldda, lddb, lddc, batchCount, queue)
end

"""
    magma_gemv_vbatched_checker(trans, m, n, ldda, incx, incy, batchCount, queue)

checker routines - Level 2 BLAS
### Prototype
```c
magma_int_t magma_gemv_vbatched_checker( magma_trans_t trans, magma_int_t* m, magma_int_t* n, magma_int_t* ldda, magma_int_t* incx, magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_gemv_vbatched_checker(trans, m, n, ldda, incx, incy, batchCount, queue)
    ccall((:magma_gemv_vbatched_checker, libmagma), magma_int_t, (magma_trans_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), trans, m, n, ldda, incx, incy, batchCount, queue)
end

"""
    magma_hemv_vbatched_checker(uplo, n, ldda, incx, incy, batchCount, queue)


### Prototype
```c
magma_int_t magma_hemv_vbatched_checker( magma_uplo_t uplo, magma_int_t* n, magma_int_t* ldda, magma_int_t* incx, magma_int_t* incy, magma_int_t batchCount, magma_queue_t queue );
```
"""
function magma_hemv_vbatched_checker(uplo, n, ldda, incx, incy, batchCount, queue)
    ccall((:magma_hemv_vbatched_checker, libmagma), magma_int_t, (magma_uplo_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), uplo, n, ldda, incx, incy, batchCount, queue)
end

"""
    magma_axpy_vbatched_checker(n, incx, incy, batchCount, queue)

checker routines - Level 1 BLAS
### Prototype
```c
magma_int_t magma_axpy_vbatched_checker( magma_int_t *n, magma_int_t *incx, magma_int_t *incy, magma_int_t batchCount, magma_queue_t queue);
```
"""
function magma_axpy_vbatched_checker(n, incx, incy, batchCount, queue)
    ccall((:magma_axpy_vbatched_checker, libmagma), magma_int_t, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, incx, incy, batchCount, queue)
end

"""
    magma_imax_size_1(n, l, queue)

routines to find the maximum dimensions
### Prototype
```c
void magma_imax_size_1(magma_int_t *n, magma_int_t l, magma_queue_t queue);
```
"""
function magma_imax_size_1(n, l, queue)
    ccall((:magma_imax_size_1, libmagma), Cvoid, (Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, l, queue)
end

"""
    magma_imax_size_2(m, n, l, queue)


### Prototype
```c
void magma_imax_size_2(magma_int_t *m, magma_int_t *n, magma_int_t l, magma_queue_t queue);
```
"""
function magma_imax_size_2(m, n, l, queue)
    ccall((:magma_imax_size_2, libmagma), Cvoid, (Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, l, queue)
end

"""
    magma_imax_size_3(m, n, k, l, queue)


### Prototype
```c
void magma_imax_size_3(magma_int_t *m, magma_int_t *n, magma_int_t *k, magma_int_t l, magma_queue_t queue);
```
"""
function magma_imax_size_3(m, n, k, l, queue)
    ccall((:magma_imax_size_3, libmagma), Cvoid, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), m, n, k, l, queue)
end

"""
    magma_ivec_max(vecsize, x, work, lwork, queue)

aux. routines
### Prototype
```c
magma_int_t magma_ivec_max( magma_int_t vecsize, magma_int_t* x, magma_int_t* work, magma_int_t lwork, magma_queue_t queue);
```
"""
function magma_ivec_max(vecsize, x, work, lwork, queue)
    ccall((:magma_ivec_max, libmagma), magma_int_t, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), vecsize, x, work, lwork, queue)
end

"""
    magma_isum_reduce(vecsize, x, work, lwork, queue)


### Prototype
```c
magma_int_t magma_isum_reduce( magma_int_t vecsize, magma_int_t* x, magma_int_t* work, magma_int_t lwork, magma_queue_t queue);
```
"""
function magma_isum_reduce(vecsize, x, work, lwork, queue)
    ccall((:magma_isum_reduce, libmagma), magma_int_t, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), vecsize, x, work, lwork, queue)
end

"""
    magma_ivec_add(vecsize, a1, x1, a2, x2, y, queue)


### Prototype
```c
void magma_ivec_add( magma_int_t vecsize, magma_int_t a1, magma_int_t *x1, magma_int_t a2, magma_int_t *x2, magma_int_t *y, magma_queue_t queue);
```
"""
function magma_ivec_add(vecsize, a1, x1, a2, x2, y, queue)
    ccall((:magma_ivec_add, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), vecsize, a1, x1, a2, x2, y, queue)
end

"""
    magma_ivec_mul(vecsize, x1, x2, y, queue)


### Prototype
```c
void magma_ivec_mul( magma_int_t vecsize, magma_int_t *x1, magma_int_t *x2, magma_int_t *y, magma_queue_t queue);
```
"""
function magma_ivec_mul(vecsize, x1, x2, y, queue)
    ccall((:magma_ivec_mul, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), vecsize, x1, x2, y, queue)
end

"""
    magma_ivec_ceildiv(vecsize, x, nb, y, queue)


### Prototype
```c
void magma_ivec_ceildiv( magma_int_t vecsize, magma_int_t *x, magma_int_t nb, magma_int_t *y, magma_queue_t queue);
```
"""
function magma_ivec_ceildiv(vecsize, x, nb, y, queue)
    ccall((:magma_ivec_ceildiv, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_queue_t), vecsize, x, nb, y, queue)
end

"""
    magma_ivec_roundup(vecsize, x, nb, y, queue)


### Prototype
```c
void magma_ivec_roundup( magma_int_t vecsize, magma_int_t *x, magma_int_t nb, magma_int_t *y, magma_queue_t queue);
```
"""
function magma_ivec_roundup(vecsize, x, nb, y, queue)
    ccall((:magma_ivec_roundup, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_queue_t), vecsize, x, nb, y, queue)
end

"""
    magma_ivec_setc(vecsize, x, value, queue)


### Prototype
```c
void magma_ivec_setc( magma_int_t vecsize, magma_int_t *x, magma_int_t value, magma_queue_t queue);
```
"""
function magma_ivec_setc(vecsize, x, value, queue)
    ccall((:magma_ivec_setc, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), vecsize, x, value, queue)
end

"""
    magma_zsetvector_const(vecsize, x, value, queue)


### Prototype
```c
void magma_zsetvector_const( magma_int_t vecsize, magmaDoubleComplex *x, magmaDoubleComplex value, magma_queue_t queue);
```
"""
function magma_zsetvector_const(vecsize, x, value, queue)
    ccall((:magma_zsetvector_const, libmagma), Cvoid, (magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex, magma_queue_t), vecsize, x, value, queue)
end

"""
    magma_csetvector_const(vecsize, x, value, queue)


### Prototype
```c
void magma_csetvector_const( magma_int_t vecsize, magmaFloatComplex *x, magmaFloatComplex value, magma_queue_t queue);
```
"""
function magma_csetvector_const(vecsize, x, value, queue)
    ccall((:magma_csetvector_const, libmagma), Cvoid, (magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex, magma_queue_t), vecsize, x, value, queue)
end

"""
    magma_dsetvector_const(vecsize, x, value, queue)


### Prototype
```c
void magma_dsetvector_const( magma_int_t vecsize, double *x, double value, magma_queue_t queue);
```
"""
function magma_dsetvector_const(vecsize, x, value, queue)
    ccall((:magma_dsetvector_const, libmagma), Cvoid, (magma_int_t, Ptr{Cdouble}, Cdouble, magma_queue_t), vecsize, x, value, queue)
end

"""
    magma_ssetvector_const(vecsize, x, value, queue)


### Prototype
```c
void magma_ssetvector_const( magma_int_t vecsize, float *x, float value, magma_queue_t queue);
```
"""
function magma_ssetvector_const(vecsize, x, value, queue)
    ccall((:magma_ssetvector_const, libmagma), Cvoid, (magma_int_t, Ptr{Cfloat}, Cfloat, magma_queue_t), vecsize, x, value, queue)
end

"""
    magma_ivec_addc(vecsize, x, value, y, queue)


### Prototype
```c
void magma_ivec_addc( magma_int_t vecsize, magma_int_t *x, magma_int_t value, magma_int_t *y, magma_queue_t queue);
```
"""
function magma_ivec_addc(vecsize, x, value, y, queue)
    ccall((:magma_ivec_addc, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_queue_t), vecsize, x, value, y, queue)
end

"""
    magma_ivec_mulc(vecsize, x, value, y, queue)


### Prototype
```c
void magma_ivec_mulc( magma_int_t vecsize, magma_int_t *x, magma_int_t value, magma_int_t *y, magma_queue_t queue);
```
"""
function magma_ivec_mulc(vecsize, x, value, y, queue)
    ccall((:magma_ivec_mulc, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_queue_t), vecsize, x, value, y, queue)
end

"""
    magma_ivec_minc(vecsize, x, value, y, queue)


### Prototype
```c
void magma_ivec_minc( magma_int_t vecsize, magma_int_t *x, magma_int_t value, magma_int_t *y, magma_queue_t queue);
```
"""
function magma_ivec_minc(vecsize, x, value, y, queue)
    ccall((:magma_ivec_minc, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_queue_t), vecsize, x, value, y, queue)
end

"""
    magma_ivec_maxc(vecsize, x, value, y, queue)


### Prototype
```c
void magma_ivec_maxc( magma_int_t vecsize, magma_int_t* x, magma_int_t value, magma_int_t* y, magma_queue_t queue);
```
"""
function magma_ivec_maxc(vecsize, x, value, y, queue)
    ccall((:magma_ivec_maxc, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_queue_t), vecsize, x, value, y, queue)
end

"""
    magma_ivec_min_vv(vecsize, v1, v2, y, queue)


### Prototype
```c
void magma_ivec_min_vv( magma_int_t vecsize, magma_int_t *v1, magma_int_t *v2, magma_int_t *y, magma_queue_t queue);
```
"""
function magma_ivec_min_vv(vecsize, v1, v2, y, queue)
    ccall((:magma_ivec_min_vv, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), vecsize, v1, v2, y, queue)
end

"""
    magma_compute_trsm_jb(vecsize, m, tri_nb, jbv, queue)


### Prototype
```c
void magma_compute_trsm_jb( magma_int_t vecsize, magma_int_t* m, magma_int_t tri_nb, magma_int_t* jbv, magma_queue_t queue);
```
"""
function magma_compute_trsm_jb(vecsize, m, tri_nb, jbv, queue)
    ccall((:magma_compute_trsm_jb, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_queue_t), vecsize, m, tri_nb, jbv, queue)
end

"""
    magma_prefix_sum_inplace(ivec, length, queue)


### Prototype
```c
void magma_prefix_sum_inplace(magma_int_t* ivec, magma_int_t length, magma_queue_t queue);
```
"""
function magma_prefix_sum_inplace(ivec, length, queue)
    ccall((:magma_prefix_sum_inplace, libmagma), Cvoid, (Ptr{magma_int_t}, magma_int_t, magma_queue_t), ivec, length, queue)
end

"""
    magma_prefix_sum_outofplace(ivec, ovec, length, queue)


### Prototype
```c
void magma_prefix_sum_outofplace(magma_int_t* ivec, magma_int_t* ovec, magma_int_t length, magma_queue_t queue);
```
"""
function magma_prefix_sum_outofplace(ivec, ovec, length, queue)
    ccall((:magma_prefix_sum_outofplace, libmagma), Cvoid, (Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t), ivec, ovec, length, queue)
end

"""
    magma_prefix_sum_inplace_w(ivec, length, workspace, lwork, queue)


### Prototype
```c
void magma_prefix_sum_inplace_w(magma_int_t* ivec, magma_int_t length, magma_int_t* workspace, magma_int_t lwork, magma_queue_t queue);
```
"""
function magma_prefix_sum_inplace_w(ivec, length, workspace, lwork, queue)
    ccall((:magma_prefix_sum_inplace_w, libmagma), Cvoid, (Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), ivec, length, workspace, lwork, queue)
end

"""
    magma_prefix_sum_outofplace_w(ivec, ovec, length, workspace, lwork, queue)


### Prototype
```c
void magma_prefix_sum_outofplace_w(magma_int_t* ivec, magma_int_t* ovec, magma_int_t length, magma_int_t* workspace, magma_int_t lwork, magma_queue_t queue);
```
"""
function magma_prefix_sum_outofplace_w(ivec, ovec, length, workspace, lwork, queue)
    ccall((:magma_prefix_sum_outofplace_w, libmagma), Cvoid, (Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), ivec, ovec, length, workspace, lwork, queue)
end

"""
    magma_zbulge_applyQ_v2(side, NE, n, nb, Vblksiz, dE, ldde, V, ldv, T, ldt, info)


### Prototype
```c
magma_int_t magma_zbulge_applyQ_v2( magma_side_t side, magma_int_t NE, magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magmaDoubleComplex_ptr dE, magma_int_t ldde, magmaDoubleComplex *V, magma_int_t ldv, magmaDoubleComplex *T, magma_int_t ldt, magma_int_t *info);
```
"""
function magma_zbulge_applyQ_v2(side, NE, n, nb, Vblksiz, dE, ldde, V, ldv, T, ldt, info)
    ccall((:magma_zbulge_applyQ_v2, libmagma), magma_int_t, (magma_side_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), side, NE, n, nb, Vblksiz, dE, ldde, V, ldv, T, ldt, info)
end

"""
    magma_zbulge_applyQ_v2_m(ngpu, side, NE, n, nb, Vblksiz, E, lde, V, ldv, T, ldt, info)


### Prototype
```c
magma_int_t magma_zbulge_applyQ_v2_m( magma_int_t ngpu, magma_side_t side, magma_int_t NE, magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magmaDoubleComplex *E, magma_int_t lde, magmaDoubleComplex *V, magma_int_t ldv, magmaDoubleComplex *T, magma_int_t ldt, magma_int_t *info);
```
"""
function magma_zbulge_applyQ_v2_m(ngpu, side, NE, n, nb, Vblksiz, E, lde, V, ldv, T, ldt, info)
    ccall((:magma_zbulge_applyQ_v2_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, side, NE, n, nb, Vblksiz, E, lde, V, ldv, T, ldt, info)
end

"""
    magma_zbulge_back(uplo, n, nb, ne, Vblksiz, Z, ldz, dZ, lddz, V, ldv, TAU, T, ldt, info)


### Prototype
```c
magma_int_t magma_zbulge_back( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t ne, magma_int_t Vblksiz, magmaDoubleComplex *Z, magma_int_t ldz, magmaDoubleComplex_ptr dZ, magma_int_t lddz, magmaDoubleComplex *V, magma_int_t ldv, magmaDoubleComplex *TAU, magmaDoubleComplex *T, magma_int_t ldt, magma_int_t* info);
```
"""
function magma_zbulge_back(uplo, n, nb, ne, Vblksiz, Z, ldz, dZ, lddz, V, ldv, TAU, T, ldt, info)
    ccall((:magma_zbulge_back, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, nb, ne, Vblksiz, Z, ldz, dZ, lddz, V, ldv, TAU, T, ldt, info)
end

"""
    magma_zbulge_back_m(ngpu, uplo, n, nb, ne, Vblksiz, Z, ldz, V, ldv, TAU, T, ldt, info)


### Prototype
```c
magma_int_t magma_zbulge_back_m( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t ne, magma_int_t Vblksiz, magmaDoubleComplex *Z, magma_int_t ldz, magmaDoubleComplex *V, magma_int_t ldv, magmaDoubleComplex *TAU, magmaDoubleComplex *T, magma_int_t ldt, magma_int_t* info);
```
"""
function magma_zbulge_back_m(ngpu, uplo, n, nb, ne, Vblksiz, Z, ldz, V, ldv, TAU, T, ldt, info)
    ccall((:magma_zbulge_back_m, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, nb, ne, Vblksiz, Z, ldz, V, ldv, TAU, T, ldt, info)
end

"""
    magma_ztrdtype1cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)


### Prototype
```c
void magma_ztrdtype1cbHLsym_withQ_v2( magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *V, magma_int_t ldv, magmaDoubleComplex *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magmaDoubleComplex *work);
```
"""
function magma_ztrdtype1cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
    ccall((:magma_ztrdtype1cbHLsym_withQ_v2, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
end

"""
    magma_ztrdtype2cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)


### Prototype
```c
void magma_ztrdtype2cbHLsym_withQ_v2( magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *V, magma_int_t ldv, magmaDoubleComplex *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magmaDoubleComplex *work);
```
"""
function magma_ztrdtype2cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
    ccall((:magma_ztrdtype2cbHLsym_withQ_v2, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
end

"""
    magma_ztrdtype3cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)


### Prototype
```c
void magma_ztrdtype3cbHLsym_withQ_v2( magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *V, magma_int_t ldv, magmaDoubleComplex *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magmaDoubleComplex *work);
```
"""
function magma_ztrdtype3cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
    ccall((:magma_ztrdtype3cbHLsym_withQ_v2, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
end

"""
    magma_zlarfy(n, A, lda, V, TAU, work)


### Prototype
```c
void magma_zlarfy( magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, const magmaDoubleComplex *V, const magmaDoubleComplex *TAU, magmaDoubleComplex *work);
```
"""
function magma_zlarfy(n, A, lda, V, TAU, work)
    ccall((:magma_zlarfy, libmagma), Cvoid, (magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}), n, A, lda, V, TAU, work)
end

"""
    magma_zhbtype1cb(n, nb, A, lda, V, LDV, TAU, st, ed, sweep, Vblksiz, wantz, work)


### Prototype
```c
void magma_zhbtype1cb(magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *V, magma_int_t LDV, magmaDoubleComplex *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magma_int_t wantz, magmaDoubleComplex *work);
```
"""
function magma_zhbtype1cb(n, nb, A, lda, V, LDV, TAU, st, ed, sweep, Vblksiz, wantz, work)
    ccall((:magma_zhbtype1cb, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}), n, nb, A, lda, V, LDV, TAU, st, ed, sweep, Vblksiz, wantz, work)
end

"""
    magma_zhbtype2cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)


### Prototype
```c
void magma_zhbtype2cb(magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *V, magma_int_t ldv, magmaDoubleComplex *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magma_int_t wantz, magmaDoubleComplex *work);
```
"""
function magma_zhbtype2cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
    ccall((:magma_zhbtype2cb, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
end

"""
    magma_zhbtype3cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)


### Prototype
```c
void magma_zhbtype3cb(magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *V, magma_int_t ldv, magmaDoubleComplex *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magma_int_t wantz, magmaDoubleComplex *work);
```
"""
function magma_zhbtype3cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
    ccall((:magma_zhbtype3cb, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
end

"""
    magma_zunmqr_2stage_gpu(side, trans, m, n, k, dA, ldda, dC, lddc, dT, nb, info)


### Prototype
```c
magma_int_t magma_zunmqr_2stage_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dC, magma_int_t lddc, magmaDoubleComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_zunmqr_2stage_gpu(side, trans, m, n, k, dA, ldda, dC, lddc, dT, nb, info)
    ccall((:magma_zunmqr_2stage_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, dC, lddc, dT, nb, info)
end

"""
    magma_get_zbulge_lq2(n, threads, wantz)


### Prototype
```c
magma_int_t magma_get_zbulge_lq2( magma_int_t n, magma_int_t threads, magma_int_t wantz);
```
"""
function magma_get_zbulge_lq2(n, threads, wantz)
    ccall((:magma_get_zbulge_lq2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), n, threads, wantz)
end

"""
    magma_zbulge_getstg2size(n, nb, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)


### Prototype
```c
magma_int_t magma_zbulge_getstg2size(magma_int_t n, magma_int_t nb, magma_int_t wantz, magma_int_t Vblksiz, magma_int_t ldv, magma_int_t ldt, magma_int_t *blkcnt, magma_int_t *sizTAU2, magma_int_t *sizT2, magma_int_t *sizV2);
```
"""
function magma_zbulge_getstg2size(n, nb, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
    ccall((:magma_zbulge_getstg2size, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
end

"""
    magma_zbulge_getlwstg2(n, threads, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)


### Prototype
```c
magma_int_t magma_zbulge_getlwstg2(magma_int_t n, magma_int_t threads, magma_int_t wantz, magma_int_t *Vblksiz, magma_int_t *ldv, magma_int_t *ldt, magma_int_t *blkcnt, magma_int_t *sizTAU2, magma_int_t *sizT2, magma_int_t *sizV2);
```
"""
function magma_zbulge_getlwstg2(n, threads, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
    ccall((:magma_zbulge_getlwstg2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, threads, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
end

"""
    magma_bulge_get_VTsiz(n, nb, threads, Vblksiz, ldv, ldt)


### Prototype
```c
void magma_bulge_get_VTsiz(magma_int_t n, magma_int_t nb, magma_int_t threads, magma_int_t *Vblksiz, magma_int_t *ldv, magma_int_t *ldt);
```
"""
function magma_bulge_get_VTsiz(n, nb, threads, Vblksiz, ldv, ldt)
    ccall((:magma_bulge_get_VTsiz, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, threads, Vblksiz, ldv, ldt)
end

"""
    magma_zheevdx_getworksize(n, threads, wantz, lwmin, lrwmin, liwmin)


### Prototype
```c
void magma_zheevdx_getworksize(magma_int_t n, magma_int_t threads, magma_int_t wantz, magma_int_t *lwmin, #ifdef MAGMA_COMPLEX magma_int_t *lrwmin, #endif magma_int_t *liwmin);
```
"""
function magma_zheevdx_getworksize(n, threads, wantz, lwmin, lrwmin, liwmin)
    ccall((:magma_zheevdx_getworksize, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, threads, wantz, lwmin, lrwmin, liwmin)
end

"""
    magma_zhetrd_bhe2trc_v5(threads, wantz, uplo, ne, n, nb, A, lda, D, E, dT1, ldt1)

used only for old version and internal
### Prototype
```c
magma_int_t magma_zhetrd_bhe2trc_v5( magma_int_t threads, magma_int_t wantz, magma_uplo_t uplo, magma_int_t ne, magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, double *D, double *E, magmaDoubleComplex_ptr dT1, magma_int_t ldt1);
```
"""
function magma_zhetrd_bhe2trc_v5(threads, wantz, uplo, ne, n, nb, A, lda, D, E, dT1, ldt1)
    ccall((:magma_zhetrd_bhe2trc_v5, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magmaDoubleComplex_ptr, magma_int_t), threads, wantz, uplo, ne, n, nb, A, lda, D, E, dT1, ldt1)
end

"""
    magma_zungqr_2stage_gpu(m, n, k, dA, ldda, tau, dT, nb, info)


### Prototype
```c
magma_int_t magma_zungqr_2stage_gpu( magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex *tau, magmaDoubleComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_zungqr_2stage_gpu(m, n, k, dA, ldda, tau, dT, nb, info)
    ccall((:magma_zungqr_2stage_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, dA, ldda, tau, dT, nb, info)
end

"""
    magma_cbulge_applyQ_v2(side, NE, n, nb, Vblksiz, dE, ldde, V, ldv, T, ldt, info)


### Prototype
```c
magma_int_t magma_cbulge_applyQ_v2( magma_side_t side, magma_int_t NE, magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magmaFloatComplex_ptr dE, magma_int_t ldde, magmaFloatComplex *V, magma_int_t ldv, magmaFloatComplex *T, magma_int_t ldt, magma_int_t *info);
```
"""
function magma_cbulge_applyQ_v2(side, NE, n, nb, Vblksiz, dE, ldde, V, ldv, T, ldt, info)
    ccall((:magma_cbulge_applyQ_v2, libmagma), magma_int_t, (magma_side_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), side, NE, n, nb, Vblksiz, dE, ldde, V, ldv, T, ldt, info)
end

"""
    magma_cbulge_applyQ_v2_m(ngpu, side, NE, n, nb, Vblksiz, E, lde, V, ldv, T, ldt, info)


### Prototype
```c
magma_int_t magma_cbulge_applyQ_v2_m( magma_int_t ngpu, magma_side_t side, magma_int_t NE, magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magmaFloatComplex *E, magma_int_t lde, magmaFloatComplex *V, magma_int_t ldv, magmaFloatComplex *T, magma_int_t ldt, magma_int_t *info);
```
"""
function magma_cbulge_applyQ_v2_m(ngpu, side, NE, n, nb, Vblksiz, E, lde, V, ldv, T, ldt, info)
    ccall((:magma_cbulge_applyQ_v2_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, side, NE, n, nb, Vblksiz, E, lde, V, ldv, T, ldt, info)
end

"""
    magma_cbulge_back(uplo, n, nb, ne, Vblksiz, Z, ldz, dZ, lddz, V, ldv, TAU, T, ldt, info)


### Prototype
```c
magma_int_t magma_cbulge_back( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t ne, magma_int_t Vblksiz, magmaFloatComplex *Z, magma_int_t ldz, magmaFloatComplex_ptr dZ, magma_int_t lddz, magmaFloatComplex *V, magma_int_t ldv, magmaFloatComplex *TAU, magmaFloatComplex *T, magma_int_t ldt, magma_int_t* info);
```
"""
function magma_cbulge_back(uplo, n, nb, ne, Vblksiz, Z, ldz, dZ, lddz, V, ldv, TAU, T, ldt, info)
    ccall((:magma_cbulge_back, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, nb, ne, Vblksiz, Z, ldz, dZ, lddz, V, ldv, TAU, T, ldt, info)
end

"""
    magma_cbulge_back_m(ngpu, uplo, n, nb, ne, Vblksiz, Z, ldz, V, ldv, TAU, T, ldt, info)


### Prototype
```c
magma_int_t magma_cbulge_back_m( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t ne, magma_int_t Vblksiz, magmaFloatComplex *Z, magma_int_t ldz, magmaFloatComplex *V, magma_int_t ldv, magmaFloatComplex *TAU, magmaFloatComplex *T, magma_int_t ldt, magma_int_t* info);
```
"""
function magma_cbulge_back_m(ngpu, uplo, n, nb, ne, Vblksiz, Z, ldz, V, ldv, TAU, T, ldt, info)
    ccall((:magma_cbulge_back_m, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, nb, ne, Vblksiz, Z, ldz, V, ldv, TAU, T, ldt, info)
end

"""
    magma_ctrdtype1cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)


### Prototype
```c
void magma_ctrdtype1cbHLsym_withQ_v2( magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *V, magma_int_t ldv, magmaFloatComplex *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magmaFloatComplex *work);
```
"""
function magma_ctrdtype1cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
    ccall((:magma_ctrdtype1cbHLsym_withQ_v2, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
end

"""
    magma_ctrdtype2cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)


### Prototype
```c
void magma_ctrdtype2cbHLsym_withQ_v2( magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *V, magma_int_t ldv, magmaFloatComplex *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magmaFloatComplex *work);
```
"""
function magma_ctrdtype2cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
    ccall((:magma_ctrdtype2cbHLsym_withQ_v2, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
end

"""
    magma_ctrdtype3cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)


### Prototype
```c
void magma_ctrdtype3cbHLsym_withQ_v2( magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *V, magma_int_t ldv, magmaFloatComplex *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magmaFloatComplex *work);
```
"""
function magma_ctrdtype3cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
    ccall((:magma_ctrdtype3cbHLsym_withQ_v2, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
end

"""
    magma_clarfy(n, A, lda, V, TAU, work)


### Prototype
```c
void magma_clarfy( magma_int_t n, magmaFloatComplex *A, magma_int_t lda, const magmaFloatComplex *V, const magmaFloatComplex *TAU, magmaFloatComplex *work);
```
"""
function magma_clarfy(n, A, lda, V, TAU, work)
    ccall((:magma_clarfy, libmagma), Cvoid, (magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}), n, A, lda, V, TAU, work)
end

"""
    magma_chbtype1cb(n, nb, A, lda, V, LDV, TAU, st, ed, sweep, Vblksiz, wantz, work)


### Prototype
```c
void magma_chbtype1cb(magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *V, magma_int_t LDV, magmaFloatComplex *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magma_int_t wantz, magmaFloatComplex *work);
```
"""
function magma_chbtype1cb(n, nb, A, lda, V, LDV, TAU, st, ed, sweep, Vblksiz, wantz, work)
    ccall((:magma_chbtype1cb, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}), n, nb, A, lda, V, LDV, TAU, st, ed, sweep, Vblksiz, wantz, work)
end

"""
    magma_chbtype2cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)


### Prototype
```c
void magma_chbtype2cb(magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *V, magma_int_t ldv, magmaFloatComplex *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magma_int_t wantz, magmaFloatComplex *work);
```
"""
function magma_chbtype2cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
    ccall((:magma_chbtype2cb, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
end

"""
    magma_chbtype3cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)


### Prototype
```c
void magma_chbtype3cb(magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *V, magma_int_t ldv, magmaFloatComplex *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magma_int_t wantz, magmaFloatComplex *work);
```
"""
function magma_chbtype3cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
    ccall((:magma_chbtype3cb, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
end

"""
    magma_cunmqr_2stage_gpu(side, trans, m, n, k, dA, ldda, dC, lddc, dT, nb, info)


### Prototype
```c
magma_int_t magma_cunmqr_2stage_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dC, magma_int_t lddc, magmaFloatComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_cunmqr_2stage_gpu(side, trans, m, n, k, dA, ldda, dC, lddc, dT, nb, info)
    ccall((:magma_cunmqr_2stage_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, dC, lddc, dT, nb, info)
end

"""
    magma_get_cbulge_lq2(n, threads, wantz)


### Prototype
```c
magma_int_t magma_get_cbulge_lq2( magma_int_t n, magma_int_t threads, magma_int_t wantz);
```
"""
function magma_get_cbulge_lq2(n, threads, wantz)
    ccall((:magma_get_cbulge_lq2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), n, threads, wantz)
end

"""
    magma_cbulge_getstg2size(n, nb, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)


### Prototype
```c
magma_int_t magma_cbulge_getstg2size(magma_int_t n, magma_int_t nb, magma_int_t wantz, magma_int_t Vblksiz, magma_int_t ldv, magma_int_t ldt, magma_int_t *blkcnt, magma_int_t *sizTAU2, magma_int_t *sizT2, magma_int_t *sizV2);
```
"""
function magma_cbulge_getstg2size(n, nb, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
    ccall((:magma_cbulge_getstg2size, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
end

"""
    magma_cbulge_getlwstg2(n, threads, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)


### Prototype
```c
magma_int_t magma_cbulge_getlwstg2(magma_int_t n, magma_int_t threads, magma_int_t wantz, magma_int_t *Vblksiz, magma_int_t *ldv, magma_int_t *ldt, magma_int_t *blkcnt, magma_int_t *sizTAU2, magma_int_t *sizT2, magma_int_t *sizV2);
```
"""
function magma_cbulge_getlwstg2(n, threads, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
    ccall((:magma_cbulge_getlwstg2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, threads, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
end

"""
    magma_cheevdx_getworksize(n, threads, wantz, lwmin, lrwmin, liwmin)


### Prototype
```c
void magma_cheevdx_getworksize(magma_int_t n, magma_int_t threads, magma_int_t wantz, magma_int_t *lwmin, #ifdef MAGMA_COMPLEX magma_int_t *lrwmin, #endif magma_int_t *liwmin);
```
"""
function magma_cheevdx_getworksize(n, threads, wantz, lwmin, lrwmin, liwmin)
    ccall((:magma_cheevdx_getworksize, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, threads, wantz, lwmin, lrwmin, liwmin)
end

"""
    magma_chetrd_bhe2trc_v5(threads, wantz, uplo, ne, n, nb, A, lda, D, E, dT1, ldt1)

used only for old version and internal
### Prototype
```c
magma_int_t magma_chetrd_bhe2trc_v5( magma_int_t threads, magma_int_t wantz, magma_uplo_t uplo, magma_int_t ne, magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, float *D, float *E, magmaFloatComplex_ptr dT1, magma_int_t ldt1);
```
"""
function magma_chetrd_bhe2trc_v5(threads, wantz, uplo, ne, n, nb, A, lda, D, E, dT1, ldt1)
    ccall((:magma_chetrd_bhe2trc_v5, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magmaFloatComplex_ptr, magma_int_t), threads, wantz, uplo, ne, n, nb, A, lda, D, E, dT1, ldt1)
end

"""
    magma_cungqr_2stage_gpu(m, n, k, dA, ldda, tau, dT, nb, info)


### Prototype
```c
magma_int_t magma_cungqr_2stage_gpu( magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex *tau, magmaFloatComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_cungqr_2stage_gpu(m, n, k, dA, ldda, tau, dT, nb, info)
    ccall((:magma_cungqr_2stage_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, dA, ldda, tau, dT, nb, info)
end

"""
    magma_dbulge_applyQ_v2(side, NE, n, nb, Vblksiz, dE, ldde, V, ldv, T, ldt, info)


### Prototype
```c
magma_int_t magma_dbulge_applyQ_v2( magma_side_t side, magma_int_t NE, magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magmaDouble_ptr dE, magma_int_t ldde, double *V, magma_int_t ldv, double *T, magma_int_t ldt, magma_int_t *info);
```
"""
function magma_dbulge_applyQ_v2(side, NE, n, nb, Vblksiz, dE, ldde, V, ldv, T, ldt, info)
    ccall((:magma_dbulge_applyQ_v2, libmagma), magma_int_t, (magma_side_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), side, NE, n, nb, Vblksiz, dE, ldde, V, ldv, T, ldt, info)
end

"""
    magma_dbulge_applyQ_v2_m(ngpu, side, NE, n, nb, Vblksiz, E, lde, V, ldv, T, ldt, info)


### Prototype
```c
magma_int_t magma_dbulge_applyQ_v2_m( magma_int_t ngpu, magma_side_t side, magma_int_t NE, magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, double *E, magma_int_t lde, double *V, magma_int_t ldv, double *T, magma_int_t ldt, magma_int_t *info);
```
"""
function magma_dbulge_applyQ_v2_m(ngpu, side, NE, n, nb, Vblksiz, E, lde, V, ldv, T, ldt, info)
    ccall((:magma_dbulge_applyQ_v2_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), ngpu, side, NE, n, nb, Vblksiz, E, lde, V, ldv, T, ldt, info)
end

"""
    magma_dbulge_back(uplo, n, nb, ne, Vblksiz, Z, ldz, dZ, lddz, V, ldv, TAU, T, ldt, info)


### Prototype
```c
magma_int_t magma_dbulge_back( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t ne, magma_int_t Vblksiz, double *Z, magma_int_t ldz, magmaDouble_ptr dZ, magma_int_t lddz, double *V, magma_int_t ldv, double *TAU, double *T, magma_int_t ldt, magma_int_t* info);
```
"""
function magma_dbulge_back(uplo, n, nb, ne, Vblksiz, Z, ldz, dZ, lddz, V, ldv, TAU, T, ldt, info)
    ccall((:magma_dbulge_back, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), uplo, n, nb, ne, Vblksiz, Z, ldz, dZ, lddz, V, ldv, TAU, T, ldt, info)
end

"""
    magma_dbulge_back_m(ngpu, uplo, n, nb, ne, Vblksiz, Z, ldz, V, ldv, TAU, T, ldt, info)


### Prototype
```c
magma_int_t magma_dbulge_back_m( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t ne, magma_int_t Vblksiz, double *Z, magma_int_t ldz, double *V, magma_int_t ldv, double *TAU, double *T, magma_int_t ldt, magma_int_t* info);
```
"""
function magma_dbulge_back_m(ngpu, uplo, n, nb, ne, Vblksiz, Z, ldz, V, ldv, TAU, T, ldt, info)
    ccall((:magma_dbulge_back_m, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, nb, ne, Vblksiz, Z, ldz, V, ldv, TAU, T, ldt, info)
end

"""
    magma_dtrdtype1cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)


### Prototype
```c
void magma_dtrdtype1cbHLsym_withQ_v2( magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, double *V, magma_int_t ldv, double *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, double *work);
```
"""
function magma_dtrdtype1cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
    ccall((:magma_dtrdtype1cbHLsym_withQ_v2, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
end

"""
    magma_dtrdtype2cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)


### Prototype
```c
void magma_dtrdtype2cbHLsym_withQ_v2( magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, double *V, magma_int_t ldv, double *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, double *work);
```
"""
function magma_dtrdtype2cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
    ccall((:magma_dtrdtype2cbHLsym_withQ_v2, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
end

"""
    magma_dtrdtype3cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)


### Prototype
```c
void magma_dtrdtype3cbHLsym_withQ_v2( magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, double *V, magma_int_t ldv, double *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, double *work);
```
"""
function magma_dtrdtype3cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
    ccall((:magma_dtrdtype3cbHLsym_withQ_v2, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
end

"""
    magma_dlarfy(n, A, lda, V, TAU, work)


### Prototype
```c
void magma_dlarfy( magma_int_t n, double *A, magma_int_t lda, const double *V, const double *TAU, double *work);
```
"""
function magma_dlarfy(n, A, lda, V, TAU, work)
    ccall((:magma_dlarfy, libmagma), Cvoid, (magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}), n, A, lda, V, TAU, work)
end

"""
    magma_dsbtype1cb(n, nb, A, lda, V, LDV, TAU, st, ed, sweep, Vblksiz, wantz, work)


### Prototype
```c
void magma_dsbtype1cb(magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, double *V, magma_int_t LDV, double *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magma_int_t wantz, double *work);
```
"""
function magma_dsbtype1cb(n, nb, A, lda, V, LDV, TAU, st, ed, sweep, Vblksiz, wantz, work)
    ccall((:magma_dsbtype1cb, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}), n, nb, A, lda, V, LDV, TAU, st, ed, sweep, Vblksiz, wantz, work)
end

"""
    magma_dsbtype2cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)


### Prototype
```c
void magma_dsbtype2cb(magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, double *V, magma_int_t ldv, double *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magma_int_t wantz, double *work);
```
"""
function magma_dsbtype2cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
    ccall((:magma_dsbtype2cb, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
end

"""
    magma_dsbtype3cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)


### Prototype
```c
void magma_dsbtype3cb(magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, double *V, magma_int_t ldv, double *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magma_int_t wantz, double *work);
```
"""
function magma_dsbtype3cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
    ccall((:magma_dsbtype3cb, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
end

"""
    magma_dormqr_2stage_gpu(side, trans, m, n, k, dA, ldda, dC, lddc, dT, nb, info)


### Prototype
```c
magma_int_t magma_dormqr_2stage_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dC, magma_int_t lddc, magmaDouble_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_dormqr_2stage_gpu(side, trans, m, n, k, dA, ldda, dC, lddc, dT, nb, info)
    ccall((:magma_dormqr_2stage_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, dC, lddc, dT, nb, info)
end

"""
    magma_get_dbulge_lq2(n, threads, wantz)


### Prototype
```c
magma_int_t magma_get_dbulge_lq2( magma_int_t n, magma_int_t threads, magma_int_t wantz);
```
"""
function magma_get_dbulge_lq2(n, threads, wantz)
    ccall((:magma_get_dbulge_lq2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), n, threads, wantz)
end

"""
    magma_dbulge_getstg2size(n, nb, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)


### Prototype
```c
magma_int_t magma_dbulge_getstg2size(magma_int_t n, magma_int_t nb, magma_int_t wantz, magma_int_t Vblksiz, magma_int_t ldv, magma_int_t ldt, magma_int_t *blkcnt, magma_int_t *sizTAU2, magma_int_t *sizT2, magma_int_t *sizV2);
```
"""
function magma_dbulge_getstg2size(n, nb, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
    ccall((:magma_dbulge_getstg2size, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
end

"""
    magma_dbulge_getlwstg2(n, threads, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)


### Prototype
```c
magma_int_t magma_dbulge_getlwstg2(magma_int_t n, magma_int_t threads, magma_int_t wantz, magma_int_t *Vblksiz, magma_int_t *ldv, magma_int_t *ldt, magma_int_t *blkcnt, magma_int_t *sizTAU2, magma_int_t *sizT2, magma_int_t *sizV2);
```
"""
function magma_dbulge_getlwstg2(n, threads, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
    ccall((:magma_dbulge_getlwstg2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, threads, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
end

"""
    magma_dsyevdx_getworksize(n, threads, wantz, lwmin, liwmin)


### Prototype
```c
void magma_dsyevdx_getworksize(magma_int_t n, magma_int_t threads, magma_int_t wantz, magma_int_t *lwmin, #ifdef MAGMA_COMPLEX magma_int_t *lrwmin, #endif magma_int_t *liwmin);
```
"""
function magma_dsyevdx_getworksize(n, threads, wantz, lwmin, liwmin)
    ccall((:magma_dsyevdx_getworksize, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), n, threads, wantz, lwmin, liwmin)
end

"""
    magma_dsytrd_bsy2trc_v5(threads, wantz, uplo, ne, n, nb, A, lda, D, E, dT1, ldt1)

used only for old version and internal
### Prototype
```c
magma_int_t magma_dsytrd_bsy2trc_v5( magma_int_t threads, magma_int_t wantz, magma_uplo_t uplo, magma_int_t ne, magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, double *D, double *E, magmaDouble_ptr dT1, magma_int_t ldt1);
```
"""
function magma_dsytrd_bsy2trc_v5(threads, wantz, uplo, ne, n, nb, A, lda, D, E, dT1, ldt1)
    ccall((:magma_dsytrd_bsy2trc_v5, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magmaDouble_ptr, magma_int_t), threads, wantz, uplo, ne, n, nb, A, lda, D, E, dT1, ldt1)
end

"""
    magma_dorgqr_2stage_gpu(m, n, k, dA, ldda, tau, dT, nb, info)


### Prototype
```c
magma_int_t magma_dorgqr_2stage_gpu( magma_int_t m, magma_int_t n, magma_int_t k, magmaDouble_ptr dA, magma_int_t ldda, double *tau, magmaDouble_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_dorgqr_2stage_gpu(m, n, k, dA, ldda, tau, dT, nb, info)
    ccall((:magma_dorgqr_2stage_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, dA, ldda, tau, dT, nb, info)
end

"""
    magma_sbulge_applyQ_v2(side, NE, n, nb, Vblksiz, dE, ldde, V, ldv, T, ldt, info)


### Prototype
```c
magma_int_t magma_sbulge_applyQ_v2( magma_side_t side, magma_int_t NE, magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magmaFloat_ptr dE, magma_int_t ldde, float *V, magma_int_t ldv, float *T, magma_int_t ldt, magma_int_t *info);
```
"""
function magma_sbulge_applyQ_v2(side, NE, n, nb, Vblksiz, dE, ldde, V, ldv, T, ldt, info)
    ccall((:magma_sbulge_applyQ_v2, libmagma), magma_int_t, (magma_side_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), side, NE, n, nb, Vblksiz, dE, ldde, V, ldv, T, ldt, info)
end

"""
    magma_sbulge_applyQ_v2_m(ngpu, side, NE, n, nb, Vblksiz, E, lde, V, ldv, T, ldt, info)


### Prototype
```c
magma_int_t magma_sbulge_applyQ_v2_m( magma_int_t ngpu, magma_side_t side, magma_int_t NE, magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, float *E, magma_int_t lde, float *V, magma_int_t ldv, float *T, magma_int_t ldt, magma_int_t *info);
```
"""
function magma_sbulge_applyQ_v2_m(ngpu, side, NE, n, nb, Vblksiz, E, lde, V, ldv, T, ldt, info)
    ccall((:magma_sbulge_applyQ_v2_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), ngpu, side, NE, n, nb, Vblksiz, E, lde, V, ldv, T, ldt, info)
end

"""
    magma_sbulge_back(uplo, n, nb, ne, Vblksiz, Z, ldz, dZ, lddz, V, ldv, TAU, T, ldt, info)


### Prototype
```c
magma_int_t magma_sbulge_back( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t ne, magma_int_t Vblksiz, float *Z, magma_int_t ldz, magmaFloat_ptr dZ, magma_int_t lddz, float *V, magma_int_t ldv, float *TAU, float *T, magma_int_t ldt, magma_int_t* info);
```
"""
function magma_sbulge_back(uplo, n, nb, ne, Vblksiz, Z, ldz, dZ, lddz, V, ldv, TAU, T, ldt, info)
    ccall((:magma_sbulge_back, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), uplo, n, nb, ne, Vblksiz, Z, ldz, dZ, lddz, V, ldv, TAU, T, ldt, info)
end

"""
    magma_sbulge_back_m(ngpu, uplo, n, nb, ne, Vblksiz, Z, ldz, V, ldv, TAU, T, ldt, info)


### Prototype
```c
magma_int_t magma_sbulge_back_m( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t ne, magma_int_t Vblksiz, float *Z, magma_int_t ldz, float *V, magma_int_t ldv, float *TAU, float *T, magma_int_t ldt, magma_int_t* info);
```
"""
function magma_sbulge_back_m(ngpu, uplo, n, nb, ne, Vblksiz, Z, ldz, V, ldv, TAU, T, ldt, info)
    ccall((:magma_sbulge_back_m, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, nb, ne, Vblksiz, Z, ldz, V, ldv, TAU, T, ldt, info)
end

"""
    magma_strdtype1cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)


### Prototype
```c
void magma_strdtype1cbHLsym_withQ_v2( magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, float *V, magma_int_t ldv, float *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, float *work);
```
"""
function magma_strdtype1cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
    ccall((:magma_strdtype1cbHLsym_withQ_v2, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
end

"""
    magma_strdtype2cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)


### Prototype
```c
void magma_strdtype2cbHLsym_withQ_v2( magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, float *V, magma_int_t ldv, float *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, float *work);
```
"""
function magma_strdtype2cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
    ccall((:magma_strdtype2cbHLsym_withQ_v2, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
end

"""
    magma_strdtype3cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)


### Prototype
```c
void magma_strdtype3cbHLsym_withQ_v2( magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, float *V, magma_int_t ldv, float *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, float *work);
```
"""
function magma_strdtype3cbHLsym_withQ_v2(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
    ccall((:magma_strdtype3cbHLsym_withQ_v2, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, work)
end

"""
    magma_slarfy(n, A, lda, V, TAU, work)


### Prototype
```c
void magma_slarfy( magma_int_t n, float *A, magma_int_t lda, const float *V, const float *TAU, float *work);
```
"""
function magma_slarfy(n, A, lda, V, TAU, work)
    ccall((:magma_slarfy, libmagma), Cvoid, (magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}), n, A, lda, V, TAU, work)
end

"""
    magma_ssbtype1cb(n, nb, A, lda, V, LDV, TAU, st, ed, sweep, Vblksiz, wantz, work)


### Prototype
```c
void magma_ssbtype1cb(magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, float *V, magma_int_t LDV, float *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magma_int_t wantz, float *work);
```
"""
function magma_ssbtype1cb(n, nb, A, lda, V, LDV, TAU, st, ed, sweep, Vblksiz, wantz, work)
    ccall((:magma_ssbtype1cb, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}), n, nb, A, lda, V, LDV, TAU, st, ed, sweep, Vblksiz, wantz, work)
end

"""
    magma_ssbtype2cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)


### Prototype
```c
void magma_ssbtype2cb(magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, float *V, magma_int_t ldv, float *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magma_int_t wantz, float *work);
```
"""
function magma_ssbtype2cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
    ccall((:magma_ssbtype2cb, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
end

"""
    magma_ssbtype3cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)


### Prototype
```c
void magma_ssbtype3cb(magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, float *V, magma_int_t ldv, float *TAU, magma_int_t st, magma_int_t ed, magma_int_t sweep, magma_int_t Vblksiz, magma_int_t wantz, float *work);
```
"""
function magma_ssbtype3cb(n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
    ccall((:magma_ssbtype3cb, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}), n, nb, A, lda, V, ldv, TAU, st, ed, sweep, Vblksiz, wantz, work)
end

"""
    magma_sormqr_2stage_gpu(side, trans, m, n, k, dA, ldda, dC, lddc, dT, nb, info)


### Prototype
```c
magma_int_t magma_sormqr_2stage_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dC, magma_int_t lddc, magmaFloat_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_sormqr_2stage_gpu(side, trans, m, n, k, dA, ldda, dC, lddc, dT, nb, info)
    ccall((:magma_sormqr_2stage_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, dC, lddc, dT, nb, info)
end

"""
    magma_get_sbulge_lq2(n, threads, wantz)


### Prototype
```c
magma_int_t magma_get_sbulge_lq2( magma_int_t n, magma_int_t threads, magma_int_t wantz);
```
"""
function magma_get_sbulge_lq2(n, threads, wantz)
    ccall((:magma_get_sbulge_lq2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), n, threads, wantz)
end

"""
    magma_sbulge_getstg2size(n, nb, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)


### Prototype
```c
magma_int_t magma_sbulge_getstg2size(magma_int_t n, magma_int_t nb, magma_int_t wantz, magma_int_t Vblksiz, magma_int_t ldv, magma_int_t ldt, magma_int_t *blkcnt, magma_int_t *sizTAU2, magma_int_t *sizT2, magma_int_t *sizV2);
```
"""
function magma_sbulge_getstg2size(n, nb, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
    ccall((:magma_sbulge_getstg2size, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
end

"""
    magma_sbulge_getlwstg2(n, threads, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)


### Prototype
```c
magma_int_t magma_sbulge_getlwstg2(magma_int_t n, magma_int_t threads, magma_int_t wantz, magma_int_t *Vblksiz, magma_int_t *ldv, magma_int_t *ldt, magma_int_t *blkcnt, magma_int_t *sizTAU2, magma_int_t *sizT2, magma_int_t *sizV2);
```
"""
function magma_sbulge_getlwstg2(n, threads, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
    ccall((:magma_sbulge_getlwstg2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, threads, wantz, Vblksiz, ldv, ldt, blkcnt, sizTAU2, sizT2, sizV2)
end

"""
    magma_ssyevdx_getworksize(n, threads, wantz, lwmin, liwmin)


### Prototype
```c
void magma_ssyevdx_getworksize(magma_int_t n, magma_int_t threads, magma_int_t wantz, magma_int_t *lwmin, #ifdef MAGMA_COMPLEX magma_int_t *lrwmin, #endif magma_int_t *liwmin);
```
"""
function magma_ssyevdx_getworksize(n, threads, wantz, lwmin, liwmin)
    ccall((:magma_ssyevdx_getworksize, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), n, threads, wantz, lwmin, liwmin)
end

"""
    magma_ssytrd_bsy2trc_v5(threads, wantz, uplo, ne, n, nb, A, lda, D, E, dT1, ldt1)

used only for old version and internal
### Prototype
```c
magma_int_t magma_ssytrd_bsy2trc_v5( magma_int_t threads, magma_int_t wantz, magma_uplo_t uplo, magma_int_t ne, magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, float *D, float *E, magmaFloat_ptr dT1, magma_int_t ldt1);
```
"""
function magma_ssytrd_bsy2trc_v5(threads, wantz, uplo, ne, n, nb, A, lda, D, E, dT1, ldt1)
    ccall((:magma_ssytrd_bsy2trc_v5, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magmaFloat_ptr, magma_int_t), threads, wantz, uplo, ne, n, nb, A, lda, D, E, dT1, ldt1)
end

"""
    magma_sorgqr_2stage_gpu(m, n, k, dA, ldda, tau, dT, nb, info)


### Prototype
```c
magma_int_t magma_sorgqr_2stage_gpu( magma_int_t m, magma_int_t n, magma_int_t k, magmaFloat_ptr dA, magma_int_t ldda, float *tau, magmaFloat_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_sorgqr_2stage_gpu(m, n, k, dA, ldda, tau, dT, nb, info)
    ccall((:magma_sorgqr_2stage_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, dA, ldda, tau, dT, nb, info)
end

# no prototype is found for this function at magma_bulge.h:22:17, please use with caution
"""
    magma_yield()


### Prototype
```c
magma_int_t magma_yield();
```
"""
function magma_yield()
    ccall((:magma_yield, libmagma), magma_int_t, ())
end

"""
    magma_bulge_getlwstg1(n, nb, lda2)


### Prototype
```c
magma_int_t magma_bulge_getlwstg1(magma_int_t n, magma_int_t nb, magma_int_t *lda2);
```
"""
function magma_bulge_getlwstg1(n, nb, lda2)
    ccall((:magma_bulge_getlwstg1, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magma_int_t}), n, nb, lda2)
end

"""
    cmp_vals(n, wr1, wr2, nrmI, nrm1, nrm2)


### Prototype
```c
void cmp_vals(magma_int_t n, double *wr1, double *wr2, double *nrmI, double *nrm1, double *nrm2);
```
"""
function cmp_vals(n, wr1, wr2, nrmI, nrm1, nrm2)
    ccall((:cmp_vals, libmagma), Cvoid, (magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}), n, wr1, wr2, nrmI, nrm1, nrm2)
end

"""
    magma_bulge_findVTAUpos(n, nb, Vblksiz, sweep, st, ldv, Vpos, TAUpos)


### Prototype
```c
void magma_bulge_findVTAUpos(magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magma_int_t sweep, magma_int_t st, magma_int_t ldv, magma_int_t *Vpos, magma_int_t *TAUpos);
```
"""
function magma_bulge_findVTAUpos(n, nb, Vblksiz, sweep, st, ldv, Vpos, TAUpos)
    ccall((:magma_bulge_findVTAUpos, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, Vblksiz, sweep, st, ldv, Vpos, TAUpos)
end

"""
    magma_bulge_findVTpos(n, nb, Vblksiz, sweep, st, ldv, ldt, Vpos, Tpos)


### Prototype
```c
void magma_bulge_findVTpos(magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magma_int_t sweep, magma_int_t st, magma_int_t ldv, magma_int_t ldt, magma_int_t *Vpos, magma_int_t *Tpos);
```
"""
function magma_bulge_findVTpos(n, nb, Vblksiz, sweep, st, ldv, ldt, Vpos, Tpos)
    ccall((:magma_bulge_findVTpos, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, Vblksiz, sweep, st, ldv, ldt, Vpos, Tpos)
end

"""
    magma_bulge_findVTAUTpos(n, nb, Vblksiz, sweep, st, ldv, ldt, Vpos, TAUpos, Tpos, blkid)


### Prototype
```c
void magma_bulge_findVTAUTpos(magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magma_int_t sweep, magma_int_t st, magma_int_t ldv, magma_int_t ldt, magma_int_t *Vpos, magma_int_t *TAUpos, magma_int_t *Tpos, magma_int_t *blkid);
```
"""
function magma_bulge_findVTAUTpos(n, nb, Vblksiz, sweep, st, ldv, ldt, Vpos, TAUpos, Tpos, blkid)
    ccall((:magma_bulge_findVTAUTpos, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, Vblksiz, sweep, st, ldv, ldt, Vpos, TAUpos, Tpos, blkid)
end

"""
    magma_bulge_findpos(n, nb, Vblksiz, sweep, st, myblkid)


### Prototype
```c
void magma_bulge_findpos(magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magma_int_t sweep, magma_int_t st, magma_int_t *myblkid);
```
"""
function magma_bulge_findpos(n, nb, Vblksiz, sweep, st, myblkid)
    ccall((:magma_bulge_findpos, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}), n, nb, Vblksiz, sweep, st, myblkid)
end

"""
    magma_bulge_findpos113(n, nb, Vblksiz, sweep, st, myblkid)


### Prototype
```c
void magma_bulge_findpos113(magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magma_int_t sweep, magma_int_t st, magma_int_t *myblkid);
```
"""
function magma_bulge_findpos113(n, nb, Vblksiz, sweep, st, myblkid)
    ccall((:magma_bulge_findpos113, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}), n, nb, Vblksiz, sweep, st, myblkid)
end

"""
    magma_bulge_get_blkcnt(n, nb, Vblksiz)


### Prototype
```c
magma_int_t magma_bulge_get_blkcnt(magma_int_t n, magma_int_t nb, magma_int_t Vblksiz);
```
"""
function magma_bulge_get_blkcnt(n, nb, Vblksiz)
    ccall((:magma_bulge_get_blkcnt, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), n, nb, Vblksiz)
end

"""
    findVTpos(n, nb, Vblksiz, sweep, st, Vpos, TAUpos, Tpos, myblkid)


### Prototype
```c
void findVTpos(magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magma_int_t sweep, magma_int_t st, magma_int_t *Vpos, magma_int_t *TAUpos, magma_int_t *Tpos, magma_int_t *myblkid);
```
"""
function findVTpos(n, nb, Vblksiz, sweep, st, Vpos, TAUpos, Tpos, myblkid)
    ccall((:findVTpos, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), n, nb, Vblksiz, sweep, st, Vpos, TAUpos, Tpos, myblkid)
end

"""
    zgehrd_data

//**
Structure containing matrices for multi-GPU zgehrd.

- dA  is distributed column block-cyclic across GPUs.
- dV  is duplicated on all GPUs.
- dVd is distributed row block-cyclic across GPUs (TODO: verify).
- dY  is partial results on each GPU in zlahr2,
then complete results are duplicated on all GPUs for zlahru.
- dW  is local to each GPU (workspace).
- dTi is duplicated on all GPUs.

@ingroup magma_gehrd
"""
struct zgehrd_data
    ngpu::magma_int_t
    ldda::magma_int_t
    ldv::magma_int_t
    ldvd::magma_int_t
    dA::NTuple{8, magmaDoubleComplex_ptr}
    dV::NTuple{8, magmaDoubleComplex_ptr}
    dVd::NTuple{8, magmaDoubleComplex_ptr}
    dY::NTuple{8, magmaDoubleComplex_ptr}
    dW::NTuple{8, magmaDoubleComplex_ptr}
    dTi::NTuple{8, magmaDoubleComplex_ptr}
    queues::NTuple{8, magma_queue_t}
end

"""
    magma_get_zpotrf_nb(n)

Cholesky, LU, symmetric indefinite
### Prototype
```c
magma_int_t magma_get_zpotrf_nb( magma_int_t n );
```
"""
function magma_get_zpotrf_nb(n)
    ccall((:magma_get_zpotrf_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_zgetrf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_zgetrf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_zgetrf_nb(m, n)
    ccall((:magma_get_zgetrf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_zgetrf_native_nb(m, n)


### Prototype
```c
magma_int_t magma_get_zgetrf_native_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_zgetrf_native_nb(m, n)
    ccall((:magma_get_zgetrf_native_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_zgetri_nb(n)


### Prototype
```c
magma_int_t magma_get_zgetri_nb( magma_int_t n );
```
"""
function magma_get_zgetri_nb(n)
    ccall((:magma_get_zgetri_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_zhetrf_nb(n)


### Prototype
```c
magma_int_t magma_get_zhetrf_nb( magma_int_t n );
```
"""
function magma_get_zhetrf_nb(n)
    ccall((:magma_get_zhetrf_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_zhetrf_nopiv_nb(n)


### Prototype
```c
magma_int_t magma_get_zhetrf_nopiv_nb( magma_int_t n );
```
"""
function magma_get_zhetrf_nopiv_nb(n)
    ccall((:magma_get_zhetrf_nopiv_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_zhetrf_aasen_nb(n)


### Prototype
```c
magma_int_t magma_get_zhetrf_aasen_nb( magma_int_t n );
```
"""
function magma_get_zhetrf_aasen_nb(n)
    ccall((:magma_get_zhetrf_aasen_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_zgeqp3_nb(m, n)

QR
### Prototype
```c
magma_int_t magma_get_zgeqp3_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_zgeqp3_nb(m, n)
    ccall((:magma_get_zgeqp3_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_zgeqrf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_zgeqrf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_zgeqrf_nb(m, n)
    ccall((:magma_get_zgeqrf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_zgeqlf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_zgeqlf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_zgeqlf_nb(m, n)
    ccall((:magma_get_zgeqlf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_zgelqf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_zgelqf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_zgelqf_nb(m, n)
    ccall((:magma_get_zgelqf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_zgehrd_nb(n)

eigenvalues
### Prototype
```c
magma_int_t magma_get_zgehrd_nb( magma_int_t n );
```
"""
function magma_get_zgehrd_nb(n)
    ccall((:magma_get_zgehrd_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_zhetrd_nb(n)


### Prototype
```c
magma_int_t magma_get_zhetrd_nb( magma_int_t n );
```
"""
function magma_get_zhetrd_nb(n)
    ccall((:magma_get_zhetrd_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_zhegst_nb(n)


### Prototype
```c
magma_int_t magma_get_zhegst_nb( magma_int_t n );
```
"""
function magma_get_zhegst_nb(n)
    ccall((:magma_get_zhegst_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_zhegst_m_nb(n)


### Prototype
```c
magma_int_t magma_get_zhegst_m_nb( magma_int_t n );
```
"""
function magma_get_zhegst_m_nb(n)
    ccall((:magma_get_zhegst_m_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_zgebrd_nb(m, n)

SVD
### Prototype
```c
magma_int_t magma_get_zgebrd_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_zgebrd_nb(m, n)
    ccall((:magma_get_zgebrd_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_zgesvd_nb(m, n)


### Prototype
```c
magma_int_t magma_get_zgesvd_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_zgesvd_nb(m, n)
    ccall((:magma_get_zgesvd_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_zbulge_nb(n, nbthreads)

2-stage eigenvalues
### Prototype
```c
magma_int_t magma_get_zbulge_nb( magma_int_t n, magma_int_t nbthreads );
```
"""
function magma_get_zbulge_nb(n, nbthreads)
    ccall((:magma_get_zbulge_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), n, nbthreads)
end

"""
    magma_get_zbulge_nb_mgpu(n)


### Prototype
```c
magma_int_t magma_get_zbulge_nb_mgpu( magma_int_t n );
```
"""
function magma_get_zbulge_nb_mgpu(n)
    ccall((:magma_get_zbulge_nb_mgpu, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_zbulge_vblksiz(n, nb, nbthreads)


### Prototype
```c
magma_int_t magma_get_zbulge_vblksiz( magma_int_t n, magma_int_t nb, magma_int_t nbthreads );
```
"""
function magma_get_zbulge_vblksiz(n, nb, nbthreads)
    ccall((:magma_get_zbulge_vblksiz, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), n, nb, nbthreads)
end

# no prototype is found for this function at magma_z.h:59:13, please use with caution
"""
    magma_get_zbulge_gcperf()


### Prototype
```c
magma_int_t magma_get_zbulge_gcperf();
```
"""
function magma_get_zbulge_gcperf()
    ccall((:magma_get_zbulge_gcperf, libmagma), magma_int_t, ())
end

"""
    magma_zgebrd(m, n, A, lda, d, e, tauq, taup, work, lwork, info)

------------------------------------------------------------ zge routines
### Prototype
```c
magma_int_t magma_zgebrd( magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double *d, double *e, magmaDoubleComplex *tauq, magmaDoubleComplex *taup, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgebrd(m, n, A, lda, d, e, tauq, taup, work, lwork, info)
    ccall((:magma_zgebrd, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, d, e, tauq, taup, work, lwork, info)
end

"""
    magma_zgeev(jobvl, jobvr, n, A, lda, w, VL, ldvl, VR, ldvr, work, lwork, rwork, info)


### Prototype
```c
magma_int_t magma_zgeev( magma_vec_t jobvl, magma_vec_t jobvr, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, #ifdef MAGMA_COMPLEX magmaDoubleComplex *w, #else double *wr, double *wi, #endif magmaDoubleComplex *VL, magma_int_t ldvl, magmaDoubleComplex *VR, magma_int_t ldvr, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_zgeev(jobvl, jobvr, n, A, lda, w, VL, ldvl, VR, ldvr, work, lwork, rwork, info)
    ccall((:magma_zgeev, libmagma), magma_int_t, (magma_vec_t, magma_vec_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}), jobvl, jobvr, n, A, lda, w, VL, ldvl, VR, ldvr, work, lwork, rwork, info)
end

"""
    magma_zgeev_m(jobvl, jobvr, n, A, lda, w, VL, ldvl, VR, ldvr, work, lwork, rwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgeev_m( magma_vec_t jobvl, magma_vec_t jobvr, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, #ifdef MAGMA_COMPLEX magmaDoubleComplex *w, #else double *wr, double *wi, #endif magmaDoubleComplex *VL, magma_int_t ldvl, magmaDoubleComplex *VR, magma_int_t ldvr, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_zgeev_m(jobvl, jobvr, n, A, lda, w, VL, ldvl, VR, ldvr, work, lwork, rwork, info)
    ccall((:magma_zgeev_m, libmagma), magma_int_t, (magma_vec_t, magma_vec_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}), jobvl, jobvr, n, A, lda, w, VL, ldvl, VR, ldvr, work, lwork, rwork, info)
end

"""
    magma_zgegqr_gpu(ikind, m, n, dA, ldda, dwork, work, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgegqr_gpu( magma_int_t ikind, magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dwork, magmaDoubleComplex *work, magma_int_t *info);
```
"""
function magma_zgegqr_gpu(ikind, m, n, dA, ldda, dwork, work, info)
    ccall((:magma_zgegqr_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, Ptr{magmaDoubleComplex}, Ptr{magma_int_t}), ikind, m, n, dA, ldda, dwork, work, info)
end

"""
    magma_zgehrd(n, ilo, ihi, A, lda, tau, work, lwork, dT, info)


### Prototype
```c
magma_int_t magma_zgehrd( magma_int_t n, magma_int_t ilo, magma_int_t ihi, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magmaDoubleComplex_ptr dT, magma_int_t *info);
```
"""
function magma_zgehrd(n, ilo, ihi, A, lda, tau, work, lwork, dT, info)
    ccall((:magma_zgehrd, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, work, lwork, dT, info)
end

"""
    magma_zgehrd_m(n, ilo, ihi, A, lda, tau, work, lwork, T, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgehrd_m( magma_int_t n, magma_int_t ilo, magma_int_t ihi, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magmaDoubleComplex *T, magma_int_t *info);
```
"""
function magma_zgehrd_m(n, ilo, ihi, A, lda, tau, work, lwork, T, info)
    ccall((:magma_zgehrd_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, work, lwork, T, info)
end

"""
    magma_zgehrd2(n, ilo, ihi, A, lda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgehrd2( magma_int_t n, magma_int_t ilo, magma_int_t ihi, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgehrd2(n, ilo, ihi, A, lda, tau, work, lwork, info)
    ccall((:magma_zgehrd2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, work, lwork, info)
end

"""
    magma_zgelqf(m, n, A, lda, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_zgelqf( magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgelqf(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_zgelqf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_zgelqf_gpu(m, n, dA, ldda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgelqf_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgelqf_gpu(m, n, dA, ldda, tau, work, lwork, info)
    ccall((:magma_zgelqf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, n, dA, ldda, tau, work, lwork, info)
end

"""
    magma_zgels(trans, m, n, nrhs, A, lda, B, ldb, hwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgels( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr A, magma_int_t lda, magmaDoubleComplex_ptr B, magma_int_t ldb, magmaDoubleComplex *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgels(trans, m, n, nrhs, A, lda, B, ldb, hwork, lwork, info)
    ccall((:magma_zgels, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), trans, m, n, nrhs, A, lda, B, ldb, hwork, lwork, info)
end

"""
    magma_zggrqf(m, p, n, A, lda, taua, B, ldb, taub, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zggrqf( magma_int_t m, magma_int_t p, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *taua, magmaDoubleComplex *B, magma_int_t ldb, magmaDoubleComplex *taub, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zggrqf(m, p, n, A, lda, taua, B, ldb, taub, work, lwork, info)
    ccall((:magma_zggrqf, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, p, n, A, lda, taua, B, ldb, taub, work, lwork, info)
end

"""
    magma_zgglse(m, n, p, A, lda, B, ldb, c, d, x, work, lwork, info)


### Prototype
```c
magma_int_t magma_zgglse( magma_int_t m, magma_int_t n, magma_int_t p, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, magmaDoubleComplex *c, magmaDoubleComplex *d, magmaDoubleComplex *x, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgglse(m, n, p, A, lda, B, ldb, c, d, x, work, lwork, info)
    ccall((:magma_zgglse, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, n, p, A, lda, B, ldb, c, d, x, work, lwork, info)
end

"""
    magma_zgels_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)


### Prototype
```c
magma_int_t magma_zgels_gpu( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgels_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
    ccall((:magma_zgels_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, PtrOrCuPtr{magmaDoubleComplex}, magma_int_t, PtrOrCuPtr{magma_int_t}), trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
end

"""
    magma_zgels3_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgels3_gpu( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgels3_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
    ccall((:magma_zgels3_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
end

"""
    magma_zgeqlf(m, n, A, lda, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_zgeqlf( magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgeqlf(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_zgeqlf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_zgeqp3(m, n, A, lda, jpvt, tau, work, lwork, rwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgeqp3( magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *jpvt, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_zgeqp3(m, n, A, lda, jpvt, tau, work, lwork, rwork, info)
    ccall((:magma_zgeqp3, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}), m, n, A, lda, jpvt, tau, work, lwork, rwork, info)
end

"""
    magma_zgeqp3_gpu(m, n, dA, ldda, jpvt, tau, dwork, lwork, rwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgeqp3_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *jpvt, magmaDoubleComplex *tau, magmaDoubleComplex_ptr dwork, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_zgeqp3_gpu(m, n, dA, ldda, jpvt, tau, dwork, lwork, rwork, info)
    ccall((:magma_zgeqp3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}), m, n, dA, ldda, jpvt, tau, dwork, lwork, rwork, info)
end

"""
    magma_zgeqr2_gpu(m, n, dA, ldda, dtau, dwork, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgeqr2_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dtau, magmaDouble_ptr dwork, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_zgeqr2_gpu(m, n, dA, ldda, dtau, dwork, queue, info)
    ccall((:magma_zgeqr2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magmaDouble_ptr, magma_queue_t, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dwork, queue, info)
end

"""
    magma_zgeqr2x_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgeqr2x_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dtau, magmaDoubleComplex_ptr dT, magmaDoubleComplex_ptr ddA, magmaDouble_ptr dwork, magma_int_t *info);
```
"""
function magma_zgeqr2x_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)
    ccall((:magma_zgeqr2x_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDouble_ptr, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, info)
end

"""
    magma_zgeqr2x2_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgeqr2x2_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dtau, magmaDoubleComplex_ptr dT, magmaDoubleComplex_ptr ddA, magmaDouble_ptr dwork, magma_int_t *info);
```
"""
function magma_zgeqr2x2_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)
    ccall((:magma_zgeqr2x2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDouble_ptr, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, info)
end

"""
    magma_zgeqr2x3_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)


### Prototype
```c
magma_int_t magma_zgeqr2x3_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dtau, magmaDoubleComplex_ptr dT, magmaDoubleComplex_ptr ddA, magmaDouble_ptr dwork, magma_int_t *info);
```
"""
function magma_zgeqr2x3_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)
    ccall((:magma_zgeqr2x3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDouble_ptr, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, info)
end

"""
    magma_zgeqr2x4_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgeqr2x4_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dtau, magmaDoubleComplex_ptr dT, magmaDoubleComplex_ptr ddA, magmaDouble_ptr dwork, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_zgeqr2x4_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, queue, info)
    ccall((:magma_zgeqr2x4_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magmaDouble_ptr, magma_queue_t, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, queue, info)
end

"""
    magma_zgeqrf(m, n, A, lda, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_zgeqrf( magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgeqrf(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_zgeqrf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_zgeqrf_gpu(m, n, dA, ldda, tau, dT, info)


### Prototype
```c
magma_int_t magma_zgeqrf_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex *tau, magmaDoubleComplex_ptr dT, magma_int_t *info);
```
"""
function magma_zgeqrf_gpu(m, n, dA, ldda, tau, dT, info)
    ccall((:magma_zgeqrf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, PtrOrCuPtr{magmaDoubleComplex}, magmaDoubleComplex_ptr, PtrOrCuPtr{magma_int_t}), m, n, dA, ldda, tau, dT, info)
end

"""
    magma_zgeqrf_m(ngpu, m, n, A, lda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgeqrf_m( magma_int_t ngpu, magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgeqrf_m(ngpu, m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_zgeqrf_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_zgeqrf_ooc(m, n, A, lda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgeqrf_ooc( magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgeqrf_ooc(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_zgeqrf_ooc, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_zgeqrf2_gpu(m, n, dA, ldda, tau, info)


### Prototype
```c
magma_int_t magma_zgeqrf2_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex *tau, magma_int_t *info);
```
"""
function magma_zgeqrf2_gpu(m, n, dA, ldda, tau, info)
    ccall((:magma_zgeqrf2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magma_int_t}), m, n, dA, ldda, tau, info)
end

"""
    magma_zgeqrf2_mgpu(ngpu, m, n, d_lA, ldda, tau, info)


### Prototype
```c
magma_int_t magma_zgeqrf2_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr d_lA[], magma_int_t ldda, magmaDoubleComplex *tau, magma_int_t *info);
```
"""
function magma_zgeqrf2_mgpu(ngpu, m, n, d_lA, ldda, tau, info)
    ccall((:magma_zgeqrf2_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magma_int_t}), ngpu, m, n, d_lA, ldda, tau, info)
end

"""
    magma_zgeqrf3_gpu(m, n, dA, ldda, tau, dT, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgeqrf3_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex *tau, magmaDoubleComplex_ptr dT, magma_int_t *info);
```
"""
function magma_zgeqrf3_gpu(m, n, dA, ldda, tau, dT, info)
    ccall((:magma_zgeqrf3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, Ptr{magma_int_t}), m, n, dA, ldda, tau, dT, info)
end

"""
    magma_zgeqrs_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)


### Prototype
```c
magma_int_t magma_zgeqrs_gpu( magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex const *tau, magmaDoubleComplex_ptr dT, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgeqrs_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
    ccall((:magma_zgeqrs_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
end

"""
    magma_zgeqrs3_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgeqrs3_gpu( magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex const *tau, magmaDoubleComplex_ptr dT, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgeqrs3_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
    ccall((:magma_zgeqrs3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
end

"""
    magma_zgerbt_gpu(gen, n, nrhs, dA, ldda, dB, lddb, U, V, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgerbt_gpu( magma_bool_t gen, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex *U, magmaDoubleComplex *V, magma_int_t *info);
```
"""
function magma_zgerbt_gpu(gen, n, nrhs, dA, ldda, dB, lddb, U, V, info)
    ccall((:magma_zgerbt_gpu, libmagma), magma_int_t, (magma_bool_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, Ptr{magma_int_t}), gen, n, nrhs, dA, ldda, dB, lddb, U, V, info)
end

"""
    magma_zgerfs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dAF, iter, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgerfs_nopiv_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex_ptr dX, magma_int_t lddx, magmaDoubleComplex_ptr dworkd, magmaDoubleComplex_ptr dAF, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_zgerfs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dAF, iter, info)
    ccall((:magma_zgerfs_nopiv_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, Ptr{magma_int_t}, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dAF, iter, info)
end

"""
    magma_zgesdd(jobz, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, rwork, iwork, info)


### Prototype
```c
magma_int_t magma_zgesdd( magma_vec_t jobz, magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double *s, magmaDoubleComplex *U, magma_int_t ldu, magmaDoubleComplex *VT, magma_int_t ldvt, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *iwork, magma_int_t *info);
```
"""
function magma_zgesdd(jobz, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, rwork, iwork, info)
    ccall((:magma_zgesdd, libmagma), magma_int_t, (magma_vec_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}, Ptr{magma_int_t}), jobz, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, rwork, iwork, info)
end

"""
    magma_zgesv(n, nrhs, A, lda, ipiv, B, ldb, info)


### Prototype
```c
magma_int_t magma_zgesv( magma_int_t n, magma_int_t nrhs, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *ipiv, magmaDoubleComplex *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_zgesv(n, nrhs, A, lda, ipiv, B, ldb, info)
    ccall((:magma_zgesv, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), n, nrhs, A, lda, ipiv, B, ldb, info)
end

"""
    magma_zgesv_gpu(n, nrhs, dA, ldda, ipiv, dB, lddb, info)


### Prototype
```c
magma_int_t magma_zgesv_gpu( magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_zgesv_gpu(n, nrhs, dA, ldda, ipiv, dB, lddb, info)
    ccall((:magma_zgesv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, magmaDoubleComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), n, nrhs, dA, ldda, ipiv, dB, lddb, info)
end

"""
    magma_zgesv_nopiv_gpu(n, nrhs, dA, ldda, dB, lddb, info)


### Prototype
```c
magma_int_t magma_zgesv_nopiv_gpu( magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_zgesv_nopiv_gpu(n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_zgesv_nopiv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_zgesv_rbt(ref, n, nrhs, A, lda, B, ldb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgesv_rbt( magma_bool_t ref, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_zgesv_rbt(ref, n, nrhs, A, lda, B, ldb, info)
    ccall((:magma_zgesv_rbt, libmagma), magma_int_t, (magma_bool_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), ref, n, nrhs, A, lda, B, ldb, info)
end

"""
    magma_zgesvd(jobu, jobvt, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, rwork, info)


### Prototype
```c
magma_int_t magma_zgesvd( magma_vec_t jobu, magma_vec_t jobvt, magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double *s, magmaDoubleComplex *U, magma_int_t ldu, magmaDoubleComplex *VT, magma_int_t ldvt, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_zgesvd(jobu, jobvt, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, rwork, info)
    ccall((:magma_zgesvd, libmagma), magma_int_t, (magma_vec_t, magma_vec_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}), jobu, jobvt, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, rwork, info)
end

"""
    magma_zgetf2_gpu(m, n, dA, ldda, ipiv, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgetf2_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_zgetf2_gpu(m, n, dA, ldda, ipiv, queue, info)
    ccall((:magma_zgetf2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, magma_queue_t, Ptr{magma_int_t}), m, n, dA, ldda, ipiv, queue, info)
end

"""
    magma_zgetf2_native_fused(m, n, dA, ldda, ipiv, gbstep, flags, info, queue)


### Prototype
```c
magma_int_t magma_zgetf2_native_fused( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t gbstep, magma_int_t *flags, magma_int_t *info, magma_queue_t queue );
```
"""
function magma_zgetf2_native_fused(m, n, dA, ldda, ipiv, gbstep, flags, info, queue)
    ccall((:magma_zgetf2_native_fused, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), m, n, dA, ldda, ipiv, gbstep, flags, info, queue)
end

"""
    magma_zgetf2_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)


### Prototype
```c
magma_int_t magma_zgetf2_native( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *dipiv, magma_int_t* dipivinfo, magma_int_t *dinfo, magma_int_t gbstep, magma_queue_t queue, magma_queue_t update_queue);
```
"""
function magma_zgetf2_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
    ccall((:magma_zgetf2_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t, magma_queue_t), m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
end

"""
    magma_zgetf2_nopiv(m, n, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgetf2_nopiv( magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_zgetf2_nopiv(m, n, A, lda, info)
    ccall((:magma_zgetf2_nopiv, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, info)
end

"""
    magma_zgetrf_recpanel_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)


### Prototype
```c
magma_int_t magma_zgetrf_recpanel_native( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t* dipiv, magma_int_t* dipivinfo, magma_int_t *dinfo, magma_int_t gbstep, magma_queue_t queue, magma_queue_t update_queue );
```
"""
function magma_zgetrf_recpanel_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
    ccall((:magma_zgetrf_recpanel_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t, magma_queue_t), m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
end

"""
    magma_zgetrf(m, n, A, lda, ipiv, info)


### Prototype
```c
magma_int_t magma_zgetrf( magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_zgetrf(m, n, A, lda, ipiv, info)
    ccall((:magma_zgetrf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, A, lda, ipiv, info)
end

"""
    magma_zgetrf_gpu(m, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_zgetrf_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_zgetrf_gpu(m, n, dA, ldda, ipiv, info)
    ccall((:magma_zgetrf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, PtrOrCuPtr{magma_int_t}), m, n, dA, ldda, ipiv, info)
end

"""
    magma_zgetrf_gpu_expert(m, n, dA, ldda, ipiv, info, nb, mode)


### Prototype
```c
magma_int_t magma_zgetrf_gpu_expert( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info, magma_int_t nb, magma_mode_t mode);
```
"""
function magma_zgetrf_gpu_expert(m, n, dA, ldda, ipiv, info, nb, mode)
    ccall((:magma_zgetrf_gpu_expert, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_mode_t), m, n, dA, ldda, ipiv, info, nb, mode)
end

"""
    magma_zgetrf_native(m, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_zgetrf_native( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info );
```
"""
function magma_zgetrf_native(m, n, dA, ldda, ipiv, info)
    ccall((:magma_zgetrf_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, dA, ldda, ipiv, info)
end

"""
    magma_zgetrf_m(ngpu, m, n, A, lda, ipiv, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgetrf_m( magma_int_t ngpu, magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_zgetrf_m(ngpu, m, n, A, lda, ipiv, info)
    ccall((:magma_zgetrf_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), ngpu, m, n, A, lda, ipiv, info)
end

"""
    magma_zgetrf_mgpu(ngpu, m, n, d_lA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_zgetrf_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr d_lA[], magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_zgetrf_mgpu(ngpu, m, n, d_lA, ldda, ipiv, info)
    ccall((:magma_zgetrf_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), ngpu, m, n, d_lA, ldda, ipiv, info)
end

"""
    magma_zgetrf2(m, n, A, lda, ipiv, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgetrf2( magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_zgetrf2(m, n, A, lda, ipiv, info)
    ccall((:magma_zgetrf2, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, A, lda, ipiv, info)
end

"""
    magma_zgetrf2_mgpu(ngpu, m, n, nb, offset, d_lAT, lddat, ipiv, d_lAP, W, ldw, queues, info)


### Prototype
```c
magma_int_t magma_zgetrf2_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t offset, magmaDoubleComplex_ptr d_lAT[], magma_int_t lddat, magma_int_t *ipiv, magmaDoubleComplex_ptr d_lAP[], magmaDoubleComplex *W, magma_int_t ldw, magma_queue_t queues[][2], magma_int_t *info);
```
"""
function magma_zgetrf2_mgpu(ngpu, m, n, nb, offset, d_lAT, lddat, ipiv, d_lAP, W, ldw, queues, info)
    ccall((:magma_zgetrf2_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex_ptr}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{NTuple{2, magma_queue_t}}, Ptr{magma_int_t}), ngpu, m, n, nb, offset, d_lAT, lddat, ipiv, d_lAP, W, ldw, queues, info)
end

"""
    magma_zgetrf_nopiv(m, n, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgetrf_nopiv( magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_zgetrf_nopiv(m, n, A, lda, info)
    ccall((:magma_zgetrf_nopiv, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, info)
end

"""
    magma_zgetrf_nopiv_gpu(m, n, dA, ldda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgetrf_nopiv_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_zgetrf_nopiv_gpu(m, n, dA, ldda, info)
    ccall((:magma_zgetrf_nopiv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), m, n, dA, ldda, info)
end

"""
    magma_zgetri_gpu(n, dA, ldda, ipiv, dwork, lwork, info)


### Prototype
```c
magma_int_t magma_zgetri_gpu( magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaDoubleComplex_ptr dwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zgetri_gpu(n, dA, ldda, ipiv, dwork, lwork, info)
    ccall((:magma_zgetri_gpu, libmagma), magma_int_t, (magma_int_t, magmaDoubleComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, magmaDoubleComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), n, dA, ldda, ipiv, dwork, lwork, info)
end

"""
    magma_zgetrs_gpu(trans, n, nrhs, dA, ldda, ipiv, dB, lddb, info)


### Prototype
```c
magma_int_t magma_zgetrs_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_zgetrs_gpu(trans, n, nrhs, dA, ldda, ipiv, dB, lddb, info)
    ccall((:magma_zgetrs_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, magmaDoubleComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), trans, n, nrhs, dA, ldda, ipiv, dB, lddb, info)
end

"""
    magma_zgetrs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zgetrs_nopiv_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_zgetrs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_zgetrs_nopiv_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_zheevd(jobz, uplo, n, A, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)

------------------------------------------------------------ zhe routines
### Prototype
```c
magma_int_t magma_zheevd( magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double *w, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zheevd(jobz, uplo, n, A, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zheevd, libmagma), magma_int_t, (magma_vec_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, uplo, n, A, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zheevd_gpu(jobz, uplo, n, dA, ldda, w, wA, ldwa, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zheevd_gpu( magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, double *w, magmaDoubleComplex *wA, magma_int_t ldwa, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zheevd_gpu(jobz, uplo, n, dA, ldda, w, wA, ldwa, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zheevd_gpu, libmagma), magma_int_t, (magma_vec_t, magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, uplo, n, dA, ldda, w, wA, ldwa, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zheevd_m(ngpu, jobz, uplo, n, A, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zheevd_m( magma_int_t ngpu, magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double *w, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zheevd_m(ngpu, jobz, uplo, n, A, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zheevd_m, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, jobz, uplo, n, A, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zheevdx(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zheevdx( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zheevdx(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zheevdx, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zheevdx_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, mout, w, wA, ldwa, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zheevdx_gpu( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, magmaDoubleComplex *wA, magma_int_t ldwa, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zheevdx_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, mout, w, wA, ldwa, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zheevdx_gpu, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, mout, w, wA, ldwa, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zheevdx_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zheevdx_m( magma_int_t ngpu, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zheevdx_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zheevdx_m, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zheevdx_2stage(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zheevdx_2stage( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zheevdx_2stage(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zheevdx_2stage, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zheevdx_2stage_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zheevdx_2stage_m( magma_int_t ngpu, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zheevdx_2stage_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zheevdx_2stage_m, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zheevr(jobz, range, uplo, n, A, lda, vl, vu, il, iu, abstol, mout, w, Z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)

no real [sd] precisions available
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zheevr( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double vl, double vu, magma_int_t il, magma_int_t iu, double abstol, magma_int_t *mout, double *w, magmaDoubleComplex *Z, magma_int_t ldz, magma_int_t *isuppz, magmaDoubleComplex *work, magma_int_t lwork, double *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zheevr(jobz, range, uplo, n, A, lda, vl, vu, il, iu, abstol, mout, w, Z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zheevr, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Cdouble, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, A, lda, vl, vu, il, iu, abstol, mout, w, Z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zheevr_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, abstol, mout, w, dZ, lddz, isuppz, wA, ldwa, wZ, ldwz, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zheevr_gpu( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, double vl, double vu, magma_int_t il, magma_int_t iu, double abstol, magma_int_t *mout, double *w, magmaDoubleComplex_ptr dZ, magma_int_t lddz, magma_int_t *isuppz, magmaDoubleComplex *wA, magma_int_t ldwa, magmaDoubleComplex *wZ, magma_int_t ldwz, magmaDoubleComplex *work, magma_int_t lwork, double *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zheevr_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, abstol, mout, w, dZ, lddz, isuppz, wA, ldwa, wZ, ldwz, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zheevr_gpu, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Cdouble, Ptr{magma_int_t}, Ptr{Cdouble}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, abstol, mout, w, dZ, lddz, isuppz, wA, ldwa, wZ, ldwz, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zheevx(jobz, range, uplo, n, A, lda, vl, vu, il, iu, abstol, mout, w, Z, ldz, work, lwork, rwork, iwork, ifail, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zheevx( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double vl, double vu, magma_int_t il, magma_int_t iu, double abstol, magma_int_t *mout, double *w, magmaDoubleComplex *Z, magma_int_t ldz, magmaDoubleComplex *work, magma_int_t lwork, double *rwork, magma_int_t *iwork, magma_int_t *ifail, magma_int_t *info);
```
"""
function magma_zheevx(jobz, range, uplo, n, A, lda, vl, vu, il, iu, abstol, mout, w, Z, ldz, work, lwork, rwork, iwork, ifail, info)
    ccall((:magma_zheevx, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Cdouble, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), jobz, range, uplo, n, A, lda, vl, vu, il, iu, abstol, mout, w, Z, ldz, work, lwork, rwork, iwork, ifail, info)
end

"""
    magma_zheevx_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, abstol, mout, w, dZ, lddz, wA, ldwa, wZ, ldwz, work, lwork, rwork, iwork, ifail, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zheevx_gpu( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, double vl, double vu, magma_int_t il, magma_int_t iu, double abstol, magma_int_t *mout, double *w, magmaDoubleComplex_ptr dZ, magma_int_t lddz, magmaDoubleComplex *wA, magma_int_t ldwa, magmaDoubleComplex *wZ, magma_int_t ldwz, magmaDoubleComplex *work, magma_int_t lwork, double *rwork, magma_int_t *iwork, magma_int_t *ifail, magma_int_t *info);
```
"""
function magma_zheevx_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, abstol, mout, w, dZ, lddz, wA, ldwa, wZ, ldwz, work, lwork, rwork, iwork, ifail, info)
    ccall((:magma_zheevx_gpu, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Cdouble, Ptr{magma_int_t}, Ptr{Cdouble}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, abstol, mout, w, dZ, lddz, wA, ldwa, wZ, ldwz, work, lwork, rwork, iwork, ifail, info)
end

"""
    magma_zhegst(itype, uplo, n, A, lda, B, ldb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhegst( magma_int_t itype, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_zhegst(itype, uplo, n, A, lda, B, ldb, info)
    ccall((:magma_zhegst, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), itype, uplo, n, A, lda, B, ldb, info)
end

"""
    magma_zhegst_gpu(itype, uplo, n, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhegst_gpu( magma_int_t itype, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_const_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_zhegst_gpu(itype, uplo, n, dA, ldda, dB, lddb, info)
    ccall((:magma_zhegst_gpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{magma_int_t}), itype, uplo, n, dA, ldda, dB, lddb, info)
end

"""
    magma_zhegst_m(ngpu, itype, uplo, n, A, lda, B, ldb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhegst_m( magma_int_t ngpu, magma_int_t itype, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_zhegst_m(ngpu, itype, uplo, n, A, lda, B, ldb, info)
    ccall((:magma_zhegst_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, uplo, n, A, lda, B, ldb, info)
end

"""
    magma_zhegvd(itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhegvd( magma_int_t itype, magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, double *w, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zhegvd(itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zhegvd, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zhegvd_m(ngpu, itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhegvd_m( magma_int_t ngpu, magma_int_t itype, magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, double *w, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zhegvd_m(ngpu, itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zhegvd_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_vec_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zhegvdx(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhegvdx( magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zhegvdx(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zhegvdx, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zhegvdx_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhegvdx_m( magma_int_t ngpu, magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zhegvdx_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zhegvdx_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zhegvdx_2stage(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhegvdx_2stage( magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zhegvdx_2stage(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zhegvdx_2stage, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zhegvdx_2stage_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhegvdx_2stage_m( magma_int_t ngpu, magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zhegvdx_2stage_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zhegvdx_2stage_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zhegvr(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, abstol, mout, w, Z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)

no real [sd] precisions available
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhegvr( magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, double vl, double vu, magma_int_t il, magma_int_t iu, double abstol, magma_int_t *mout, double *w, magmaDoubleComplex *Z, magma_int_t ldz, magma_int_t *isuppz, magmaDoubleComplex *work, magma_int_t lwork, double *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zhegvr(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, abstol, mout, w, Z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zhegvr, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Cdouble, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, abstol, mout, w, Z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_zhegvx(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, abstol, mout, w, Z, ldz, work, lwork, rwork, iwork, ifail, info)

no real [sd] precisions available
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhegvx( magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, double vl, double vu, magma_int_t il, magma_int_t iu, double abstol, magma_int_t *mout, double *w, magmaDoubleComplex *Z, magma_int_t ldz, magmaDoubleComplex *work, magma_int_t lwork, double *rwork, magma_int_t *iwork, magma_int_t *ifail, magma_int_t *info);
```
"""
function magma_zhegvx(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, abstol, mout, w, Z, ldz, work, lwork, rwork, iwork, ifail, info)
    ccall((:magma_zhegvx, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Cdouble, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, abstol, mout, w, Z, ldz, work, lwork, rwork, iwork, ifail, info)
end

"""
    magma_zhesv(uplo, n, nrhs, A, lda, ipiv, B, ldb, info)


### Prototype
```c
magma_int_t magma_zhesv( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *ipiv, magmaDoubleComplex *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_zhesv(uplo, n, nrhs, A, lda, ipiv, B, ldb, info)
    ccall((:magma_zhesv, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, A, lda, ipiv, B, ldb, info)
end

"""
    magma_zhesv_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhesv_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_zhesv_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_zhesv_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_zhetrd(uplo, n, A, lda, d, e, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_zhetrd( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double *d, double *e, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zhetrd(uplo, n, A, lda, d, e, tau, work, lwork, info)
    ccall((:magma_zhetrd, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, d, e, tau, work, lwork, info)
end

"""
    magma_zhetrd_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhetrd_gpu( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, double *d, double *e, magmaDoubleComplex *tau, magmaDoubleComplex *wA, magma_int_t ldwa, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zhetrd_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, info)
    ccall((:magma_zhetrd_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, info)
end

"""
    magma_zhetrd2_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, dwork, ldwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhetrd2_gpu( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, double *d, double *e, magmaDoubleComplex *tau, magmaDoubleComplex *wA, magma_int_t ldwa, magmaDoubleComplex *work, magma_int_t lwork, magmaDoubleComplex_ptr dwork, magma_int_t ldwork, magma_int_t *info);
```
"""
function magma_zhetrd2_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, dwork, ldwork, info)
    ccall((:magma_zhetrd2_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, dwork, ldwork, info)
end

"""
    magma_zhetrd_mgpu(ngpu, nqueue, uplo, n, A, lda, d, e, tau, work, lwork, info)

TODO: rename magma_zhetrd_m?
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhetrd_mgpu( magma_int_t ngpu, magma_int_t nqueue, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, double *d, double *e, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zhetrd_mgpu(ngpu, nqueue, uplo, n, A, lda, d, e, tau, work, lwork, info)
    ccall((:magma_zhetrd_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, nqueue, uplo, n, A, lda, d, e, tau, work, lwork, info)
end

"""
    magma_zhetrd_hb2st(uplo, n, nb, Vblksiz, A, lda, d, e, V, ldv, TAU, compT, T, ldt)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhetrd_hb2st( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magmaDoubleComplex *A, magma_int_t lda, double *d, double *e, magmaDoubleComplex *V, magma_int_t ldv, magmaDoubleComplex *TAU, magma_int_t compT, magmaDoubleComplex *T, magma_int_t ldt);
```
"""
function magma_zhetrd_hb2st(uplo, n, nb, Vblksiz, A, lda, d, e, V, ldv, TAU, compT, T, ldt)
    ccall((:magma_zhetrd_hb2st, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t), uplo, n, nb, Vblksiz, A, lda, d, e, V, ldv, TAU, compT, T, ldt)
end

"""
    magma_zhetrd_he2hb(uplo, n, nb, A, lda, tau, work, lwork, dT, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhetrd_he2hb( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magmaDoubleComplex_ptr dT, magma_int_t *info);
```
"""
function magma_zhetrd_he2hb(uplo, n, nb, A, lda, tau, work, lwork, dT, info)
    ccall((:magma_zhetrd_he2hb, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, Ptr{magma_int_t}), uplo, n, nb, A, lda, tau, work, lwork, dT, info)
end

"""
    magma_zhetrd_he2hb_mgpu(uplo, n, nb, A, lda, tau, work, lwork, dAmgpu, ldda, dTmgpu, lddt, ngpu, distblk, queues, nqueue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhetrd_he2hb_mgpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magmaDoubleComplex_ptr dAmgpu[], magma_int_t ldda, magmaDoubleComplex_ptr dTmgpu[], magma_int_t lddt, magma_int_t ngpu, magma_int_t distblk, magma_queue_t queues[][20], magma_int_t nqueue, magma_int_t *info);
```
"""
function magma_zhetrd_he2hb_mgpu(uplo, n, nb, A, lda, tau, work, lwork, dAmgpu, ldda, dTmgpu, lddt, ngpu, distblk, queues, nqueue, info)
    ccall((:magma_zhetrd_he2hb_mgpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{20, magma_queue_t}}, magma_int_t, Ptr{magma_int_t}), uplo, n, nb, A, lda, tau, work, lwork, dAmgpu, ldda, dTmgpu, lddt, ngpu, distblk, queues, nqueue, info)
end

"""
    magma_zhetrf(uplo, n, A, lda, ipiv, info)


### Prototype
```c
magma_int_t magma_zhetrf( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_zhetrf(uplo, n, A, lda, ipiv, info)
    ccall((:magma_zhetrf, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, A, lda, ipiv, info)
end

"""
    magma_zhetrf_gpu(uplo, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_zhetrf_gpu( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_zhetrf_gpu(uplo, n, dA, ldda, ipiv, info)
    ccall((:magma_zhetrf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, dA, ldda, ipiv, info)
end

"""
    magma_zhetrf_aasen(uplo, cpu_panel, n, A, lda, ipiv, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhetrf_aasen( magma_uplo_t uplo, magma_int_t cpu_panel, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_zhetrf_aasen(uplo, cpu_panel, n, A, lda, ipiv, info)
    ccall((:magma_zhetrf_aasen, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, cpu_panel, n, A, lda, ipiv, info)
end

"""
    magma_zhetrf_nopiv(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_zhetrf_nopiv( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_zhetrf_nopiv(uplo, n, A, lda, info)
    ccall((:magma_zhetrf_nopiv, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_zhetrf_nopiv_cpu(uplo, n, ib, A, lda, info)


### Prototype
```c
magma_int_t magma_zhetrf_nopiv_cpu( magma_uplo_t uplo, magma_int_t n, magma_int_t ib, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_zhetrf_nopiv_cpu(uplo, n, ib, A, lda, info)
    ccall((:magma_zhetrf_nopiv_cpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, ib, A, lda, info)
end

"""
    magma_zhetrf_nopiv_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_zhetrf_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_zhetrf_nopiv_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_zhetrf_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_zhetrs_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zhetrs_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_zhetrs_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_zhetrs_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_zlabrd_gpu(m, n, nb, A, lda, dA, ldda, d, e, tauq, taup, X, ldx, dX, lddx, Y, ldy, dY, lddy, work, lwork, queue)


### Prototype
```c
magma_int_t magma_zlabrd_gpu( magma_int_t m, magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex_ptr dA, magma_int_t ldda, double *d, double *e, magmaDoubleComplex *tauq, magmaDoubleComplex *taup, magmaDoubleComplex *X, magma_int_t ldx, magmaDoubleComplex_ptr dX, magma_int_t lddx, magmaDoubleComplex *Y, magma_int_t ldy, magmaDoubleComplex_ptr dY, magma_int_t lddy, magmaDoubleComplex *work, magma_int_t lwork, magma_queue_t queue);
```
"""
function magma_zlabrd_gpu(m, n, nb, A, lda, dA, ldda, d, e, tauq, taup, X, ldx, dX, lddx, Y, ldy, dY, lddy, work, lwork, queue)
    ccall((:magma_zlabrd_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_queue_t), m, n, nb, A, lda, dA, ldda, d, e, tauq, taup, X, ldx, dX, lddx, Y, ldy, dY, lddy, work, lwork, queue)
end

"""
    magma_zlahef_gpu(uplo, n, nb, kb, dA, ldda, ipiv, dW, lddw, queues, info)


### Prototype
```c
magma_int_t magma_zlahef_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t *kb, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaDoubleComplex_ptr dW, magma_int_t lddw, magma_queue_t queues[], magma_int_t *info);
```
"""
function magma_zlahef_gpu(uplo, n, nb, kb, dA, ldda, ipiv, dW, lddw, queues, info)
    ccall((:magma_zlahef_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_queue_t}, Ptr{magma_int_t}), uplo, n, nb, kb, dA, ldda, ipiv, dW, lddw, queues, info)
end

"""
    magma_zlahr2(n, k, nb, dA, ldda, dV, lddv, A, lda, tau, T, ldt, Y, ldy, queue)


### Prototype
```c
magma_int_t magma_zlahr2( magma_int_t n, magma_int_t k, magma_int_t nb, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dV, magma_int_t lddv, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *T, magma_int_t ldt, magmaDoubleComplex *Y, magma_int_t ldy, magma_queue_t queue);
```
"""
function magma_zlahr2(n, k, nb, dA, ldda, dV, lddv, A, lda, tau, T, ldt, Y, ldy, queue)
    ccall((:magma_zlahr2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_queue_t), n, k, nb, dA, ldda, dV, lddv, A, lda, tau, T, ldt, Y, ldy, queue)
end

"""
    magma_zlahr2_m(n, k, nb, A, lda, tau, T, ldt, Y, ldy, data)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zlahr2_m( magma_int_t n, magma_int_t k, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *T, magma_int_t ldt, magmaDoubleComplex *Y, magma_int_t ldy, struct zgehrd_data *data);
```
"""
function magma_zlahr2_m(n, k, nb, A, lda, tau, T, ldt, Y, ldy, data)
    ccall((:magma_zlahr2_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{zgehrd_data}), n, k, nb, A, lda, tau, T, ldt, Y, ldy, data)
end

"""
    magma_zlahru(n, ihi, k, nb, A, lda, dA, ldda, dY, lddy, dV, lddv, dT, dwork, queue)


### Prototype
```c
magma_int_t magma_zlahru( magma_int_t n, magma_int_t ihi, magma_int_t k, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dY, magma_int_t lddy, magmaDoubleComplex_ptr dV, magma_int_t lddv, magmaDoubleComplex_ptr dT, magmaDoubleComplex_ptr dwork, magma_queue_t queue);
```
"""
function magma_zlahru(n, ihi, k, nb, A, lda, dA, ldda, dY, lddy, dV, lddv, dT, dwork, queue)
    ccall((:magma_zlahru, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magma_queue_t), n, ihi, k, nb, A, lda, dA, ldda, dY, lddy, dV, lddv, dT, dwork, queue)
end

"""
    magma_zlahru_m(n, ihi, k, nb, A, lda, data)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zlahru_m( magma_int_t n, magma_int_t ihi, magma_int_t k, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, struct zgehrd_data *data);
```
"""
function magma_zlahru_m(n, ihi, k, nb, A, lda, data)
    ccall((:magma_zlahru_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{zgehrd_data}), n, ihi, k, nb, A, lda, data)
end

"""
    magma_zlaqps(m, n, offset, nb, kb, A, lda, dA, ldda, jpvt, tau, vn1, vn2, auxv, F, ldf, dF, lddf)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zlaqps( magma_int_t m, magma_int_t n, magma_int_t offset, magma_int_t nb, magma_int_t *kb, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *jpvt, magmaDoubleComplex *tau, double *vn1, double *vn2, magmaDoubleComplex *auxv, magmaDoubleComplex *F, magma_int_t ldf, magmaDoubleComplex_ptr dF, magma_int_t lddf);
```
"""
function magma_zlaqps(m, n, offset, nb, kb, A, lda, dA, ldda, jpvt, tau, vn1, vn2, auxv, F, ldf, dF, lddf)
    ccall((:magma_zlaqps, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t), m, n, offset, nb, kb, A, lda, dA, ldda, jpvt, tau, vn1, vn2, auxv, F, ldf, dF, lddf)
end

"""
    magma_zlaqps_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, tau, vn1, vn2, dauxv, dF, lddf)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zlaqps_gpu( magma_int_t m, magma_int_t n, magma_int_t offset, magma_int_t nb, magma_int_t *kb, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *jpvt, magmaDoubleComplex *tau, double *vn1, double *vn2, magmaDoubleComplex_ptr dauxv, magmaDoubleComplex_ptr dF, magma_int_t lddf);
```
"""
function magma_zlaqps_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, tau, vn1, vn2, dauxv, dF, lddf)
    ccall((:magma_zlaqps_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, Ptr{Cdouble}, Ptr{Cdouble}, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magma_int_t), m, n, offset, nb, kb, dA, ldda, jpvt, tau, vn1, vn2, dauxv, dF, lddf)
end

"""
    magma_zlaqps2_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, dtau, dvn1, dvn2, dauxv, dF, lddf, dlsticcs, queue)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zlaqps2_gpu( magma_int_t m, magma_int_t n, magma_int_t offset, magma_int_t nb, magma_int_t *kb, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *jpvt, magmaDoubleComplex_ptr dtau, magmaDouble_ptr dvn1, magmaDouble_ptr dvn2, magmaDoubleComplex_ptr dauxv, magmaDoubleComplex_ptr dF, magma_int_t lddf, magmaDouble_ptr dlsticcs, magma_queue_t queue);
```
"""
function magma_zlaqps2_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, dtau, dvn1, dvn2, dauxv, dF, lddf, dlsticcs, queue)
    ccall((:magma_zlaqps2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, magmaDoubleComplex_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDoubleComplex_ptr, magmaDoubleComplex_ptr, magma_int_t, magmaDouble_ptr, magma_queue_t), m, n, offset, nb, kb, dA, ldda, jpvt, dtau, dvn1, dvn2, dauxv, dF, lddf, dlsticcs, queue)
end

"""
    magma_zlarf_gpu(m, n, dv, dtau, dC, lddc, queue)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zlarf_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dv, magmaDoubleComplex_const_ptr dtau, magmaDoubleComplex_ptr dC, magma_int_t lddc, magma_queue_t queue);
```
"""
function magma_zlarf_gpu(m, n, dv, dtau, dC, lddc, queue)
    ccall((:magma_zlarf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magmaDoubleComplex_const_ptr, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t), m, n, dv, dtau, dC, lddc, queue)
end

"""
    magma_zlarfb2_gpu(m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, queue)

in zgeqr2x_gpu-v3.cpp
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zlarfb2_gpu( magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex_const_ptr dV, magma_int_t lddv, magmaDoubleComplex_const_ptr dT, magma_int_t lddt, magmaDoubleComplex_ptr dC, magma_int_t lddc, magmaDoubleComplex_ptr dwork, magma_int_t ldwork, magma_queue_t queue);
```
"""
function magma_zlarfb2_gpu(m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, queue)
    ccall((:magma_zlarfb2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t), m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, queue)
end

"""
    magma_zlatrd(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, queue)


### Prototype
```c
magma_int_t magma_zlatrd( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, double *e, magmaDoubleComplex *tau, magmaDoubleComplex *W, magma_int_t ldw, magmaDoubleComplex *work, magma_int_t lwork, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dW, magma_int_t lddw, magma_queue_t queue);
```
"""
function magma_zlatrd(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, queue)
    ccall((:magma_zlatrd, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t), uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, queue)
end

"""
    magma_zlatrd2(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, dwork, ldwork, queue)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zlatrd2( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magmaDoubleComplex *A, magma_int_t lda, double *e, magmaDoubleComplex *tau, magmaDoubleComplex *W, magma_int_t ldw, magmaDoubleComplex *work, magma_int_t lwork, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dW, magma_int_t lddw, magmaDoubleComplex_ptr dwork, magma_int_t ldwork, magma_queue_t queue);
```
"""
function magma_zlatrd2(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, dwork, ldwork, queue)
    ccall((:magma_zlatrd2, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t), uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, dwork, ldwork, queue)
end

"""
    magma_zlatrd_mgpu(ngpu, uplo, n, nb, nb0, A, lda, e, tau, W, ldw, dA, ldda, offset, dW, lddw, hwork, lhwork, dwork, ldwork, queues)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zlatrd_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t nb0, magmaDoubleComplex *A, magma_int_t lda, double *e, magmaDoubleComplex *tau, magmaDoubleComplex *W, magma_int_t ldw, magmaDoubleComplex_ptr dA[], magma_int_t ldda, magma_int_t offset, magmaDoubleComplex_ptr dW[], magma_int_t lddw, magmaDoubleComplex *hwork, magma_int_t lhwork, magmaDoubleComplex_ptr dwork[], magma_int_t ldwork, magma_queue_t queues[]);
```
"""
function magma_zlatrd_mgpu(ngpu, uplo, n, nb, nb0, A, lda, e, tau, W, ldw, dA, ldda, offset, dW, lddw, hwork, lhwork, dwork, ldwork, queues)
    ccall((:magma_zlatrd_mgpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magma_queue_t}), ngpu, uplo, n, nb, nb0, A, lda, e, tau, W, ldw, dA, ldda, offset, dW, lddw, hwork, lhwork, dwork, ldwork, queues)
end

"""
    magma_zlatrsd(uplo, trans, diag, normin, n, A, lda, lambda, x, scale, cnorm, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zlatrsd( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_bool_t normin, magma_int_t n, const magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex lambda, magmaDoubleComplex *x, double *scale, double *cnorm, magma_int_t *info);
```
"""
function magma_zlatrsd(uplo, trans, diag, normin, n, A, lda, lambda, x, scale, cnorm, info)
    ccall((:magma_zlatrsd, libmagma), magma_int_t, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_bool_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magma_int_t}), uplo, trans, diag, normin, n, A, lda, lambda, x, scale, cnorm, info)
end

"""
    magma_zlauum(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_zlauum( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_zlauum(uplo, n, A, lda, info)
    ccall((:magma_zlauum, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_zlauum_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_zlauum_gpu( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_zlauum_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_zlauum_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_zposv(uplo, n, nrhs, A, lda, B, ldb, info)

------------------------------------------------------------ zpo routines
### Prototype
```c
magma_int_t magma_zposv( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_zposv(uplo, n, nrhs, A, lda, B, ldb, info)
    ccall((:magma_zposv, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, A, lda, B, ldb, info)
end

"""
    magma_zposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)


### Prototype
```c
magma_int_t magma_zposv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_zposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_zposv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_zpotf2_gpu(uplo, n, dA, ldda, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zpotf2_gpu( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_zpotf2_gpu(uplo, n, dA, ldda, queue, info)
    ccall((:magma_zpotf2_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magma_queue_t, Ptr{magma_int_t}), uplo, n, dA, ldda, queue, info)
end

"""
    magma_zpotrf_rectile_native(uplo, n, recnb, dA, ldda, gbstep, dinfo, info, queue)


### Prototype
```c
magma_int_t magma_zpotrf_rectile_native( magma_uplo_t uplo, magma_int_t n, magma_int_t recnb, magmaDoubleComplex* dA, magma_int_t ldda, magma_int_t gbstep, magma_int_t *dinfo, magma_int_t *info, magma_queue_t queue);
```
"""
function magma_zpotrf_rectile_native(uplo, n, recnb, dA, ldda, gbstep, dinfo, info, queue)
    ccall((:magma_zpotrf_rectile_native, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), uplo, n, recnb, dA, ldda, gbstep, dinfo, info, queue)
end

"""
    magma_zpotrf(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_zpotrf( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_zpotrf(uplo, n, A, lda, info)
    ccall((:magma_zpotrf, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_zpotrf_expert_gpu(uplo, n, dA, ldda, info, nb, mode)


### Prototype
```c
magma_int_t magma_zpotrf_expert_gpu( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info, magma_int_t nb, magma_mode_t mode );
```
"""
function magma_zpotrf_expert_gpu(uplo, n, dA, ldda, info, nb, mode)
    ccall((:magma_zpotrf_expert_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_mode_t), uplo, n, dA, ldda, info, nb, mode)
end

"""
    magma_zpotrf_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_zpotrf_gpu( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_zpotrf_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_zpotrf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_zpotrf_native(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_zpotrf_native( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magma_zpotrf_native(uplo, n, dA, ldda, info)
    ccall((:magma_zpotrf_native, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_zpotrf_m(ngpu, uplo, n, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zpotrf_m( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_zpotrf_m(ngpu, uplo, n, A, lda, info)
    ccall((:magma_zpotrf_m, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, A, lda, info)
end

"""
    magma_zpotrf_mgpu(ngpu, uplo, n, d_lA, ldda, info)


### Prototype
```c
magma_int_t magma_zpotrf_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr d_lA[], magma_int_t ldda, magma_int_t *info);
```
"""
function magma_zpotrf_mgpu(ngpu, uplo, n, d_lA, ldda, info)
    ccall((:magma_zpotrf_mgpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, d_lA, ldda, info)
end

"""
    magma_zpotrf_mgpu_right(ngpu, uplo, n, d_lA, ldda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zpotrf_mgpu_right( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr d_lA[], magma_int_t ldda, magma_int_t *info);
```
"""
function magma_zpotrf_mgpu_right(ngpu, uplo, n, d_lA, ldda, info)
    ccall((:magma_zpotrf_mgpu_right, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, d_lA, ldda, info)
end

"""
    magma_zpotrf3_mgpu(ngpu, uplo, m, n, off_i, off_j, nb, d_lA, ldda, d_lP, lddp, A, lda, h, queues, events, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zpotrf3_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t off_i, magma_int_t off_j, magma_int_t nb, magmaDoubleComplex_ptr d_lA[], magma_int_t ldda, magmaDoubleComplex_ptr d_lP[], magma_int_t lddp, magmaDoubleComplex *A, magma_int_t lda, magma_int_t h, magma_queue_t queues[][3], magma_event_t events[][5], magma_int_t *info);
```
"""
function magma_zpotrf3_mgpu(ngpu, uplo, m, n, off_i, off_j, nb, d_lA, ldda, d_lP, lddp, A, lda, h, queues, events, info)
    ccall((:magma_zpotrf3_mgpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magmaDoubleComplex_ptr}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, Ptr{NTuple{3, magma_queue_t}}, Ptr{NTuple{5, magma_event_t}}, Ptr{magma_int_t}), ngpu, uplo, m, n, off_i, off_j, nb, d_lA, ldda, d_lP, lddp, A, lda, h, queues, events, info)
end

"""
    magma_zpotri(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_zpotri( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_zpotri(uplo, n, A, lda, info)
    ccall((:magma_zpotri, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_zpotri_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_zpotri_gpu( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_zpotri_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_zpotri_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_zpotrs_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)


### Prototype
```c
magma_int_t magma_zpotrs_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_zpotrs_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_zpotrs_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_zsysv_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zsysv_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_zsysv_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_zsysv_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_zsytrf_nopiv_cpu(uplo, n, ib, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zsytrf_nopiv_cpu( magma_uplo_t uplo, magma_int_t n, magma_int_t ib, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_zsytrf_nopiv_cpu(uplo, n, ib, A, lda, info)
    ccall((:magma_zsytrf_nopiv_cpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, ib, A, lda, info)
end

"""
    magma_zsytrf_nopiv_gpu(uplo, n, dA, ldda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zsytrf_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_zsytrf_nopiv_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_zsytrf_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_zsytrs_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zsytrs_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_zsytrs_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_zsytrs_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_zstedx(range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, dwork, info)

------------------------------------------------------------ zst routines
### Prototype
```c
magma_int_t magma_zstedx( magma_range_t range, magma_int_t n, double vl, double vu, magma_int_t il, magma_int_t iu, double *d, double *e, magmaDoubleComplex *Z, magma_int_t ldz, double *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magmaDouble_ptr dwork, magma_int_t *info);
```
"""
function magma_zstedx(range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, dwork, info)
    ccall((:magma_zstedx, libmagma), magma_int_t, (magma_range_t, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magmaDouble_ptr, Ptr{magma_int_t}), range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, dwork, info)
end

"""
    magma_zstedx_m(ngpu, range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zstedx_m( magma_int_t ngpu, magma_range_t range, magma_int_t n, double vl, double vu, magma_int_t il, magma_int_t iu, double *d, double *e, magmaDoubleComplex *Z, magma_int_t ldz, double *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_zstedx_m(ngpu, range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_zstedx_m, libmagma), magma_int_t, (magma_int_t, magma_range_t, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_ztrevc3(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, rwork, info)

------------------------------------------------------------ ztr routines
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ztrevc3( magma_side_t side, magma_vec_t howmany, magma_int_t *select, magma_int_t n, magmaDoubleComplex *T, magma_int_t ldt, magmaDoubleComplex *VL, magma_int_t ldvl, magmaDoubleComplex *VR, magma_int_t ldvr, magma_int_t mm, magma_int_t *mout, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_ztrevc3(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, rwork, info)
    ccall((:magma_ztrevc3, libmagma), magma_int_t, (magma_side_t, magma_vec_t, Ptr{magma_int_t}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}), side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, rwork, info)
end

"""
    magma_ztrevc3_mt(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, rwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ztrevc3_mt( magma_side_t side, magma_vec_t howmany, magma_int_t *select, magma_int_t n, magmaDoubleComplex *T, magma_int_t ldt, magmaDoubleComplex *VL, magma_int_t ldvl, magmaDoubleComplex *VR, magma_int_t ldvr, magma_int_t mm, magma_int_t *mout, magmaDoubleComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_ztrevc3_mt(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, rwork, info)
    ccall((:magma_ztrevc3_mt, libmagma), magma_int_t, (magma_side_t, magma_vec_t, Ptr{magma_int_t}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}), side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, rwork, info)
end

"""
    magma_ztrsm_m(ngpu, side, uplo, transa, diag, m, n, alpha, A, lda, B, ldb)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ztrsm_m( magma_int_t ngpu, magma_side_t side, magma_uplo_t uplo, magma_trans_t transa, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaDoubleComplex alpha, const magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *B, magma_int_t ldb);
```
"""
function magma_ztrsm_m(ngpu, side, uplo, transa, diag, m, n, alpha, A, lda, B, ldb)
    ccall((:magma_ztrsm_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t), ngpu, side, uplo, transa, diag, m, n, alpha, A, lda, B, ldb)
end

"""
    magma_ztrtri(uplo, diag, n, A, lda, info)


### Prototype
```c
magma_int_t magma_ztrtri( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_ztrtri(uplo, diag, n, A, lda, info)
    ccall((:magma_ztrtri, libmagma), magma_int_t, (magma_uplo_t, magma_diag_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), uplo, diag, n, A, lda, info)
end

"""
    magma_ztrtri_gpu(uplo, diag, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_ztrtri_gpu( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_ztrtri_gpu(uplo, diag, n, dA, ldda, info)
    ccall((:magma_ztrtri_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_diag_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, diag, n, dA, ldda, info)
end

"""
    magma_zungbr(vect, m, n, k, A, lda, tau, work, lwork, info)

------------------------------------------------------------ zun routines
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zungbr( magma_vect_t vect, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zungbr(vect, m, n, k, A, lda, tau, work, lwork, info)
    ccall((:magma_zungbr, libmagma), magma_int_t, (magma_vect_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), vect, m, n, k, A, lda, tau, work, lwork, info)
end

"""
    magma_zunghr(n, ilo, ihi, A, lda, tau, dT, nb, info)


### Prototype
```c
magma_int_t magma_zunghr( magma_int_t n, magma_int_t ilo, magma_int_t ihi, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_zunghr(n, ilo, ihi, A, lda, tau, dT, nb, info)
    ccall((:magma_zunghr, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, dT, nb, info)
end

"""
    magma_zunghr_m(n, ilo, ihi, A, lda, tau, T, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zunghr_m( magma_int_t n, magma_int_t ilo, magma_int_t ihi, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *T, magma_int_t nb, magma_int_t *info);
```
"""
function magma_zunghr_m(n, ilo, ihi, A, lda, tau, T, nb, info)
    ccall((:magma_zunghr_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, T, nb, info)
end

"""
    magma_zunglq(m, n, k, A, lda, tau, dT, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zunglq( magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_zunglq(m, n, k, A, lda, tau, dT, nb, info)
    ccall((:magma_zunglq, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, A, lda, tau, dT, nb, info)
end

"""
    magma_zungqr(m, n, k, A, lda, tau, dT, nb, info)


### Prototype
```c
magma_int_t magma_zungqr( magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_zungqr(m, n, k, A, lda, tau, dT, nb, info)
    ccall((:magma_zungqr, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, A, lda, tau, dT, nb, info)
end

"""
    magma_zungqr_gpu(m, n, k, dA, ldda, tau, dT, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zungqr_gpu( magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex *tau, magmaDoubleComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_zungqr_gpu(m, n, k, dA, ldda, tau, dT, nb, info)
    ccall((:magma_zungqr_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, dA, ldda, tau, dT, nb, info)
end

"""
    magma_zungqr_m(m, n, k, A, lda, tau, T, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zungqr_m( magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *T, magma_int_t nb, magma_int_t *info);
```
"""
function magma_zungqr_m(m, n, k, A, lda, tau, T, nb, info)
    ccall((:magma_zungqr_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), m, n, k, A, lda, tau, T, nb, info)
end

"""
    magma_zungqr2(m, n, k, A, lda, tau, info)


### Prototype
```c
magma_int_t magma_zungqr2( magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magma_int_t *info);
```
"""
function magma_zungqr2(m, n, k, A, lda, tau, info)
    ccall((:magma_zungqr2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magma_int_t}), m, n, k, A, lda, tau, info)
end

"""
    magma_zunmbr(vect, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_zunmbr( magma_vect_t vect, magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *C, magma_int_t ldc, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zunmbr(vect, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_zunmbr, libmagma), magma_int_t, (magma_vect_t, magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), vect, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_zunmlq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_zunmlq( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *C, magma_int_t ldc, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zunmlq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_zunmlq, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_zunmrq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_zunmrq( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *C, magma_int_t ldc, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zunmrq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_zunmrq, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_zunmql(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_zunmql( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *C, magma_int_t ldc, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zunmql(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_zunmql, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_zunmql2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zunmql2_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex *tau, magmaDoubleComplex_ptr dC, magma_int_t lddc, const magmaDoubleComplex *wA, magma_int_t ldwa, magma_int_t *info);
```
"""
function magma_zunmql2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
    ccall((:magma_zunmql2_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
end

"""
    magma_zunmqr(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_zunmqr( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *C, magma_int_t ldc, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zunmqr(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_zunmqr, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_zunmqr_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, hwork, lwork, dT, nb, info)


### Prototype
```c
magma_int_t magma_zunmqr_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magmaDoubleComplex const *tau, magmaDoubleComplex_ptr dC, magma_int_t lddc, magmaDoubleComplex *hwork, magma_int_t lwork, magmaDoubleComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_zunmqr_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, hwork, lwork, dT, nb, info)
    ccall((:magma_zunmqr_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, tau, dC, lddc, hwork, lwork, dT, nb, info)
end

"""
    magma_zunmqr2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zunmqr2_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex *tau, magmaDoubleComplex_ptr dC, magma_int_t lddc, const magmaDoubleComplex *wA, magma_int_t ldwa, magma_int_t *info);
```
"""
function magma_zunmqr2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
    ccall((:magma_zunmqr2_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
end

"""
    magma_zunmqr_m(ngpu, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zunmqr_m( magma_int_t ngpu, magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *C, magma_int_t ldc, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zunmqr_m(ngpu, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_zunmqr_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_zunmtr(side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_zunmtr( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *C, magma_int_t ldc, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zunmtr(side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_zunmtr, libmagma), magma_int_t, (magma_side_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_zunmtr_gpu(side, uplo, trans, m, n, dA, ldda, tau, dC, lddc, wA, ldwa, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zunmtr_gpu( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_int_t m, magma_int_t n, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex *tau, magmaDoubleComplex_ptr dC, magma_int_t lddc, const magmaDoubleComplex *wA, magma_int_t ldwa, magma_int_t *info);
```
"""
function magma_zunmtr_gpu(side, uplo, trans, m, n, dA, ldda, tau, dC, lddc, wA, ldwa, info)
    ccall((:magma_zunmtr_gpu, libmagma), magma_int_t, (magma_side_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magmaDoubleComplex_ptr, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), side, uplo, trans, m, n, dA, ldda, tau, dC, lddc, wA, ldwa, info)
end

"""
    magma_zunmtr_m(ngpu, side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zunmtr_m( magma_int_t ngpu, magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_int_t m, magma_int_t n, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *tau, magmaDoubleComplex *C, magma_int_t ldc, magmaDoubleComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_zunmtr_m(ngpu, side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_zunmtr_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_z_isnan(x)


### Prototype
```c
int magma_z_isnan( magmaDoubleComplex x );
```
"""
function magma_z_isnan(x)
    ccall((:magma_z_isnan, libmagma), Cint, (magmaDoubleComplex,), x)
end

"""
    magma_z_isinf(x)


### Prototype
```c
int magma_z_isinf( magmaDoubleComplex x );
```
"""
function magma_z_isinf(x)
    ccall((:magma_z_isinf, libmagma), Cint, (magmaDoubleComplex,), x)
end

"""
    magma_z_isnan_inf(x)


### Prototype
```c
int magma_z_isnan_inf( magmaDoubleComplex x );
```
"""
function magma_z_isnan_inf(x)
    ccall((:magma_z_isnan_inf, libmagma), Cint, (magmaDoubleComplex,), x)
end

"""
    magma_zmake_lwork(lwork)


### Prototype
```c
magmaDoubleComplex magma_zmake_lwork( magma_int_t lwork );
```
"""
function magma_zmake_lwork(lwork)
    ccall((:magma_zmake_lwork, libmagma), magmaDoubleComplex, (magma_int_t,), lwork)
end

"""
    magma_znan_inf(uplo, m, n, A, lda, cnt_nan, cnt_inf)


### Prototype
```c
magma_int_t magma_znan_inf( magma_uplo_t uplo, magma_int_t m, magma_int_t n, const magmaDoubleComplex *A, magma_int_t lda, magma_int_t *cnt_nan, magma_int_t *cnt_inf);
```
"""
function magma_znan_inf(uplo, m, n, A, lda, cnt_nan, cnt_inf)
    ccall((:magma_znan_inf, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, m, n, A, lda, cnt_nan, cnt_inf)
end

"""
    magma_znan_inf_gpu(uplo, m, n, dA, ldda, cnt_nan, cnt_inf, queue)


### Prototype
```c
magma_int_t magma_znan_inf_gpu( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magma_int_t *cnt_nan, magma_int_t *cnt_inf, magma_queue_t queue);
```
"""
function magma_znan_inf_gpu(uplo, m, n, dA, ldda, cnt_nan, cnt_inf, queue)
    ccall((:magma_znan_inf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), uplo, m, n, dA, ldda, cnt_nan, cnt_inf, queue)
end

"""
    magma_zprint(m, n, A, lda)


### Prototype
```c
void magma_zprint( magma_int_t m, magma_int_t n, const magmaDoubleComplex *A, magma_int_t lda);
```
"""
function magma_zprint(m, n, A, lda)
    ccall((:magma_zprint, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t), m, n, A, lda)
end

"""
    magma_zprint_gpu(m, n, dA, ldda, queue)


### Prototype
```c
void magma_zprint_gpu( magma_int_t m, magma_int_t n, magmaDoubleComplex_const_ptr dA, magma_int_t ldda, magma_queue_t queue);
```
"""
function magma_zprint_gpu(m, n, dA, ldda, queue)
    ccall((:magma_zprint_gpu, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDoubleComplex_const_ptr, magma_int_t, magma_queue_t), m, n, dA, ldda, queue)
end

"""
    magma_zpanel_to_q(uplo, ib, A, lda, work)


### Prototype
```c
void magma_zpanel_to_q( magma_uplo_t uplo, magma_int_t ib, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *work);
```
"""
function magma_zpanel_to_q(uplo, ib, A, lda, work)
    ccall((:magma_zpanel_to_q, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}), uplo, ib, A, lda, work)
end

"""
    magma_zq_to_panel(uplo, ib, A, lda, work)


### Prototype
```c
void magma_zq_to_panel( magma_uplo_t uplo, magma_int_t ib, magmaDoubleComplex *A, magma_int_t lda, magmaDoubleComplex *work);
```
"""
function magma_zq_to_panel(uplo, ib, A, lda, work)
    ccall((:magma_zq_to_panel, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}), uplo, ib, A, lda, work)
end

"""
    magmablas_zextract_diag_sqrt(m, n, dA, ldda, dD, incd, queue)

auxiliary routines for posv-irgmres  
### Prototype
```c
void magmablas_zextract_diag_sqrt( magma_int_t m, magma_int_t n, magmaDoubleComplex* dA, magma_int_t ldda, double* dD, magma_int_t incd, magma_queue_t queue);
```
"""
function magmablas_zextract_diag_sqrt(m, n, dA, ldda, dD, incd, queue)
    ccall((:magmablas_zextract_diag_sqrt, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t), m, n, dA, ldda, dD, incd, queue)
end

"""
    magmablas_zscal_shift_hpd(uplo, n, dA, ldda, dD, incd, miu, cn, eps, queue)


### Prototype
```c
void magmablas_zscal_shift_hpd( magma_uplo_t uplo, int n, magmaDoubleComplex* dA, int ldda, double* dD, int incd, double miu, double cn, double eps, magma_queue_t queue);
```
"""
function magmablas_zscal_shift_hpd(uplo, n, dA, ldda, dD, incd, miu, cn, eps, queue)
    ccall((:magmablas_zscal_shift_hpd, libmagma), Cvoid, (magma_uplo_t, Cint, Ptr{magmaDoubleComplex}, Cint, Ptr{Cdouble}, Cint, Cdouble, Cdouble, Cdouble, magma_queue_t), uplo, n, dA, ldda, dD, incd, miu, cn, eps, queue)
end

"""
    magmablas_zdimv_invert(n, alpha, dD, incd, dx, incx, beta, dy, incy, queue)


### Prototype
```c
void magmablas_zdimv_invert( magma_int_t n, magmaDoubleComplex alpha, magmaDoubleComplex* dD, magma_int_t incd, magmaDoubleComplex* dx, magma_int_t incx, magmaDoubleComplex beta, magmaDoubleComplex* dy, magma_int_t incy, magma_queue_t queue);
```
"""
function magmablas_zdimv_invert(n, alpha, dD, incd, dx, incx, beta, dy, incy, queue)
    ccall((:magmablas_zdimv_invert, libmagma), Cvoid, (magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex}, magma_int_t, Ptr{magmaDoubleComplex}, magma_int_t, magmaDoubleComplex, Ptr{magmaDoubleComplex}, magma_int_t, magma_queue_t), n, alpha, dD, incd, dx, incx, beta, dy, incy, queue)
end

"""
    cgehrd_data

//**
Structure containing matrices for multi-GPU cgehrd.

- dA  is distributed column block-cyclic across GPUs.
- dV  is duplicated on all GPUs.
- dVd is distributed row block-cyclic across GPUs (TODO: verify).
- dY  is partial results on each GPU in clahr2,
then complete results are duplicated on all GPUs for clahru.
- dW  is local to each GPU (workspace).
- dTi is duplicated on all GPUs.

@ingroup magma_gehrd
"""
struct cgehrd_data
    ngpu::magma_int_t
    ldda::magma_int_t
    ldv::magma_int_t
    ldvd::magma_int_t
    dA::NTuple{8, magmaFloatComplex_ptr}
    dV::NTuple{8, magmaFloatComplex_ptr}
    dVd::NTuple{8, magmaFloatComplex_ptr}
    dY::NTuple{8, magmaFloatComplex_ptr}
    dW::NTuple{8, magmaFloatComplex_ptr}
    dTi::NTuple{8, magmaFloatComplex_ptr}
    queues::NTuple{8, magma_queue_t}
end

"""
    magma_get_cpotrf_nb(n)

Cholesky, LU, symmetric indefinite
### Prototype
```c
magma_int_t magma_get_cpotrf_nb( magma_int_t n );
```
"""
function magma_get_cpotrf_nb(n)
    ccall((:magma_get_cpotrf_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_cgetrf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_cgetrf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_cgetrf_nb(m, n)
    ccall((:magma_get_cgetrf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_cgetrf_native_nb(m, n)


### Prototype
```c
magma_int_t magma_get_cgetrf_native_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_cgetrf_native_nb(m, n)
    ccall((:magma_get_cgetrf_native_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_cgetri_nb(n)


### Prototype
```c
magma_int_t magma_get_cgetri_nb( magma_int_t n );
```
"""
function magma_get_cgetri_nb(n)
    ccall((:magma_get_cgetri_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_chetrf_nb(n)


### Prototype
```c
magma_int_t magma_get_chetrf_nb( magma_int_t n );
```
"""
function magma_get_chetrf_nb(n)
    ccall((:magma_get_chetrf_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_chetrf_nopiv_nb(n)


### Prototype
```c
magma_int_t magma_get_chetrf_nopiv_nb( magma_int_t n );
```
"""
function magma_get_chetrf_nopiv_nb(n)
    ccall((:magma_get_chetrf_nopiv_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_chetrf_aasen_nb(n)


### Prototype
```c
magma_int_t magma_get_chetrf_aasen_nb( magma_int_t n );
```
"""
function magma_get_chetrf_aasen_nb(n)
    ccall((:magma_get_chetrf_aasen_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_cgeqp3_nb(m, n)

QR
### Prototype
```c
magma_int_t magma_get_cgeqp3_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_cgeqp3_nb(m, n)
    ccall((:magma_get_cgeqp3_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_cgeqrf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_cgeqrf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_cgeqrf_nb(m, n)
    ccall((:magma_get_cgeqrf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_cgeqlf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_cgeqlf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_cgeqlf_nb(m, n)
    ccall((:magma_get_cgeqlf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_cgelqf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_cgelqf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_cgelqf_nb(m, n)
    ccall((:magma_get_cgelqf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_cgehrd_nb(n)

eigenvalues
### Prototype
```c
magma_int_t magma_get_cgehrd_nb( magma_int_t n );
```
"""
function magma_get_cgehrd_nb(n)
    ccall((:magma_get_cgehrd_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_chetrd_nb(n)


### Prototype
```c
magma_int_t magma_get_chetrd_nb( magma_int_t n );
```
"""
function magma_get_chetrd_nb(n)
    ccall((:magma_get_chetrd_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_chegst_nb(n)


### Prototype
```c
magma_int_t magma_get_chegst_nb( magma_int_t n );
```
"""
function magma_get_chegst_nb(n)
    ccall((:magma_get_chegst_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_chegst_m_nb(n)


### Prototype
```c
magma_int_t magma_get_chegst_m_nb( magma_int_t n );
```
"""
function magma_get_chegst_m_nb(n)
    ccall((:magma_get_chegst_m_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_cgebrd_nb(m, n)

SVD
### Prototype
```c
magma_int_t magma_get_cgebrd_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_cgebrd_nb(m, n)
    ccall((:magma_get_cgebrd_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_cgesvd_nb(m, n)


### Prototype
```c
magma_int_t magma_get_cgesvd_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_cgesvd_nb(m, n)
    ccall((:magma_get_cgesvd_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_cbulge_nb(n, nbthreads)

2-stage eigenvalues
### Prototype
```c
magma_int_t magma_get_cbulge_nb( magma_int_t n, magma_int_t nbthreads );
```
"""
function magma_get_cbulge_nb(n, nbthreads)
    ccall((:magma_get_cbulge_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), n, nbthreads)
end

"""
    magma_get_cbulge_nb_mgpu(n)


### Prototype
```c
magma_int_t magma_get_cbulge_nb_mgpu( magma_int_t n );
```
"""
function magma_get_cbulge_nb_mgpu(n)
    ccall((:magma_get_cbulge_nb_mgpu, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_cbulge_vblksiz(n, nb, nbthreads)


### Prototype
```c
magma_int_t magma_get_cbulge_vblksiz( magma_int_t n, magma_int_t nb, magma_int_t nbthreads );
```
"""
function magma_get_cbulge_vblksiz(n, nb, nbthreads)
    ccall((:magma_get_cbulge_vblksiz, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), n, nb, nbthreads)
end

# no prototype is found for this function at magma_c.h:59:13, please use with caution
"""
    magma_get_cbulge_gcperf()


### Prototype
```c
magma_int_t magma_get_cbulge_gcperf();
```
"""
function magma_get_cbulge_gcperf()
    ccall((:magma_get_cbulge_gcperf, libmagma), magma_int_t, ())
end

"""
    magma_cgebrd(m, n, A, lda, d, e, tauq, taup, work, lwork, info)

------------------------------------------------------------ zge routines
### Prototype
```c
magma_int_t magma_cgebrd( magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float *d, float *e, magmaFloatComplex *tauq, magmaFloatComplex *taup, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgebrd(m, n, A, lda, d, e, tauq, taup, work, lwork, info)
    ccall((:magma_cgebrd, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, d, e, tauq, taup, work, lwork, info)
end

"""
    magma_cgeev(jobvl, jobvr, n, A, lda, w, VL, ldvl, VR, ldvr, work, lwork, rwork, info)


### Prototype
```c
magma_int_t magma_cgeev( magma_vec_t jobvl, magma_vec_t jobvr, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, #ifdef MAGMA_COMPLEX magmaFloatComplex *w, #else float *wr, float *wi, #endif magmaFloatComplex *VL, magma_int_t ldvl, magmaFloatComplex *VR, magma_int_t ldvr, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_cgeev(jobvl, jobvr, n, A, lda, w, VL, ldvl, VR, ldvr, work, lwork, rwork, info)
    ccall((:magma_cgeev, libmagma), magma_int_t, (magma_vec_t, magma_vec_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}), jobvl, jobvr, n, A, lda, w, VL, ldvl, VR, ldvr, work, lwork, rwork, info)
end

"""
    magma_cgeev_m(jobvl, jobvr, n, A, lda, w, VL, ldvl, VR, ldvr, work, lwork, rwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgeev_m( magma_vec_t jobvl, magma_vec_t jobvr, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, #ifdef MAGMA_COMPLEX magmaFloatComplex *w, #else float *wr, float *wi, #endif magmaFloatComplex *VL, magma_int_t ldvl, magmaFloatComplex *VR, magma_int_t ldvr, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_cgeev_m(jobvl, jobvr, n, A, lda, w, VL, ldvl, VR, ldvr, work, lwork, rwork, info)
    ccall((:magma_cgeev_m, libmagma), magma_int_t, (magma_vec_t, magma_vec_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}), jobvl, jobvr, n, A, lda, w, VL, ldvl, VR, ldvr, work, lwork, rwork, info)
end

"""
    magma_cgegqr_gpu(ikind, m, n, dA, ldda, dwork, work, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgegqr_gpu( magma_int_t ikind, magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dwork, magmaFloatComplex *work, magma_int_t *info);
```
"""
function magma_cgegqr_gpu(ikind, m, n, dA, ldda, dwork, work, info)
    ccall((:magma_cgegqr_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, Ptr{magmaFloatComplex}, Ptr{magma_int_t}), ikind, m, n, dA, ldda, dwork, work, info)
end

"""
    magma_cgehrd(n, ilo, ihi, A, lda, tau, work, lwork, dT, info)


### Prototype
```c
magma_int_t magma_cgehrd( magma_int_t n, magma_int_t ilo, magma_int_t ihi, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magmaFloatComplex_ptr dT, magma_int_t *info);
```
"""
function magma_cgehrd(n, ilo, ihi, A, lda, tau, work, lwork, dT, info)
    ccall((:magma_cgehrd, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, work, lwork, dT, info)
end

"""
    magma_cgehrd_m(n, ilo, ihi, A, lda, tau, work, lwork, T, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgehrd_m( magma_int_t n, magma_int_t ilo, magma_int_t ihi, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magmaFloatComplex *T, magma_int_t *info);
```
"""
function magma_cgehrd_m(n, ilo, ihi, A, lda, tau, work, lwork, T, info)
    ccall((:magma_cgehrd_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, work, lwork, T, info)
end

"""
    magma_cgehrd2(n, ilo, ihi, A, lda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgehrd2( magma_int_t n, magma_int_t ilo, magma_int_t ihi, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgehrd2(n, ilo, ihi, A, lda, tau, work, lwork, info)
    ccall((:magma_cgehrd2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, work, lwork, info)
end

"""
    magma_cgelqf(m, n, A, lda, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_cgelqf( magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgelqf(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_cgelqf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_cgelqf_gpu(m, n, dA, ldda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgelqf_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgelqf_gpu(m, n, dA, ldda, tau, work, lwork, info)
    ccall((:magma_cgelqf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, n, dA, ldda, tau, work, lwork, info)
end

"""
    magma_cgels(trans, m, n, nrhs, A, lda, B, ldb, hwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgels( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr A, magma_int_t lda, magmaFloatComplex_ptr B, magma_int_t ldb, magmaFloatComplex *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgels(trans, m, n, nrhs, A, lda, B, ldb, hwork, lwork, info)
    ccall((:magma_cgels, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), trans, m, n, nrhs, A, lda, B, ldb, hwork, lwork, info)
end

"""
    magma_cggrqf(m, p, n, A, lda, taua, B, ldb, taub, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cggrqf( magma_int_t m, magma_int_t p, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *taua, magmaFloatComplex *B, magma_int_t ldb, magmaFloatComplex *taub, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cggrqf(m, p, n, A, lda, taua, B, ldb, taub, work, lwork, info)
    ccall((:magma_cggrqf, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, p, n, A, lda, taua, B, ldb, taub, work, lwork, info)
end

"""
    magma_cgglse(m, n, p, A, lda, B, ldb, c, d, x, work, lwork, info)


### Prototype
```c
magma_int_t magma_cgglse( magma_int_t m, magma_int_t n, magma_int_t p, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, magmaFloatComplex *c, magmaFloatComplex *d, magmaFloatComplex *x, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgglse(m, n, p, A, lda, B, ldb, c, d, x, work, lwork, info)
    ccall((:magma_cgglse, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, n, p, A, lda, B, ldb, c, d, x, work, lwork, info)
end

"""
    magma_cgels_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)


### Prototype
```c
magma_int_t magma_cgels_gpu( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magmaFloatComplex *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgels_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
    ccall((:magma_cgels_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, PtrOrCuPtr{magmaFloatComplex}, magma_int_t, PtrOrCuPtr{magma_int_t}), trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
end

"""
    magma_cgels3_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgels3_gpu( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magmaFloatComplex *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgels3_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
    ccall((:magma_cgels3_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
end

"""
    magma_cgeqlf(m, n, A, lda, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_cgeqlf( magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgeqlf(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_cgeqlf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_cgeqp3(m, n, A, lda, jpvt, tau, work, lwork, rwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgeqp3( magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *jpvt, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_cgeqp3(m, n, A, lda, jpvt, tau, work, lwork, rwork, info)
    ccall((:magma_cgeqp3, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}), m, n, A, lda, jpvt, tau, work, lwork, rwork, info)
end

"""
    magma_cgeqp3_gpu(m, n, dA, ldda, jpvt, tau, dwork, lwork, rwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgeqp3_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *jpvt, magmaFloatComplex *tau, magmaFloatComplex_ptr dwork, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_cgeqp3_gpu(m, n, dA, ldda, jpvt, tau, dwork, lwork, rwork, info)
    ccall((:magma_cgeqp3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}), m, n, dA, ldda, jpvt, tau, dwork, lwork, rwork, info)
end

"""
    magma_cgeqr2_gpu(m, n, dA, ldda, dtau, dwork, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgeqr2_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dtau, magmaFloat_ptr dwork, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_cgeqr2_gpu(m, n, dA, ldda, dtau, dwork, queue, info)
    ccall((:magma_cgeqr2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magmaFloat_ptr, magma_queue_t, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dwork, queue, info)
end

"""
    magma_cgeqr2x_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgeqr2x_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dtau, magmaFloatComplex_ptr dT, magmaFloatComplex_ptr ddA, magmaFloat_ptr dwork, magma_int_t *info);
```
"""
function magma_cgeqr2x_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)
    ccall((:magma_cgeqr2x_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloat_ptr, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, info)
end

"""
    magma_cgeqr2x2_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgeqr2x2_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dtau, magmaFloatComplex_ptr dT, magmaFloatComplex_ptr ddA, magmaFloat_ptr dwork, magma_int_t *info);
```
"""
function magma_cgeqr2x2_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)
    ccall((:magma_cgeqr2x2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloat_ptr, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, info)
end

"""
    magma_cgeqr2x3_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)


### Prototype
```c
magma_int_t magma_cgeqr2x3_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dtau, magmaFloatComplex_ptr dT, magmaFloatComplex_ptr ddA, magmaFloat_ptr dwork, magma_int_t *info);
```
"""
function magma_cgeqr2x3_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)
    ccall((:magma_cgeqr2x3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloat_ptr, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, info)
end

"""
    magma_cgeqr2x4_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgeqr2x4_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dtau, magmaFloatComplex_ptr dT, magmaFloatComplex_ptr ddA, magmaFloat_ptr dwork, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_cgeqr2x4_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, queue, info)
    ccall((:magma_cgeqr2x4_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magmaFloat_ptr, magma_queue_t, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, queue, info)
end

"""
    magma_cgeqrf(m, n, A, lda, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_cgeqrf( magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgeqrf(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_cgeqrf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_cgeqrf_gpu(m, n, dA, ldda, tau, dT, info)


### Prototype
```c
magma_int_t magma_cgeqrf_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex *tau, magmaFloatComplex_ptr dT, magma_int_t *info);
```
"""
function magma_cgeqrf_gpu(m, n, dA, ldda, tau, dT, info)
    ccall((:magma_cgeqrf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, PtrOrCuPtr{magmaFloatComplex}, magmaFloatComplex_ptr, PtrOrCuPtr{magma_int_t}), m, n, dA, ldda, tau, dT, info)
end

"""
    magma_cgeqrf_m(ngpu, m, n, A, lda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgeqrf_m( magma_int_t ngpu, magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgeqrf_m(ngpu, m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_cgeqrf_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_cgeqrf_ooc(m, n, A, lda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgeqrf_ooc( magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgeqrf_ooc(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_cgeqrf_ooc, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_cgeqrf2_gpu(m, n, dA, ldda, tau, info)


### Prototype
```c
magma_int_t magma_cgeqrf2_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex *tau, magma_int_t *info);
```
"""
function magma_cgeqrf2_gpu(m, n, dA, ldda, tau, info)
    ccall((:magma_cgeqrf2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magma_int_t}), m, n, dA, ldda, tau, info)
end

"""
    magma_cgeqrf2_mgpu(ngpu, m, n, d_lA, ldda, tau, info)


### Prototype
```c
magma_int_t magma_cgeqrf2_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magmaFloatComplex_ptr d_lA[], magma_int_t ldda, magmaFloatComplex *tau, magma_int_t *info);
```
"""
function magma_cgeqrf2_mgpu(ngpu, m, n, d_lA, ldda, tau, info)
    ccall((:magma_cgeqrf2_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magma_int_t}), ngpu, m, n, d_lA, ldda, tau, info)
end

"""
    magma_cgeqrf3_gpu(m, n, dA, ldda, tau, dT, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgeqrf3_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex *tau, magmaFloatComplex_ptr dT, magma_int_t *info);
```
"""
function magma_cgeqrf3_gpu(m, n, dA, ldda, tau, dT, info)
    ccall((:magma_cgeqrf3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, Ptr{magma_int_t}), m, n, dA, ldda, tau, dT, info)
end

"""
    magma_cgeqrs_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)


### Prototype
```c
magma_int_t magma_cgeqrs_gpu( magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex const *tau, magmaFloatComplex_ptr dT, magmaFloatComplex_ptr dB, magma_int_t lddb, magmaFloatComplex *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgeqrs_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
    ccall((:magma_cgeqrs_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
end

"""
    magma_cgeqrs3_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgeqrs3_gpu( magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex const *tau, magmaFloatComplex_ptr dT, magmaFloatComplex_ptr dB, magma_int_t lddb, magmaFloatComplex *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgeqrs3_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
    ccall((:magma_cgeqrs3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
end

"""
    magma_cgerbt_gpu(gen, n, nrhs, dA, ldda, dB, lddb, U, V, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgerbt_gpu( magma_bool_t gen, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magmaFloatComplex *U, magmaFloatComplex *V, magma_int_t *info);
```
"""
function magma_cgerbt_gpu(gen, n, nrhs, dA, ldda, dB, lddb, U, V, info)
    ccall((:magma_cgerbt_gpu, libmagma), magma_int_t, (magma_bool_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, Ptr{magma_int_t}), gen, n, nrhs, dA, ldda, dB, lddb, U, V, info)
end

"""
    magma_cgerfs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dAF, iter, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgerfs_nopiv_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magmaFloatComplex_ptr dX, magma_int_t lddx, magmaFloatComplex_ptr dworkd, magmaFloatComplex_ptr dAF, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_cgerfs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dAF, iter, info)
    ccall((:magma_cgerfs_nopiv_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr, Ptr{magma_int_t}, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dAF, iter, info)
end

"""
    magma_cgesdd(jobz, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, rwork, iwork, info)


### Prototype
```c
magma_int_t magma_cgesdd( magma_vec_t jobz, magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float *s, magmaFloatComplex *U, magma_int_t ldu, magmaFloatComplex *VT, magma_int_t ldvt, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *iwork, magma_int_t *info);
```
"""
function magma_cgesdd(jobz, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, rwork, iwork, info)
    ccall((:magma_cgesdd, libmagma), magma_int_t, (magma_vec_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}, Ptr{magma_int_t}), jobz, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, rwork, iwork, info)
end

"""
    magma_cgesv(n, nrhs, A, lda, ipiv, B, ldb, info)


### Prototype
```c
magma_int_t magma_cgesv( magma_int_t n, magma_int_t nrhs, magmaFloatComplex *A, magma_int_t lda, magma_int_t *ipiv, magmaFloatComplex *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_cgesv(n, nrhs, A, lda, ipiv, B, ldb, info)
    ccall((:magma_cgesv, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), n, nrhs, A, lda, ipiv, B, ldb, info)
end

"""
    magma_cgesv_gpu(n, nrhs, dA, ldda, ipiv, dB, lddb, info)


### Prototype
```c
magma_int_t magma_cgesv_gpu( magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_cgesv_gpu(n, nrhs, dA, ldda, ipiv, dB, lddb, info)
    ccall((:magma_cgesv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, magmaFloatComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), n, nrhs, dA, ldda, ipiv, dB, lddb, info)
end

"""
    magma_cgesv_nopiv_gpu(n, nrhs, dA, ldda, dB, lddb, info)


### Prototype
```c
magma_int_t magma_cgesv_nopiv_gpu( magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_cgesv_nopiv_gpu(n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_cgesv_nopiv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_cgesv_rbt(ref, n, nrhs, A, lda, B, ldb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgesv_rbt( magma_bool_t ref, magma_int_t n, magma_int_t nrhs, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_cgesv_rbt(ref, n, nrhs, A, lda, B, ldb, info)
    ccall((:magma_cgesv_rbt, libmagma), magma_int_t, (magma_bool_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), ref, n, nrhs, A, lda, B, ldb, info)
end

"""
    magma_cgesvd(jobu, jobvt, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, rwork, info)


### Prototype
```c
magma_int_t magma_cgesvd( magma_vec_t jobu, magma_vec_t jobvt, magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float *s, magmaFloatComplex *U, magma_int_t ldu, magmaFloatComplex *VT, magma_int_t ldvt, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_cgesvd(jobu, jobvt, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, rwork, info)
    ccall((:magma_cgesvd, libmagma), magma_int_t, (magma_vec_t, magma_vec_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}), jobu, jobvt, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, rwork, info)
end

"""
    magma_cgetf2_gpu(m, n, dA, ldda, ipiv, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgetf2_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_cgetf2_gpu(m, n, dA, ldda, ipiv, queue, info)
    ccall((:magma_cgetf2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, magma_queue_t, Ptr{magma_int_t}), m, n, dA, ldda, ipiv, queue, info)
end

"""
    magma_cgetf2_native_fused(m, n, dA, ldda, ipiv, gbstep, flags, info, queue)


### Prototype
```c
magma_int_t magma_cgetf2_native_fused( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t gbstep, magma_int_t *flags, magma_int_t *info, magma_queue_t queue );
```
"""
function magma_cgetf2_native_fused(m, n, dA, ldda, ipiv, gbstep, flags, info, queue)
    ccall((:magma_cgetf2_native_fused, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), m, n, dA, ldda, ipiv, gbstep, flags, info, queue)
end

"""
    magma_cgetf2_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)


### Prototype
```c
magma_int_t magma_cgetf2_native( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *dipiv, magma_int_t* dipivinfo, magma_int_t *dinfo, magma_int_t gbstep, magma_queue_t queue, magma_queue_t update_queue);
```
"""
function magma_cgetf2_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
    ccall((:magma_cgetf2_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t, magma_queue_t), m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
end

"""
    magma_cgetf2_nopiv(m, n, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgetf2_nopiv( magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_cgetf2_nopiv(m, n, A, lda, info)
    ccall((:magma_cgetf2_nopiv, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, info)
end

"""
    magma_cgetrf_recpanel_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)


### Prototype
```c
magma_int_t magma_cgetrf_recpanel_native( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t* dipiv, magma_int_t* dipivinfo, magma_int_t *dinfo, magma_int_t gbstep, magma_queue_t queue, magma_queue_t update_queue );
```
"""
function magma_cgetrf_recpanel_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
    ccall((:magma_cgetrf_recpanel_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t, magma_queue_t), m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
end

"""
    magma_cgetrf(m, n, A, lda, ipiv, info)


### Prototype
```c
magma_int_t magma_cgetrf( magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_cgetrf(m, n, A, lda, ipiv, info)
    ccall((:magma_cgetrf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, A, lda, ipiv, info)
end

"""
    magma_cgetrf_gpu(m, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_cgetrf_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_cgetrf_gpu(m, n, dA, ldda, ipiv, info)
    ccall((:magma_cgetrf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, PtrOrCuPtr{magma_int_t}), m, n, dA, ldda, ipiv, info)
end

"""
    magma_cgetrf_gpu_expert(m, n, dA, ldda, ipiv, info, nb, mode)


### Prototype
```c
magma_int_t magma_cgetrf_gpu_expert( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info, magma_int_t nb, magma_mode_t mode);
```
"""
function magma_cgetrf_gpu_expert(m, n, dA, ldda, ipiv, info, nb, mode)
    ccall((:magma_cgetrf_gpu_expert, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_mode_t), m, n, dA, ldda, ipiv, info, nb, mode)
end

"""
    magma_cgetrf_native(m, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_cgetrf_native( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info );
```
"""
function magma_cgetrf_native(m, n, dA, ldda, ipiv, info)
    ccall((:magma_cgetrf_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, dA, ldda, ipiv, info)
end

"""
    magma_cgetrf_m(ngpu, m, n, A, lda, ipiv, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgetrf_m( magma_int_t ngpu, magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_cgetrf_m(ngpu, m, n, A, lda, ipiv, info)
    ccall((:magma_cgetrf_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), ngpu, m, n, A, lda, ipiv, info)
end

"""
    magma_cgetrf_mgpu(ngpu, m, n, d_lA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_cgetrf_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magmaFloatComplex_ptr d_lA[], magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_cgetrf_mgpu(ngpu, m, n, d_lA, ldda, ipiv, info)
    ccall((:magma_cgetrf_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), ngpu, m, n, d_lA, ldda, ipiv, info)
end

"""
    magma_cgetrf2(m, n, A, lda, ipiv, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgetrf2( magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_cgetrf2(m, n, A, lda, ipiv, info)
    ccall((:magma_cgetrf2, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, A, lda, ipiv, info)
end

"""
    magma_cgetrf2_mgpu(ngpu, m, n, nb, offset, d_lAT, lddat, ipiv, d_lAP, W, ldw, queues, info)


### Prototype
```c
magma_int_t magma_cgetrf2_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t offset, magmaFloatComplex_ptr d_lAT[], magma_int_t lddat, magma_int_t *ipiv, magmaFloatComplex_ptr d_lAP[], magmaFloatComplex *W, magma_int_t ldw, magma_queue_t queues[][2], magma_int_t *info);
```
"""
function magma_cgetrf2_mgpu(ngpu, m, n, nb, offset, d_lAT, lddat, ipiv, d_lAP, W, ldw, queues, info)
    ccall((:magma_cgetrf2_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex_ptr}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{NTuple{2, magma_queue_t}}, Ptr{magma_int_t}), ngpu, m, n, nb, offset, d_lAT, lddat, ipiv, d_lAP, W, ldw, queues, info)
end

"""
    magma_cgetrf_nopiv(m, n, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgetrf_nopiv( magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_cgetrf_nopiv(m, n, A, lda, info)
    ccall((:magma_cgetrf_nopiv, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, info)
end

"""
    magma_cgetrf_nopiv_gpu(m, n, dA, ldda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgetrf_nopiv_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_cgetrf_nopiv_gpu(m, n, dA, ldda, info)
    ccall((:magma_cgetrf_nopiv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), m, n, dA, ldda, info)
end

"""
    magma_cgetri_gpu(n, dA, ldda, ipiv, dwork, lwork, info)


### Prototype
```c
magma_int_t magma_cgetri_gpu( magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaFloatComplex_ptr dwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cgetri_gpu(n, dA, ldda, ipiv, dwork, lwork, info)
    ccall((:magma_cgetri_gpu, libmagma), magma_int_t, (magma_int_t, magmaFloatComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, magmaFloatComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), n, dA, ldda, ipiv, dwork, lwork, info)
end

"""
    magma_cgetrs_gpu(trans, n, nrhs, dA, ldda, ipiv, dB, lddb, info)


### Prototype
```c
magma_int_t magma_cgetrs_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_cgetrs_gpu(trans, n, nrhs, dA, ldda, ipiv, dB, lddb, info)
    ccall((:magma_cgetrs_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, magmaFloatComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), trans, n, nrhs, dA, ldda, ipiv, dB, lddb, info)
end

"""
    magma_cgetrs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cgetrs_nopiv_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_cgetrs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_cgetrs_nopiv_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_cheevd(jobz, uplo, n, A, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)

------------------------------------------------------------ zhe routines
### Prototype
```c
magma_int_t magma_cheevd( magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float *w, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_cheevd(jobz, uplo, n, A, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_cheevd, libmagma), magma_int_t, (magma_vec_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, uplo, n, A, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_cheevd_gpu(jobz, uplo, n, dA, ldda, w, wA, ldwa, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cheevd_gpu( magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, float *w, magmaFloatComplex *wA, magma_int_t ldwa, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_cheevd_gpu(jobz, uplo, n, dA, ldda, w, wA, ldwa, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_cheevd_gpu, libmagma), magma_int_t, (magma_vec_t, magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, uplo, n, dA, ldda, w, wA, ldwa, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_cheevd_m(ngpu, jobz, uplo, n, A, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cheevd_m( magma_int_t ngpu, magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float *w, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_cheevd_m(ngpu, jobz, uplo, n, A, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_cheevd_m, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, jobz, uplo, n, A, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_cheevdx(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cheevdx( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_cheevdx(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_cheevdx, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_cheevdx_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, mout, w, wA, ldwa, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cheevdx_gpu( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, magmaFloatComplex *wA, magma_int_t ldwa, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_cheevdx_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, mout, w, wA, ldwa, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_cheevdx_gpu, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, mout, w, wA, ldwa, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_cheevdx_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cheevdx_m( magma_int_t ngpu, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_cheevdx_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_cheevdx_m, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_cheevdx_2stage(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cheevdx_2stage( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_cheevdx_2stage(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_cheevdx_2stage, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_cheevdx_2stage_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cheevdx_2stage_m( magma_int_t ngpu, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_cheevdx_2stage_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_cheevdx_2stage_m, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_cheevr(jobz, range, uplo, n, A, lda, vl, vu, il, iu, abstol, mout, w, Z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)

no real [sd] precisions available
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cheevr( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float vl, float vu, magma_int_t il, magma_int_t iu, float abstol, magma_int_t *mout, float *w, magmaFloatComplex *Z, magma_int_t ldz, magma_int_t *isuppz, magmaFloatComplex *work, magma_int_t lwork, float *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_cheevr(jobz, range, uplo, n, A, lda, vl, vu, il, iu, abstol, mout, w, Z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_cheevr, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Cfloat, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, A, lda, vl, vu, il, iu, abstol, mout, w, Z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_cheevr_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, abstol, mout, w, dZ, lddz, isuppz, wA, ldwa, wZ, ldwz, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cheevr_gpu( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, float vl, float vu, magma_int_t il, magma_int_t iu, float abstol, magma_int_t *mout, float *w, magmaFloatComplex_ptr dZ, magma_int_t lddz, magma_int_t *isuppz, magmaFloatComplex *wA, magma_int_t ldwa, magmaFloatComplex *wZ, magma_int_t ldwz, magmaFloatComplex *work, magma_int_t lwork, float *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_cheevr_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, abstol, mout, w, dZ, lddz, isuppz, wA, ldwa, wZ, ldwz, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_cheevr_gpu, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Cfloat, Ptr{magma_int_t}, Ptr{Cfloat}, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, abstol, mout, w, dZ, lddz, isuppz, wA, ldwa, wZ, ldwz, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_cheevx(jobz, range, uplo, n, A, lda, vl, vu, il, iu, abstol, mout, w, Z, ldz, work, lwork, rwork, iwork, ifail, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cheevx( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float vl, float vu, magma_int_t il, magma_int_t iu, float abstol, magma_int_t *mout, float *w, magmaFloatComplex *Z, magma_int_t ldz, magmaFloatComplex *work, magma_int_t lwork, float *rwork, magma_int_t *iwork, magma_int_t *ifail, magma_int_t *info);
```
"""
function magma_cheevx(jobz, range, uplo, n, A, lda, vl, vu, il, iu, abstol, mout, w, Z, ldz, work, lwork, rwork, iwork, ifail, info)
    ccall((:magma_cheevx, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Cfloat, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), jobz, range, uplo, n, A, lda, vl, vu, il, iu, abstol, mout, w, Z, ldz, work, lwork, rwork, iwork, ifail, info)
end

"""
    magma_cheevx_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, abstol, mout, w, dZ, lddz, wA, ldwa, wZ, ldwz, work, lwork, rwork, iwork, ifail, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cheevx_gpu( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, float vl, float vu, magma_int_t il, magma_int_t iu, float abstol, magma_int_t *mout, float *w, magmaFloatComplex_ptr dZ, magma_int_t lddz, magmaFloatComplex *wA, magma_int_t ldwa, magmaFloatComplex *wZ, magma_int_t ldwz, magmaFloatComplex *work, magma_int_t lwork, float *rwork, magma_int_t *iwork, magma_int_t *ifail, magma_int_t *info);
```
"""
function magma_cheevx_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, abstol, mout, w, dZ, lddz, wA, ldwa, wZ, ldwz, work, lwork, rwork, iwork, ifail, info)
    ccall((:magma_cheevx_gpu, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Cfloat, Ptr{magma_int_t}, Ptr{Cfloat}, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, abstol, mout, w, dZ, lddz, wA, ldwa, wZ, ldwz, work, lwork, rwork, iwork, ifail, info)
end

"""
    magma_chegst(itype, uplo, n, A, lda, B, ldb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chegst( magma_int_t itype, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_chegst(itype, uplo, n, A, lda, B, ldb, info)
    ccall((:magma_chegst, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), itype, uplo, n, A, lda, B, ldb, info)
end

"""
    magma_chegst_gpu(itype, uplo, n, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chegst_gpu( magma_int_t itype, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_const_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_chegst_gpu(itype, uplo, n, dA, ldda, dB, lddb, info)
    ccall((:magma_chegst_gpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{magma_int_t}), itype, uplo, n, dA, ldda, dB, lddb, info)
end

"""
    magma_chegst_m(ngpu, itype, uplo, n, A, lda, B, ldb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chegst_m( magma_int_t ngpu, magma_int_t itype, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_chegst_m(ngpu, itype, uplo, n, A, lda, B, ldb, info)
    ccall((:magma_chegst_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, uplo, n, A, lda, B, ldb, info)
end

"""
    magma_chegvd(itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chegvd( magma_int_t itype, magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, float *w, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_chegvd(itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_chegvd, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_chegvd_m(ngpu, itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chegvd_m( magma_int_t ngpu, magma_int_t itype, magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, float *w, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_chegvd_m(ngpu, itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_chegvd_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_vec_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_chegvdx(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chegvdx( magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_chegvdx(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_chegvdx, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_chegvdx_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chegvdx_m( magma_int_t ngpu, magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_chegvdx_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_chegvdx_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_chegvdx_2stage(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chegvdx_2stage( magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_chegvdx_2stage(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_chegvdx_2stage, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_chegvdx_2stage_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chegvdx_2stage_m( magma_int_t ngpu, magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_chegvdx_2stage_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_chegvdx_2stage_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_chegvr(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, abstol, mout, w, Z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)

no real [sd] precisions available
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chegvr( magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, float vl, float vu, magma_int_t il, magma_int_t iu, float abstol, magma_int_t *mout, float *w, magmaFloatComplex *Z, magma_int_t ldz, magma_int_t *isuppz, magmaFloatComplex *work, magma_int_t lwork, float *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_chegvr(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, abstol, mout, w, Z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_chegvr, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Cfloat, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, abstol, mout, w, Z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_chegvx(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, abstol, mout, w, Z, ldz, work, lwork, rwork, iwork, ifail, info)

no real [sd] precisions available
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chegvx( magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, float vl, float vu, magma_int_t il, magma_int_t iu, float abstol, magma_int_t *mout, float *w, magmaFloatComplex *Z, magma_int_t ldz, magmaFloatComplex *work, magma_int_t lwork, float *rwork, magma_int_t *iwork, magma_int_t *ifail, magma_int_t *info);
```
"""
function magma_chegvx(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, abstol, mout, w, Z, ldz, work, lwork, rwork, iwork, ifail, info)
    ccall((:magma_chegvx, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Cfloat, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, abstol, mout, w, Z, ldz, work, lwork, rwork, iwork, ifail, info)
end

"""
    magma_chesv(uplo, n, nrhs, A, lda, ipiv, B, ldb, info)


### Prototype
```c
magma_int_t magma_chesv( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloatComplex *A, magma_int_t lda, magma_int_t *ipiv, magmaFloatComplex *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_chesv(uplo, n, nrhs, A, lda, ipiv, B, ldb, info)
    ccall((:magma_chesv, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, A, lda, ipiv, B, ldb, info)
end

"""
    magma_chesv_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chesv_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_chesv_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_chesv_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_chetrd(uplo, n, A, lda, d, e, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_chetrd( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float *d, float *e, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_chetrd(uplo, n, A, lda, d, e, tau, work, lwork, info)
    ccall((:magma_chetrd, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, d, e, tau, work, lwork, info)
end

"""
    magma_chetrd_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chetrd_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, float *d, float *e, magmaFloatComplex *tau, magmaFloatComplex *wA, magma_int_t ldwa, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_chetrd_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, info)
    ccall((:magma_chetrd_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, info)
end

"""
    magma_chetrd2_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, dwork, ldwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chetrd2_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, float *d, float *e, magmaFloatComplex *tau, magmaFloatComplex *wA, magma_int_t ldwa, magmaFloatComplex *work, magma_int_t lwork, magmaFloatComplex_ptr dwork, magma_int_t ldwork, magma_int_t *info);
```
"""
function magma_chetrd2_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, dwork, ldwork, info)
    ccall((:magma_chetrd2_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, dwork, ldwork, info)
end

"""
    magma_chetrd_mgpu(ngpu, nqueue, uplo, n, A, lda, d, e, tau, work, lwork, info)

TODO: rename magma_chetrd_m?
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chetrd_mgpu( magma_int_t ngpu, magma_int_t nqueue, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, float *d, float *e, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_chetrd_mgpu(ngpu, nqueue, uplo, n, A, lda, d, e, tau, work, lwork, info)
    ccall((:magma_chetrd_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, nqueue, uplo, n, A, lda, d, e, tau, work, lwork, info)
end

"""
    magma_chetrd_hb2st(uplo, n, nb, Vblksiz, A, lda, d, e, V, ldv, TAU, compT, T, ldt)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chetrd_hb2st( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, magmaFloatComplex *A, magma_int_t lda, float *d, float *e, magmaFloatComplex *V, magma_int_t ldv, magmaFloatComplex *TAU, magma_int_t compT, magmaFloatComplex *T, magma_int_t ldt);
```
"""
function magma_chetrd_hb2st(uplo, n, nb, Vblksiz, A, lda, d, e, V, ldv, TAU, compT, T, ldt)
    ccall((:magma_chetrd_hb2st, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t), uplo, n, nb, Vblksiz, A, lda, d, e, V, ldv, TAU, compT, T, ldt)
end

"""
    magma_chetrd_he2hb(uplo, n, nb, A, lda, tau, work, lwork, dT, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chetrd_he2hb( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magmaFloatComplex_ptr dT, magma_int_t *info);
```
"""
function magma_chetrd_he2hb(uplo, n, nb, A, lda, tau, work, lwork, dT, info)
    ccall((:magma_chetrd_he2hb, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, Ptr{magma_int_t}), uplo, n, nb, A, lda, tau, work, lwork, dT, info)
end

"""
    magma_chetrd_he2hb_mgpu(uplo, n, nb, A, lda, tau, work, lwork, dAmgpu, ldda, dTmgpu, lddt, ngpu, distblk, queues, nqueue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chetrd_he2hb_mgpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magmaFloatComplex_ptr dAmgpu[], magma_int_t ldda, magmaFloatComplex_ptr dTmgpu[], magma_int_t lddt, magma_int_t ngpu, magma_int_t distblk, magma_queue_t queues[][20], magma_int_t nqueue, magma_int_t *info);
```
"""
function magma_chetrd_he2hb_mgpu(uplo, n, nb, A, lda, tau, work, lwork, dAmgpu, ldda, dTmgpu, lddt, ngpu, distblk, queues, nqueue, info)
    ccall((:magma_chetrd_he2hb_mgpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{20, magma_queue_t}}, magma_int_t, Ptr{magma_int_t}), uplo, n, nb, A, lda, tau, work, lwork, dAmgpu, ldda, dTmgpu, lddt, ngpu, distblk, queues, nqueue, info)
end

"""
    magma_chetrf(uplo, n, A, lda, ipiv, info)


### Prototype
```c
magma_int_t magma_chetrf( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_chetrf(uplo, n, A, lda, ipiv, info)
    ccall((:magma_chetrf, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, A, lda, ipiv, info)
end

"""
    magma_chetrf_gpu(uplo, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_chetrf_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_chetrf_gpu(uplo, n, dA, ldda, ipiv, info)
    ccall((:magma_chetrf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, dA, ldda, ipiv, info)
end

"""
    magma_chetrf_aasen(uplo, cpu_panel, n, A, lda, ipiv, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chetrf_aasen( magma_uplo_t uplo, magma_int_t cpu_panel, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_chetrf_aasen(uplo, cpu_panel, n, A, lda, ipiv, info)
    ccall((:magma_chetrf_aasen, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, cpu_panel, n, A, lda, ipiv, info)
end

"""
    magma_chetrf_nopiv(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_chetrf_nopiv( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_chetrf_nopiv(uplo, n, A, lda, info)
    ccall((:magma_chetrf_nopiv, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_chetrf_nopiv_cpu(uplo, n, ib, A, lda, info)


### Prototype
```c
magma_int_t magma_chetrf_nopiv_cpu( magma_uplo_t uplo, magma_int_t n, magma_int_t ib, magmaFloatComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_chetrf_nopiv_cpu(uplo, n, ib, A, lda, info)
    ccall((:magma_chetrf_nopiv_cpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, ib, A, lda, info)
end

"""
    magma_chetrf_nopiv_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_chetrf_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_chetrf_nopiv_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_chetrf_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_chetrs_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_chetrs_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_chetrs_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_chetrs_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_clabrd_gpu(m, n, nb, A, lda, dA, ldda, d, e, tauq, taup, X, ldx, dX, lddx, Y, ldy, dY, lddy, work, lwork, queue)


### Prototype
```c
magma_int_t magma_clabrd_gpu( magma_int_t m, magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex_ptr dA, magma_int_t ldda, float *d, float *e, magmaFloatComplex *tauq, magmaFloatComplex *taup, magmaFloatComplex *X, magma_int_t ldx, magmaFloatComplex_ptr dX, magma_int_t lddx, magmaFloatComplex *Y, magma_int_t ldy, magmaFloatComplex_ptr dY, magma_int_t lddy, magmaFloatComplex *work, magma_int_t lwork, magma_queue_t queue);
```
"""
function magma_clabrd_gpu(m, n, nb, A, lda, dA, ldda, d, e, tauq, taup, X, ldx, dX, lddx, Y, ldy, dY, lddy, work, lwork, queue)
    ccall((:magma_clabrd_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_queue_t), m, n, nb, A, lda, dA, ldda, d, e, tauq, taup, X, ldx, dX, lddx, Y, ldy, dY, lddy, work, lwork, queue)
end

"""
    magma_clahef_gpu(uplo, n, nb, kb, dA, ldda, ipiv, dW, lddw, queues, info)


### Prototype
```c
magma_int_t magma_clahef_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t *kb, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaFloatComplex_ptr dW, magma_int_t lddw, magma_queue_t queues[], magma_int_t *info);
```
"""
function magma_clahef_gpu(uplo, n, nb, kb, dA, ldda, ipiv, dW, lddw, queues, info)
    ccall((:magma_clahef_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_queue_t}, Ptr{magma_int_t}), uplo, n, nb, kb, dA, ldda, ipiv, dW, lddw, queues, info)
end

"""
    magma_clahr2(n, k, nb, dA, ldda, dV, lddv, A, lda, tau, T, ldt, Y, ldy, queue)


### Prototype
```c
magma_int_t magma_clahr2( magma_int_t n, magma_int_t k, magma_int_t nb, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dV, magma_int_t lddv, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *T, magma_int_t ldt, magmaFloatComplex *Y, magma_int_t ldy, magma_queue_t queue);
```
"""
function magma_clahr2(n, k, nb, dA, ldda, dV, lddv, A, lda, tau, T, ldt, Y, ldy, queue)
    ccall((:magma_clahr2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_queue_t), n, k, nb, dA, ldda, dV, lddv, A, lda, tau, T, ldt, Y, ldy, queue)
end

"""
    magma_clahr2_m(n, k, nb, A, lda, tau, T, ldt, Y, ldy, data)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_clahr2_m( magma_int_t n, magma_int_t k, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *T, magma_int_t ldt, magmaFloatComplex *Y, magma_int_t ldy, struct cgehrd_data *data);
```
"""
function magma_clahr2_m(n, k, nb, A, lda, tau, T, ldt, Y, ldy, data)
    ccall((:magma_clahr2_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{cgehrd_data}), n, k, nb, A, lda, tau, T, ldt, Y, ldy, data)
end

"""
    magma_clahru(n, ihi, k, nb, A, lda, dA, ldda, dY, lddy, dV, lddv, dT, dwork, queue)


### Prototype
```c
magma_int_t magma_clahru( magma_int_t n, magma_int_t ihi, magma_int_t k, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dY, magma_int_t lddy, magmaFloatComplex_ptr dV, magma_int_t lddv, magmaFloatComplex_ptr dT, magmaFloatComplex_ptr dwork, magma_queue_t queue);
```
"""
function magma_clahru(n, ihi, k, nb, A, lda, dA, ldda, dY, lddy, dV, lddv, dT, dwork, queue)
    ccall((:magma_clahru, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magma_queue_t), n, ihi, k, nb, A, lda, dA, ldda, dY, lddy, dV, lddv, dT, dwork, queue)
end

"""
    magma_clahru_m(n, ihi, k, nb, A, lda, data)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_clahru_m( magma_int_t n, magma_int_t ihi, magma_int_t k, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, struct cgehrd_data *data);
```
"""
function magma_clahru_m(n, ihi, k, nb, A, lda, data)
    ccall((:magma_clahru_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{cgehrd_data}), n, ihi, k, nb, A, lda, data)
end

"""
    magma_claqps(m, n, offset, nb, kb, A, lda, dA, ldda, jpvt, tau, vn1, vn2, auxv, F, ldf, dF, lddf)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_claqps( magma_int_t m, magma_int_t n, magma_int_t offset, magma_int_t nb, magma_int_t *kb, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *jpvt, magmaFloatComplex *tau, float *vn1, float *vn2, magmaFloatComplex *auxv, magmaFloatComplex *F, magma_int_t ldf, magmaFloatComplex_ptr dF, magma_int_t lddf);
```
"""
function magma_claqps(m, n, offset, nb, kb, A, lda, dA, ldda, jpvt, tau, vn1, vn2, auxv, F, ldf, dF, lddf)
    ccall((:magma_claqps, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t), m, n, offset, nb, kb, A, lda, dA, ldda, jpvt, tau, vn1, vn2, auxv, F, ldf, dF, lddf)
end

"""
    magma_claqps_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, tau, vn1, vn2, dauxv, dF, lddf)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_claqps_gpu( magma_int_t m, magma_int_t n, magma_int_t offset, magma_int_t nb, magma_int_t *kb, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *jpvt, magmaFloatComplex *tau, float *vn1, float *vn2, magmaFloatComplex_ptr dauxv, magmaFloatComplex_ptr dF, magma_int_t lddf);
```
"""
function magma_claqps_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, tau, vn1, vn2, dauxv, dF, lddf)
    ccall((:magma_claqps_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, Ptr{Cfloat}, Ptr{Cfloat}, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magma_int_t), m, n, offset, nb, kb, dA, ldda, jpvt, tau, vn1, vn2, dauxv, dF, lddf)
end

"""
    magma_claqps2_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, dtau, dvn1, dvn2, dauxv, dF, lddf, dlsticcs, queue)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_claqps2_gpu( magma_int_t m, magma_int_t n, magma_int_t offset, magma_int_t nb, magma_int_t *kb, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *jpvt, magmaFloatComplex_ptr dtau, magmaFloat_ptr dvn1, magmaFloat_ptr dvn2, magmaFloatComplex_ptr dauxv, magmaFloatComplex_ptr dF, magma_int_t lddf, magmaFloat_ptr dlsticcs, magma_queue_t queue);
```
"""
function magma_claqps2_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, dtau, dvn1, dvn2, dauxv, dF, lddf, dlsticcs, queue)
    ccall((:magma_claqps2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, magmaFloatComplex_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloatComplex_ptr, magmaFloatComplex_ptr, magma_int_t, magmaFloat_ptr, magma_queue_t), m, n, offset, nb, kb, dA, ldda, jpvt, dtau, dvn1, dvn2, dauxv, dF, lddf, dlsticcs, queue)
end

"""
    magma_clarf_gpu(m, n, dv, dtau, dC, lddc, queue)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_clarf_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dv, magmaFloatComplex_const_ptr dtau, magmaFloatComplex_ptr dC, magma_int_t lddc, magma_queue_t queue);
```
"""
function magma_clarf_gpu(m, n, dv, dtau, dC, lddc, queue)
    ccall((:magma_clarf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magmaFloatComplex_const_ptr, magmaFloatComplex_ptr, magma_int_t, magma_queue_t), m, n, dv, dtau, dC, lddc, queue)
end

"""
    magma_clarfb2_gpu(m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, queue)

in cgeqr2x_gpu-v3.cpp
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_clarfb2_gpu( magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex_const_ptr dV, magma_int_t lddv, magmaFloatComplex_const_ptr dT, magma_int_t lddt, magmaFloatComplex_ptr dC, magma_int_t lddc, magmaFloatComplex_ptr dwork, magma_int_t ldwork, magma_queue_t queue);
```
"""
function magma_clarfb2_gpu(m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, queue)
    ccall((:magma_clarfb2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t), m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, queue)
end

"""
    magma_clatrd(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, queue)


### Prototype
```c
magma_int_t magma_clatrd( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, float *e, magmaFloatComplex *tau, magmaFloatComplex *W, magma_int_t ldw, magmaFloatComplex *work, magma_int_t lwork, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dW, magma_int_t lddw, magma_queue_t queue);
```
"""
function magma_clatrd(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, queue)
    ccall((:magma_clatrd, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t), uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, queue)
end

"""
    magma_clatrd2(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, dwork, ldwork, queue)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_clatrd2( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magmaFloatComplex *A, magma_int_t lda, float *e, magmaFloatComplex *tau, magmaFloatComplex *W, magma_int_t ldw, magmaFloatComplex *work, magma_int_t lwork, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dW, magma_int_t lddw, magmaFloatComplex_ptr dwork, magma_int_t ldwork, magma_queue_t queue);
```
"""
function magma_clatrd2(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, dwork, ldwork, queue)
    ccall((:magma_clatrd2, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t), uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, dwork, ldwork, queue)
end

"""
    magma_clatrd_mgpu(ngpu, uplo, n, nb, nb0, A, lda, e, tau, W, ldw, dA, ldda, offset, dW, lddw, hwork, lhwork, dwork, ldwork, queues)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_clatrd_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t nb0, magmaFloatComplex *A, magma_int_t lda, float *e, magmaFloatComplex *tau, magmaFloatComplex *W, magma_int_t ldw, magmaFloatComplex_ptr dA[], magma_int_t ldda, magma_int_t offset, magmaFloatComplex_ptr dW[], magma_int_t lddw, magmaFloatComplex *hwork, magma_int_t lhwork, magmaFloatComplex_ptr dwork[], magma_int_t ldwork, magma_queue_t queues[]);
```
"""
function magma_clatrd_mgpu(ngpu, uplo, n, nb, nb0, A, lda, e, tau, W, ldw, dA, ldda, offset, dW, lddw, hwork, lhwork, dwork, ldwork, queues)
    ccall((:magma_clatrd_mgpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magma_queue_t}), ngpu, uplo, n, nb, nb0, A, lda, e, tau, W, ldw, dA, ldda, offset, dW, lddw, hwork, lhwork, dwork, ldwork, queues)
end

"""
    magma_clatrsd(uplo, trans, diag, normin, n, A, lda, lambda, x, scale, cnorm, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_clatrsd( magma_uplo_t uplo, magma_trans_t trans, magma_diag_t diag, magma_bool_t normin, magma_int_t n, const magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex lambda, magmaFloatComplex *x, float *scale, float *cnorm, magma_int_t *info);
```
"""
function magma_clatrsd(uplo, trans, diag, normin, n, A, lda, lambda, x, scale, cnorm, info)
    ccall((:magma_clatrsd, libmagma), magma_int_t, (magma_uplo_t, magma_trans_t, magma_diag_t, magma_bool_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magma_int_t}), uplo, trans, diag, normin, n, A, lda, lambda, x, scale, cnorm, info)
end

"""
    magma_clauum(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_clauum( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_clauum(uplo, n, A, lda, info)
    ccall((:magma_clauum, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_clauum_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_clauum_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_clauum_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_clauum_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_cposv(uplo, n, nrhs, A, lda, B, ldb, info)

------------------------------------------------------------ zpo routines
### Prototype
```c
magma_int_t magma_cposv( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_cposv(uplo, n, nrhs, A, lda, B, ldb, info)
    ccall((:magma_cposv, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, A, lda, B, ldb, info)
end

"""
    magma_cposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)


### Prototype
```c
magma_int_t magma_cposv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_cposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_cposv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_cpotf2_gpu(uplo, n, dA, ldda, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cpotf2_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_cpotf2_gpu(uplo, n, dA, ldda, queue, info)
    ccall((:magma_cpotf2_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magma_queue_t, Ptr{magma_int_t}), uplo, n, dA, ldda, queue, info)
end

"""
    magma_cpotrf_rectile_native(uplo, n, recnb, dA, ldda, gbstep, dinfo, info, queue)


### Prototype
```c
magma_int_t magma_cpotrf_rectile_native( magma_uplo_t uplo, magma_int_t n, magma_int_t recnb, magmaFloatComplex* dA, magma_int_t ldda, magma_int_t gbstep, magma_int_t *dinfo, magma_int_t *info, magma_queue_t queue);
```
"""
function magma_cpotrf_rectile_native(uplo, n, recnb, dA, ldda, gbstep, dinfo, info, queue)
    ccall((:magma_cpotrf_rectile_native, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), uplo, n, recnb, dA, ldda, gbstep, dinfo, info, queue)
end

"""
    magma_cpotrf(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_cpotrf( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_cpotrf(uplo, n, A, lda, info)
    ccall((:magma_cpotrf, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_cpotrf_expert_gpu(uplo, n, dA, ldda, info, nb, mode)


### Prototype
```c
magma_int_t magma_cpotrf_expert_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info, magma_int_t nb, magma_mode_t mode );
```
"""
function magma_cpotrf_expert_gpu(uplo, n, dA, ldda, info, nb, mode)
    ccall((:magma_cpotrf_expert_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_mode_t), uplo, n, dA, ldda, info, nb, mode)
end

"""
    magma_cpotrf_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_cpotrf_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_cpotrf_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_cpotrf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_cpotrf_native(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_cpotrf_native( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magma_cpotrf_native(uplo, n, dA, ldda, info)
    ccall((:magma_cpotrf_native, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_cpotrf_m(ngpu, uplo, n, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cpotrf_m( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_cpotrf_m(ngpu, uplo, n, A, lda, info)
    ccall((:magma_cpotrf_m, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, A, lda, info)
end

"""
    magma_cpotrf_mgpu(ngpu, uplo, n, d_lA, ldda, info)


### Prototype
```c
magma_int_t magma_cpotrf_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr d_lA[], magma_int_t ldda, magma_int_t *info);
```
"""
function magma_cpotrf_mgpu(ngpu, uplo, n, d_lA, ldda, info)
    ccall((:magma_cpotrf_mgpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, d_lA, ldda, info)
end

"""
    magma_cpotrf_mgpu_right(ngpu, uplo, n, d_lA, ldda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cpotrf_mgpu_right( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr d_lA[], magma_int_t ldda, magma_int_t *info);
```
"""
function magma_cpotrf_mgpu_right(ngpu, uplo, n, d_lA, ldda, info)
    ccall((:magma_cpotrf_mgpu_right, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, d_lA, ldda, info)
end

"""
    magma_cpotrf3_mgpu(ngpu, uplo, m, n, off_i, off_j, nb, d_lA, ldda, d_lP, lddp, A, lda, h, queues, events, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cpotrf3_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t off_i, magma_int_t off_j, magma_int_t nb, magmaFloatComplex_ptr d_lA[], magma_int_t ldda, magmaFloatComplex_ptr d_lP[], magma_int_t lddp, magmaFloatComplex *A, magma_int_t lda, magma_int_t h, magma_queue_t queues[][3], magma_event_t events[][5], magma_int_t *info);
```
"""
function magma_cpotrf3_mgpu(ngpu, uplo, m, n, off_i, off_j, nb, d_lA, ldda, d_lP, lddp, A, lda, h, queues, events, info)
    ccall((:magma_cpotrf3_mgpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magmaFloatComplex_ptr}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, Ptr{NTuple{3, magma_queue_t}}, Ptr{NTuple{5, magma_event_t}}, Ptr{magma_int_t}), ngpu, uplo, m, n, off_i, off_j, nb, d_lA, ldda, d_lP, lddp, A, lda, h, queues, events, info)
end

"""
    magma_cpotri(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_cpotri( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_cpotri(uplo, n, A, lda, info)
    ccall((:magma_cpotri, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_cpotri_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_cpotri_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_cpotri_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_cpotri_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_cpotrs_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)


### Prototype
```c
magma_int_t magma_cpotrs_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_cpotrs_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_cpotrs_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_csysv_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_csysv_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_csysv_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_csysv_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_csytrf_nopiv_cpu(uplo, n, ib, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_csytrf_nopiv_cpu( magma_uplo_t uplo, magma_int_t n, magma_int_t ib, magmaFloatComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_csytrf_nopiv_cpu(uplo, n, ib, A, lda, info)
    ccall((:magma_csytrf_nopiv_cpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), uplo, n, ib, A, lda, info)
end

"""
    magma_csytrf_nopiv_gpu(uplo, n, dA, ldda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_csytrf_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_csytrf_nopiv_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_csytrf_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_csytrs_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_csytrs_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_csytrs_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_csytrs_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_cstedx(range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, dwork, info)

------------------------------------------------------------ zst routines
### Prototype
```c
magma_int_t magma_cstedx( magma_range_t range, magma_int_t n, float vl, float vu, magma_int_t il, magma_int_t iu, float *d, float *e, magmaFloatComplex *Z, magma_int_t ldz, float *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magmaFloat_ptr dwork, magma_int_t *info);
```
"""
function magma_cstedx(range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, dwork, info)
    ccall((:magma_cstedx, libmagma), magma_int_t, (magma_range_t, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magmaFloat_ptr, Ptr{magma_int_t}), range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, dwork, info)
end

"""
    magma_cstedx_m(ngpu, range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cstedx_m( magma_int_t ngpu, magma_range_t range, magma_int_t n, float vl, float vu, magma_int_t il, magma_int_t iu, float *d, float *e, magmaFloatComplex *Z, magma_int_t ldz, float *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_cstedx_m(ngpu, range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_cstedx_m, libmagma), magma_int_t, (magma_int_t, magma_range_t, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_ctrevc3(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, rwork, info)

------------------------------------------------------------ ztr routines
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ctrevc3( magma_side_t side, magma_vec_t howmany, magma_int_t *select, magma_int_t n, magmaFloatComplex *T, magma_int_t ldt, magmaFloatComplex *VL, magma_int_t ldvl, magmaFloatComplex *VR, magma_int_t ldvr, magma_int_t mm, magma_int_t *mout, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_ctrevc3(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, rwork, info)
    ccall((:magma_ctrevc3, libmagma), magma_int_t, (magma_side_t, magma_vec_t, Ptr{magma_int_t}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}), side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, rwork, info)
end

"""
    magma_ctrevc3_mt(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, rwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ctrevc3_mt( magma_side_t side, magma_vec_t howmany, magma_int_t *select, magma_int_t n, magmaFloatComplex *T, magma_int_t ldt, magmaFloatComplex *VL, magma_int_t ldvl, magmaFloatComplex *VR, magma_int_t ldvr, magma_int_t mm, magma_int_t *mout, magmaFloatComplex *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_ctrevc3_mt(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, rwork, info)
    ccall((:magma_ctrevc3_mt, libmagma), magma_int_t, (magma_side_t, magma_vec_t, Ptr{magma_int_t}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}), side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, rwork, info)
end

"""
    magma_ctrsm_m(ngpu, side, uplo, transa, diag, m, n, alpha, A, lda, B, ldb)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ctrsm_m( magma_int_t ngpu, magma_side_t side, magma_uplo_t uplo, magma_trans_t transa, magma_diag_t diag, magma_int_t m, magma_int_t n, magmaFloatComplex alpha, const magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *B, magma_int_t ldb);
```
"""
function magma_ctrsm_m(ngpu, side, uplo, transa, diag, m, n, alpha, A, lda, B, ldb)
    ccall((:magma_ctrsm_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t), ngpu, side, uplo, transa, diag, m, n, alpha, A, lda, B, ldb)
end

"""
    magma_ctrtri(uplo, diag, n, A, lda, info)


### Prototype
```c
magma_int_t magma_ctrtri( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_ctrtri(uplo, diag, n, A, lda, info)
    ccall((:magma_ctrtri, libmagma), magma_int_t, (magma_uplo_t, magma_diag_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), uplo, diag, n, A, lda, info)
end

"""
    magma_ctrtri_gpu(uplo, diag, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_ctrtri_gpu( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_ctrtri_gpu(uplo, diag, n, dA, ldda, info)
    ccall((:magma_ctrtri_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_diag_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), uplo, diag, n, dA, ldda, info)
end

"""
    magma_cungbr(vect, m, n, k, A, lda, tau, work, lwork, info)

------------------------------------------------------------ zun routines
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cungbr( magma_vect_t vect, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cungbr(vect, m, n, k, A, lda, tau, work, lwork, info)
    ccall((:magma_cungbr, libmagma), magma_int_t, (magma_vect_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), vect, m, n, k, A, lda, tau, work, lwork, info)
end

"""
    magma_cunghr(n, ilo, ihi, A, lda, tau, dT, nb, info)


### Prototype
```c
magma_int_t magma_cunghr( magma_int_t n, magma_int_t ilo, magma_int_t ihi, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_cunghr(n, ilo, ihi, A, lda, tau, dT, nb, info)
    ccall((:magma_cunghr, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, dT, nb, info)
end

"""
    magma_cunghr_m(n, ilo, ihi, A, lda, tau, T, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cunghr_m( magma_int_t n, magma_int_t ilo, magma_int_t ihi, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *T, magma_int_t nb, magma_int_t *info);
```
"""
function magma_cunghr_m(n, ilo, ihi, A, lda, tau, T, nb, info)
    ccall((:magma_cunghr_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, T, nb, info)
end

"""
    magma_cunglq(m, n, k, A, lda, tau, dT, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cunglq( magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_cunglq(m, n, k, A, lda, tau, dT, nb, info)
    ccall((:magma_cunglq, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, A, lda, tau, dT, nb, info)
end

"""
    magma_cungqr(m, n, k, A, lda, tau, dT, nb, info)


### Prototype
```c
magma_int_t magma_cungqr( magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_cungqr(m, n, k, A, lda, tau, dT, nb, info)
    ccall((:magma_cungqr, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, A, lda, tau, dT, nb, info)
end

"""
    magma_cungqr_gpu(m, n, k, dA, ldda, tau, dT, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cungqr_gpu( magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex *tau, magmaFloatComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_cungqr_gpu(m, n, k, dA, ldda, tau, dT, nb, info)
    ccall((:magma_cungqr_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, dA, ldda, tau, dT, nb, info)
end

"""
    magma_cungqr_m(m, n, k, A, lda, tau, T, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cungqr_m( magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *T, magma_int_t nb, magma_int_t *info);
```
"""
function magma_cungqr_m(m, n, k, A, lda, tau, T, nb, info)
    ccall((:magma_cungqr_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), m, n, k, A, lda, tau, T, nb, info)
end

"""
    magma_cungqr2(m, n, k, A, lda, tau, info)


### Prototype
```c
magma_int_t magma_cungqr2( magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magma_int_t *info);
```
"""
function magma_cungqr2(m, n, k, A, lda, tau, info)
    ccall((:magma_cungqr2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magma_int_t}), m, n, k, A, lda, tau, info)
end

"""
    magma_cunmbr(vect, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_cunmbr( magma_vect_t vect, magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *C, magma_int_t ldc, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cunmbr(vect, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_cunmbr, libmagma), magma_int_t, (magma_vect_t, magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), vect, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_cunmlq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_cunmlq( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *C, magma_int_t ldc, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cunmlq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_cunmlq, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_cunmrq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_cunmrq( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *C, magma_int_t ldc, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cunmrq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_cunmrq, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_cunmql(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_cunmql( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *C, magma_int_t ldc, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cunmql(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_cunmql, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_cunmql2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cunmql2_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex *tau, magmaFloatComplex_ptr dC, magma_int_t lddc, const magmaFloatComplex *wA, magma_int_t ldwa, magma_int_t *info);
```
"""
function magma_cunmql2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
    ccall((:magma_cunmql2_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
end

"""
    magma_cunmqr(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_cunmqr( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *C, magma_int_t ldc, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cunmqr(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_cunmqr, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_cunmqr_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, hwork, lwork, dT, nb, info)


### Prototype
```c
magma_int_t magma_cunmqr_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magmaFloatComplex const *tau, magmaFloatComplex_ptr dC, magma_int_t lddc, magmaFloatComplex *hwork, magma_int_t lwork, magmaFloatComplex_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_cunmqr_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, hwork, lwork, dT, nb, info)
    ccall((:magma_cunmqr_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, tau, dC, lddc, hwork, lwork, dT, nb, info)
end

"""
    magma_cunmqr2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cunmqr2_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex *tau, magmaFloatComplex_ptr dC, magma_int_t lddc, const magmaFloatComplex *wA, magma_int_t ldwa, magma_int_t *info);
```
"""
function magma_cunmqr2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
    ccall((:magma_cunmqr2_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
end

"""
    magma_cunmqr_m(ngpu, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cunmqr_m( magma_int_t ngpu, magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *C, magma_int_t ldc, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cunmqr_m(ngpu, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_cunmqr_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_cunmtr(side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_cunmtr( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *C, magma_int_t ldc, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cunmtr(side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_cunmtr, libmagma), magma_int_t, (magma_side_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_cunmtr_gpu(side, uplo, trans, m, n, dA, ldda, tau, dC, lddc, wA, ldwa, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cunmtr_gpu( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_int_t m, magma_int_t n, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaFloatComplex *tau, magmaFloatComplex_ptr dC, magma_int_t lddc, const magmaFloatComplex *wA, magma_int_t ldwa, magma_int_t *info);
```
"""
function magma_cunmtr_gpu(side, uplo, trans, m, n, dA, ldda, tau, dC, lddc, wA, ldwa, info)
    ccall((:magma_cunmtr_gpu, libmagma), magma_int_t, (magma_side_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magmaFloatComplex_ptr, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), side, uplo, trans, m, n, dA, ldda, tau, dC, lddc, wA, ldwa, info)
end

"""
    magma_cunmtr_m(ngpu, side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_cunmtr_m( magma_int_t ngpu, magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_int_t m, magma_int_t n, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *tau, magmaFloatComplex *C, magma_int_t ldc, magmaFloatComplex *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_cunmtr_m(ngpu, side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_cunmtr_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}), ngpu, side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_c_isnan(x)


### Prototype
```c
int magma_c_isnan( magmaFloatComplex x );
```
"""
function magma_c_isnan(x)
    ccall((:magma_c_isnan, libmagma), Cint, (magmaFloatComplex,), x)
end

"""
    magma_c_isinf(x)


### Prototype
```c
int magma_c_isinf( magmaFloatComplex x );
```
"""
function magma_c_isinf(x)
    ccall((:magma_c_isinf, libmagma), Cint, (magmaFloatComplex,), x)
end

"""
    magma_c_isnan_inf(x)


### Prototype
```c
int magma_c_isnan_inf( magmaFloatComplex x );
```
"""
function magma_c_isnan_inf(x)
    ccall((:magma_c_isnan_inf, libmagma), Cint, (magmaFloatComplex,), x)
end

"""
    magma_cmake_lwork(lwork)


### Prototype
```c
magmaFloatComplex magma_cmake_lwork( magma_int_t lwork );
```
"""
function magma_cmake_lwork(lwork)
    ccall((:magma_cmake_lwork, libmagma), magmaFloatComplex, (magma_int_t,), lwork)
end

"""
    magma_cnan_inf(uplo, m, n, A, lda, cnt_nan, cnt_inf)


### Prototype
```c
magma_int_t magma_cnan_inf( magma_uplo_t uplo, magma_int_t m, magma_int_t n, const magmaFloatComplex *A, magma_int_t lda, magma_int_t *cnt_nan, magma_int_t *cnt_inf);
```
"""
function magma_cnan_inf(uplo, m, n, A, lda, cnt_nan, cnt_inf)
    ccall((:magma_cnan_inf, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, m, n, A, lda, cnt_nan, cnt_inf)
end

"""
    magma_cnan_inf_gpu(uplo, m, n, dA, ldda, cnt_nan, cnt_inf, queue)


### Prototype
```c
magma_int_t magma_cnan_inf_gpu( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magma_int_t *cnt_nan, magma_int_t *cnt_inf, magma_queue_t queue);
```
"""
function magma_cnan_inf_gpu(uplo, m, n, dA, ldda, cnt_nan, cnt_inf, queue)
    ccall((:magma_cnan_inf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), uplo, m, n, dA, ldda, cnt_nan, cnt_inf, queue)
end

"""
    magma_cprint(m, n, A, lda)


### Prototype
```c
void magma_cprint( magma_int_t m, magma_int_t n, const magmaFloatComplex *A, magma_int_t lda);
```
"""
function magma_cprint(m, n, A, lda)
    ccall((:magma_cprint, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t), m, n, A, lda)
end

"""
    magma_cprint_gpu(m, n, dA, ldda, queue)


### Prototype
```c
void magma_cprint_gpu( magma_int_t m, magma_int_t n, magmaFloatComplex_const_ptr dA, magma_int_t ldda, magma_queue_t queue);
```
"""
function magma_cprint_gpu(m, n, dA, ldda, queue)
    ccall((:magma_cprint_gpu, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloatComplex_const_ptr, magma_int_t, magma_queue_t), m, n, dA, ldda, queue)
end

"""
    magma_cpanel_to_q(uplo, ib, A, lda, work)


### Prototype
```c
void magma_cpanel_to_q( magma_uplo_t uplo, magma_int_t ib, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *work);
```
"""
function magma_cpanel_to_q(uplo, ib, A, lda, work)
    ccall((:magma_cpanel_to_q, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}), uplo, ib, A, lda, work)
end

"""
    magma_cq_to_panel(uplo, ib, A, lda, work)


### Prototype
```c
void magma_cq_to_panel( magma_uplo_t uplo, magma_int_t ib, magmaFloatComplex *A, magma_int_t lda, magmaFloatComplex *work);
```
"""
function magma_cq_to_panel(uplo, ib, A, lda, work)
    ccall((:magma_cq_to_panel, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}), uplo, ib, A, lda, work)
end

"""
    magmablas_cextract_diag_sqrt(m, n, dA, ldda, dD, incd, queue)

auxiliary routines for posv-irgmres  
### Prototype
```c
void magmablas_cextract_diag_sqrt( magma_int_t m, magma_int_t n, magmaFloatComplex* dA, magma_int_t ldda, float* dD, magma_int_t incd, magma_queue_t queue);
```
"""
function magmablas_cextract_diag_sqrt(m, n, dA, ldda, dD, incd, queue)
    ccall((:magmablas_cextract_diag_sqrt, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t), m, n, dA, ldda, dD, incd, queue)
end

"""
    magmablas_cscal_shift_hpd(uplo, n, dA, ldda, dD, incd, miu, cn, eps, queue)


### Prototype
```c
void magmablas_cscal_shift_hpd( magma_uplo_t uplo, int n, magmaFloatComplex* dA, int ldda, float* dD, int incd, float miu, float cn, float eps, magma_queue_t queue);
```
"""
function magmablas_cscal_shift_hpd(uplo, n, dA, ldda, dD, incd, miu, cn, eps, queue)
    ccall((:magmablas_cscal_shift_hpd, libmagma), Cvoid, (magma_uplo_t, Cint, Ptr{magmaFloatComplex}, Cint, Ptr{Cfloat}, Cint, Cfloat, Cfloat, Cfloat, magma_queue_t), uplo, n, dA, ldda, dD, incd, miu, cn, eps, queue)
end

"""
    magmablas_cdimv_invert(n, alpha, dD, incd, dx, incx, beta, dy, incy, queue)


### Prototype
```c
void magmablas_cdimv_invert( magma_int_t n, magmaFloatComplex alpha, magmaFloatComplex* dD, magma_int_t incd, magmaFloatComplex* dx, magma_int_t incx, magmaFloatComplex beta, magmaFloatComplex* dy, magma_int_t incy, magma_queue_t queue);
```
"""
function magmablas_cdimv_invert(n, alpha, dD, incd, dx, incx, beta, dy, incy, queue)
    ccall((:magmablas_cdimv_invert, libmagma), Cvoid, (magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex}, magma_int_t, Ptr{magmaFloatComplex}, magma_int_t, magmaFloatComplex, Ptr{magmaFloatComplex}, magma_int_t, magma_queue_t), n, alpha, dD, incd, dx, incx, beta, dy, incy, queue)
end

"""
    dgehrd_data

//**
Structure containing matrices for multi-GPU dgehrd.

- dA  is distributed column block-cyclic across GPUs.
- dV  is duplicated on all GPUs.
- dVd is distributed row block-cyclic across GPUs (TODO: verify).
- dY  is partial results on each GPU in dlahr2,
then complete results are duplicated on all GPUs for dlahru.
- dW  is local to each GPU (workspace).
- dTi is duplicated on all GPUs.

@ingroup magma_gehrd
"""
struct dgehrd_data
    ngpu::magma_int_t
    ldda::magma_int_t
    ldv::magma_int_t
    ldvd::magma_int_t
    dA::NTuple{8, magmaDouble_ptr}
    dV::NTuple{8, magmaDouble_ptr}
    dVd::NTuple{8, magmaDouble_ptr}
    dY::NTuple{8, magmaDouble_ptr}
    dW::NTuple{8, magmaDouble_ptr}
    dTi::NTuple{8, magmaDouble_ptr}
    queues::NTuple{8, magma_queue_t}
end

# no prototype is found for this function at magma_d.h:27:13, please use with caution
"""
    magma_get_dlaex3_m_nb()


### Prototype
```c
magma_int_t magma_get_dlaex3_m_nb();
```
"""
function magma_get_dlaex3_m_nb()
    ccall((:magma_get_dlaex3_m_nb, libmagma), magma_int_t, ())
end

"""
    magma_get_dpotrf_nb(n)

Cholesky, LU, symmetric indefinite
### Prototype
```c
magma_int_t magma_get_dpotrf_nb( magma_int_t n );
```
"""
function magma_get_dpotrf_nb(n)
    ccall((:magma_get_dpotrf_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_dgetrf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_dgetrf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_dgetrf_nb(m, n)
    ccall((:magma_get_dgetrf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_dgetrf_native_nb(m, n)


### Prototype
```c
magma_int_t magma_get_dgetrf_native_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_dgetrf_native_nb(m, n)
    ccall((:magma_get_dgetrf_native_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_dgetri_nb(n)


### Prototype
```c
magma_int_t magma_get_dgetri_nb( magma_int_t n );
```
"""
function magma_get_dgetri_nb(n)
    ccall((:magma_get_dgetri_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_dsytrf_nb(n)


### Prototype
```c
magma_int_t magma_get_dsytrf_nb( magma_int_t n );
```
"""
function magma_get_dsytrf_nb(n)
    ccall((:magma_get_dsytrf_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_dsytrf_nopiv_nb(n)


### Prototype
```c
magma_int_t magma_get_dsytrf_nopiv_nb( magma_int_t n );
```
"""
function magma_get_dsytrf_nopiv_nb(n)
    ccall((:magma_get_dsytrf_nopiv_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_dsytrf_aasen_nb(n)


### Prototype
```c
magma_int_t magma_get_dsytrf_aasen_nb( magma_int_t n );
```
"""
function magma_get_dsytrf_aasen_nb(n)
    ccall((:magma_get_dsytrf_aasen_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_dgeqp3_nb(m, n)

QR
### Prototype
```c
magma_int_t magma_get_dgeqp3_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_dgeqp3_nb(m, n)
    ccall((:magma_get_dgeqp3_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_dgeqrf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_dgeqrf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_dgeqrf_nb(m, n)
    ccall((:magma_get_dgeqrf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_dgeqlf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_dgeqlf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_dgeqlf_nb(m, n)
    ccall((:magma_get_dgeqlf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_dgelqf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_dgelqf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_dgelqf_nb(m, n)
    ccall((:magma_get_dgelqf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_dgehrd_nb(n)

eigenvalues
### Prototype
```c
magma_int_t magma_get_dgehrd_nb( magma_int_t n );
```
"""
function magma_get_dgehrd_nb(n)
    ccall((:magma_get_dgehrd_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_dsytrd_nb(n)


### Prototype
```c
magma_int_t magma_get_dsytrd_nb( magma_int_t n );
```
"""
function magma_get_dsytrd_nb(n)
    ccall((:magma_get_dsytrd_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_dsygst_nb(n)


### Prototype
```c
magma_int_t magma_get_dsygst_nb( magma_int_t n );
```
"""
function magma_get_dsygst_nb(n)
    ccall((:magma_get_dsygst_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_dsygst_m_nb(n)


### Prototype
```c
magma_int_t magma_get_dsygst_m_nb( magma_int_t n );
```
"""
function magma_get_dsygst_m_nb(n)
    ccall((:magma_get_dsygst_m_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_dgebrd_nb(m, n)

SVD
### Prototype
```c
magma_int_t magma_get_dgebrd_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_dgebrd_nb(m, n)
    ccall((:magma_get_dgebrd_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_dgesvd_nb(m, n)


### Prototype
```c
magma_int_t magma_get_dgesvd_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_dgesvd_nb(m, n)
    ccall((:magma_get_dgesvd_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_dbulge_nb(n, nbthreads)

2-stage eigenvalues
### Prototype
```c
magma_int_t magma_get_dbulge_nb( magma_int_t n, magma_int_t nbthreads );
```
"""
function magma_get_dbulge_nb(n, nbthreads)
    ccall((:magma_get_dbulge_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), n, nbthreads)
end

"""
    magma_get_dbulge_nb_mgpu(n)


### Prototype
```c
magma_int_t magma_get_dbulge_nb_mgpu( magma_int_t n );
```
"""
function magma_get_dbulge_nb_mgpu(n)
    ccall((:magma_get_dbulge_nb_mgpu, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_dbulge_vblksiz(n, nb, nbthreads)


### Prototype
```c
magma_int_t magma_get_dbulge_vblksiz( magma_int_t n, magma_int_t nb, magma_int_t nbthreads );
```
"""
function magma_get_dbulge_vblksiz(n, nb, nbthreads)
    ccall((:magma_get_dbulge_vblksiz, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), n, nb, nbthreads)
end

# no prototype is found for this function at magma_d.h:59:13, please use with caution
"""
    magma_get_dbulge_gcperf()


### Prototype
```c
magma_int_t magma_get_dbulge_gcperf();
```
"""
function magma_get_dbulge_gcperf()
    ccall((:magma_get_dbulge_gcperf, libmagma), magma_int_t, ())
end

"""
    magma_dsidi(uplo, A, lda, n, ipiv, det, inert, work, job, info)

only applicable to real [sd] precisions
### Prototype
```c
magma_int_t magma_dsidi( magma_uplo_t uplo, double *A, magma_int_t lda, magma_int_t n, magma_int_t *ipiv, double *det, magma_int_t *inert, double *work, magma_int_t job, magma_int_t *info);
```
"""
function magma_dsidi(uplo, A, lda, n, ipiv, det, inert, work, job, info)
    ccall((:magma_dsidi, libmagma), magma_int_t, (magma_uplo_t, Ptr{Cdouble}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{magma_int_t}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), uplo, A, lda, n, ipiv, det, inert, work, job, info)
end

"""
    magma_dmove_eig(range, n, w, il, iu, vl, vu, mout)


### Prototype
```c
void magma_dmove_eig( magma_range_t range, magma_int_t n, double *w, magma_int_t *il, magma_int_t *iu, double vl, double vu, magma_int_t *mout);
```
"""
function magma_dmove_eig(range, n, w, il, iu, vl, vu, mout)
    ccall((:magma_dmove_eig, libmagma), Cvoid, (magma_range_t, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Cdouble, Ptr{magma_int_t}), range, n, w, il, iu, vl, vu, mout)
end

"""
    magma_dvrange(k, d, il, iu, vl, vu)

defined in dlaex3.cpp
### Prototype
```c
void magma_dvrange( magma_int_t k, double *d, magma_int_t *il, magma_int_t *iu, double vl, double vu);
```
"""
function magma_dvrange(k, d, il, iu, vl, vu)
    ccall((:magma_dvrange, libmagma), Cvoid, (magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cdouble, Cdouble), k, d, il, iu, vl, vu)
end

"""
    magma_dirange(k, indxq, iil, iiu, il, iu)


### Prototype
```c
void magma_dirange( magma_int_t k, magma_int_t *indxq, magma_int_t *iil, magma_int_t *iiu, magma_int_t il, magma_int_t iu);
```
"""
function magma_dirange(k, indxq, iil, iiu, il, iu)
    ccall((:magma_dirange, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t), k, indxq, iil, iiu, il, iu)
end

"""
    magma_dgebrd(m, n, A, lda, d, e, tauq, taup, work, lwork, info)

------------------------------------------------------------ zge routines
### Prototype
```c
magma_int_t magma_dgebrd( magma_int_t m, magma_int_t n, double *A, magma_int_t lda, double *d, double *e, double *tauq, double *taup, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgebrd(m, n, A, lda, d, e, tauq, taup, work, lwork, info)
    ccall((:magma_dgebrd, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, d, e, tauq, taup, work, lwork, info)
end

"""
    magma_dgeev(jobvl, jobvr, n, A, lda, wr, wi, VL, ldvl, VR, ldvr, work, lwork, info)


### Prototype
```c
magma_int_t magma_dgeev( magma_vec_t jobvl, magma_vec_t jobvr, magma_int_t n, double *A, magma_int_t lda, #ifdef MAGMA_COMPLEX double *w, #else double *wr, double *wi, #endif double *VL, magma_int_t ldvl, double *VR, magma_int_t ldvr, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_dgeev(jobvl, jobvr, n, A, lda, wr, wi, VL, ldvl, VR, ldvr, work, lwork, info)
    ccall((:magma_dgeev, libmagma), magma_int_t, (magma_vec_t, magma_vec_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), jobvl, jobvr, n, A, lda, wr, wi, VL, ldvl, VR, ldvr, work, lwork, info)
end

"""
    magma_dgeev_m(jobvl, jobvr, n, A, lda, wr, wi, VL, ldvl, VR, ldvr, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgeev_m( magma_vec_t jobvl, magma_vec_t jobvr, magma_int_t n, double *A, magma_int_t lda, #ifdef MAGMA_COMPLEX double *w, #else double *wr, double *wi, #endif double *VL, magma_int_t ldvl, double *VR, magma_int_t ldvr, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_dgeev_m(jobvl, jobvr, n, A, lda, wr, wi, VL, ldvl, VR, ldvr, work, lwork, info)
    ccall((:magma_dgeev_m, libmagma), magma_int_t, (magma_vec_t, magma_vec_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), jobvl, jobvr, n, A, lda, wr, wi, VL, ldvl, VR, ldvr, work, lwork, info)
end

"""
    magma_dgegqr_gpu(ikind, m, n, dA, ldda, dwork, work, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgegqr_gpu( magma_int_t ikind, magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dwork, double *work, magma_int_t *info);
```
"""
function magma_dgegqr_gpu(ikind, m, n, dA, ldda, dwork, work, info)
    ccall((:magma_dgegqr_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, Ptr{Cdouble}, Ptr{magma_int_t}), ikind, m, n, dA, ldda, dwork, work, info)
end

"""
    magma_dgehrd(n, ilo, ihi, A, lda, tau, work, lwork, dT, info)


### Prototype
```c
magma_int_t magma_dgehrd( magma_int_t n, magma_int_t ilo, magma_int_t ihi, double *A, magma_int_t lda, double *tau, double *work, magma_int_t lwork, magmaDouble_ptr dT, magma_int_t *info);
```
"""
function magma_dgehrd(n, ilo, ihi, A, lda, tau, work, lwork, dT, info)
    ccall((:magma_dgehrd, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, work, lwork, dT, info)
end

"""
    magma_dgehrd_m(n, ilo, ihi, A, lda, tau, work, lwork, T, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgehrd_m( magma_int_t n, magma_int_t ilo, magma_int_t ihi, double *A, magma_int_t lda, double *tau, double *work, magma_int_t lwork, double *T, magma_int_t *info);
```
"""
function magma_dgehrd_m(n, ilo, ihi, A, lda, tau, work, lwork, T, info)
    ccall((:magma_dgehrd_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, work, lwork, T, info)
end

"""
    magma_dgehrd2(n, ilo, ihi, A, lda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgehrd2( magma_int_t n, magma_int_t ilo, magma_int_t ihi, double *A, magma_int_t lda, double *tau, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgehrd2(n, ilo, ihi, A, lda, tau, work, lwork, info)
    ccall((:magma_dgehrd2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, work, lwork, info)
end

"""
    magma_dgelqf(m, n, A, lda, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_dgelqf( magma_int_t m, magma_int_t n, double *A, magma_int_t lda, double *tau, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgelqf(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_dgelqf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_dgelqf_gpu(m, n, dA, ldda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgelqf_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, double *tau, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgelqf_gpu(m, n, dA, ldda, tau, work, lwork, info)
    ccall((:magma_dgelqf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, dA, ldda, tau, work, lwork, info)
end

"""
    magma_dgels(trans, m, n, nrhs, A, lda, B, ldb, hwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgels( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr A, magma_int_t lda, magmaDouble_ptr B, magma_int_t ldb, double *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgels(trans, m, n, nrhs, A, lda, B, ldb, hwork, lwork, info)
    ccall((:magma_dgels, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), trans, m, n, nrhs, A, lda, B, ldb, hwork, lwork, info)
end

"""
    magma_dggrqf(m, p, n, A, lda, taua, B, ldb, taub, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dggrqf( magma_int_t m, magma_int_t p, magma_int_t n, double *A, magma_int_t lda, double *taua, double *B, magma_int_t ldb, double *taub, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dggrqf(m, p, n, A, lda, taua, B, ldb, taub, work, lwork, info)
    ccall((:magma_dggrqf, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, p, n, A, lda, taua, B, ldb, taub, work, lwork, info)
end

"""
    magma_dgglse(m, n, p, A, lda, B, ldb, c, d, x, work, lwork, info)


### Prototype
```c
magma_int_t magma_dgglse( magma_int_t m, magma_int_t n, magma_int_t p, double *A, magma_int_t lda, double *B, magma_int_t ldb, double *c, double *d, double *x, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgglse(m, n, p, A, lda, B, ldb, c, d, x, work, lwork, info)
    ccall((:magma_dgglse, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, p, A, lda, B, ldb, c, d, x, work, lwork, info)
end

"""
    magma_dgels_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)


### Prototype
```c
magma_int_t magma_dgels_gpu( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, double *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgels_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
    ccall((:magma_dgels_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, PtrOrCuPtr{Cdouble}, magma_int_t, PtrOrCuPtr{magma_int_t}), trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
end

"""
    magma_dgels3_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgels3_gpu( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, double *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgels3_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
    ccall((:magma_dgels3_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
end

"""
    magma_dgeqlf(m, n, A, lda, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_dgeqlf( magma_int_t m, magma_int_t n, double *A, magma_int_t lda, double *tau, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgeqlf(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_dgeqlf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_dgeqp3(m, n, A, lda, jpvt, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgeqp3( magma_int_t m, magma_int_t n, double *A, magma_int_t lda, magma_int_t *jpvt, double *tau, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_dgeqp3(m, n, A, lda, jpvt, tau, work, lwork, info)
    ccall((:magma_dgeqp3, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, jpvt, tau, work, lwork, info)
end

"""
    magma_dgeqp3_gpu(m, n, dA, ldda, jpvt, tau, dwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgeqp3_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *jpvt, double *tau, magmaDouble_ptr dwork, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_dgeqp3_gpu(m, n, dA, ldda, jpvt, tau, dwork, lwork, info)
    ccall((:magma_dgeqp3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), m, n, dA, ldda, jpvt, tau, dwork, lwork, info)
end

"""
    magma_dgeqr2_gpu(m, n, dA, ldda, dtau, dwork, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgeqr2_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dtau, magmaDouble_ptr dwork, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_dgeqr2_gpu(m, n, dA, ldda, dtau, dwork, queue, info)
    ccall((:magma_dgeqr2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magma_queue_t, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dwork, queue, info)
end

"""
    magma_dgeqr2x_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgeqr2x_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dtau, magmaDouble_ptr dT, magmaDouble_ptr ddA, magmaDouble_ptr dwork, magma_int_t *info);
```
"""
function magma_dgeqr2x_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)
    ccall((:magma_dgeqr2x_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, info)
end

"""
    magma_dgeqr2x2_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgeqr2x2_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dtau, magmaDouble_ptr dT, magmaDouble_ptr ddA, magmaDouble_ptr dwork, magma_int_t *info);
```
"""
function magma_dgeqr2x2_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)
    ccall((:magma_dgeqr2x2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, info)
end

"""
    magma_dgeqr2x3_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)


### Prototype
```c
magma_int_t magma_dgeqr2x3_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dtau, magmaDouble_ptr dT, magmaDouble_ptr ddA, magmaDouble_ptr dwork, magma_int_t *info);
```
"""
function magma_dgeqr2x3_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)
    ccall((:magma_dgeqr2x3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, info)
end

"""
    magma_dgeqr2x4_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgeqr2x4_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dtau, magmaDouble_ptr dT, magmaDouble_ptr ddA, magmaDouble_ptr dwork, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_dgeqr2x4_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, queue, info)
    ccall((:magma_dgeqr2x4_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magma_queue_t, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, queue, info)
end

"""
    magma_dgeqrf(m, n, A, lda, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_dgeqrf( magma_int_t m, magma_int_t n, double *A, magma_int_t lda, double *tau, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgeqrf(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_dgeqrf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_dgeqrf_gpu(m, n, dA, ldda, tau, dT, info)


### Prototype
```c
magma_int_t magma_dgeqrf_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, double *tau, magmaDouble_ptr dT, magma_int_t *info);
```
"""
function magma_dgeqrf_gpu(m, n, dA, ldda, tau, dT, info)
    ccall((:magma_dgeqrf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, PtrOrCuPtr{Cdouble}, magmaDouble_ptr, PtrOrCuPtr{magma_int_t}), m, n, dA, ldda, tau, dT, info)
end

"""
    magma_dgeqrf_m(ngpu, m, n, A, lda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgeqrf_m( magma_int_t ngpu, magma_int_t m, magma_int_t n, double *A, magma_int_t lda, double *tau, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgeqrf_m(ngpu, m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_dgeqrf_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), ngpu, m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_dgeqrf_ooc(m, n, A, lda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgeqrf_ooc( magma_int_t m, magma_int_t n, double *A, magma_int_t lda, double *tau, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgeqrf_ooc(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_dgeqrf_ooc, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_dgeqrf2_gpu(m, n, dA, ldda, tau, info)


### Prototype
```c
magma_int_t magma_dgeqrf2_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, double *tau, magma_int_t *info);
```
"""
function magma_dgeqrf2_gpu(m, n, dA, ldda, tau, info)
    ccall((:magma_dgeqrf2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}), m, n, dA, ldda, tau, info)
end

"""
    magma_dgeqrf2_mgpu(ngpu, m, n, d_lA, ldda, tau, info)


### Prototype
```c
magma_int_t magma_dgeqrf2_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magmaDouble_ptr d_lA[], magma_int_t ldda, double *tau, magma_int_t *info);
```
"""
function magma_dgeqrf2_mgpu(ngpu, m, n, d_lA, ldda, tau, info)
    ccall((:magma_dgeqrf2_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}), ngpu, m, n, d_lA, ldda, tau, info)
end

"""
    magma_dgeqrf3_gpu(m, n, dA, ldda, tau, dT, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgeqrf3_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, double *tau, magmaDouble_ptr dT, magma_int_t *info);
```
"""
function magma_dgeqrf3_gpu(m, n, dA, ldda, tau, dT, info)
    ccall((:magma_dgeqrf3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magmaDouble_ptr, Ptr{magma_int_t}), m, n, dA, ldda, tau, dT, info)
end

"""
    magma_dgeqrs_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)


### Prototype
```c
magma_int_t magma_dgeqrs_gpu( magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDouble_const_ptr dA, magma_int_t ldda, double const *tau, magmaDouble_ptr dT, magmaDouble_ptr dB, magma_int_t lddb, double *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgeqrs_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
    ccall((:magma_dgeqrs_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{Cdouble}, magmaDouble_ptr, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
end

"""
    magma_dgeqrs3_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgeqrs3_gpu( magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, double const *tau, magmaDouble_ptr dT, magmaDouble_ptr dB, magma_int_t lddb, double *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgeqrs3_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
    ccall((:magma_dgeqrs3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magmaDouble_ptr, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
end

"""
    magma_dgerbt_gpu(gen, n, nrhs, dA, ldda, dB, lddb, U, V, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgerbt_gpu( magma_bool_t gen, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, double *U, double *V, magma_int_t *info);
```
"""
function magma_dgerbt_gpu(gen, n, nrhs, dA, ldda, dB, lddb, U, V, info)
    ccall((:magma_dgerbt_gpu, libmagma), magma_int_t, (magma_bool_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magma_int_t}), gen, n, nrhs, dA, ldda, dB, lddb, U, V, info)
end

"""
    magma_dgerfs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dAF, iter, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgerfs_nopiv_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magmaDouble_ptr dworkd, magmaDouble_ptr dAF, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_dgerfs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dAF, iter, info)
    ccall((:magma_dgerfs_nopiv_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaDouble_ptr, Ptr{magma_int_t}, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dAF, iter, info)
end

"""
    magma_dgesdd(jobz, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, iwork, info)


### Prototype
```c
magma_int_t magma_dgesdd( magma_vec_t jobz, magma_int_t m, magma_int_t n, double *A, magma_int_t lda, double *s, double *U, magma_int_t ldu, double *VT, magma_int_t ldvt, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *iwork, magma_int_t *info);
```
"""
function magma_dgesdd(jobz, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, iwork, info)
    ccall((:magma_dgesdd, libmagma), magma_int_t, (magma_vec_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), jobz, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, iwork, info)
end

"""
    magma_dgesv(n, nrhs, A, lda, ipiv, B, ldb, info)


### Prototype
```c
magma_int_t magma_dgesv( magma_int_t n, magma_int_t nrhs, double *A, magma_int_t lda, magma_int_t *ipiv, double *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_dgesv(n, nrhs, A, lda, ipiv, B, ldb, info)
    ccall((:magma_dgesv, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), n, nrhs, A, lda, ipiv, B, ldb, info)
end

"""
    magma_dgesv_gpu(n, nrhs, dA, ldda, ipiv, dB, lddb, info)


### Prototype
```c
magma_int_t magma_dgesv_gpu( magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaDouble_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_dgesv_gpu(n, nrhs, dA, ldda, ipiv, dB, lddb, info)
    ccall((:magma_dgesv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, magmaDouble_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), n, nrhs, dA, ldda, ipiv, dB, lddb, info)
end

"""
    magma_dgesv_nopiv_gpu(n, nrhs, dA, ldda, dB, lddb, info)


### Prototype
```c
magma_int_t magma_dgesv_nopiv_gpu( magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_dgesv_nopiv_gpu(n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_dgesv_nopiv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_dgesv_rbt(ref, n, nrhs, A, lda, B, ldb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgesv_rbt( magma_bool_t ref, magma_int_t n, magma_int_t nrhs, double *A, magma_int_t lda, double *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_dgesv_rbt(ref, n, nrhs, A, lda, B, ldb, info)
    ccall((:magma_dgesv_rbt, libmagma), magma_int_t, (magma_bool_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), ref, n, nrhs, A, lda, B, ldb, info)
end

"""
    magma_dgesvd(jobu, jobvt, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, info)


### Prototype
```c
magma_int_t magma_dgesvd( magma_vec_t jobu, magma_vec_t jobvt, magma_int_t m, magma_int_t n, double *A, magma_int_t lda, double *s, double *U, magma_int_t ldu, double *VT, magma_int_t ldvt, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_dgesvd(jobu, jobvt, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, info)
    ccall((:magma_dgesvd, libmagma), magma_int_t, (magma_vec_t, magma_vec_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), jobu, jobvt, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, info)
end

"""
    magma_dgetf2_gpu(m, n, dA, ldda, ipiv, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgetf2_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_dgetf2_gpu(m, n, dA, ldda, ipiv, queue, info)
    ccall((:magma_dgetf2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, magma_queue_t, Ptr{magma_int_t}), m, n, dA, ldda, ipiv, queue, info)
end

"""
    magma_dgetf2_native_fused(m, n, dA, ldda, ipiv, gbstep, flags, info, queue)


### Prototype
```c
magma_int_t magma_dgetf2_native_fused( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t gbstep, magma_int_t *flags, magma_int_t *info, magma_queue_t queue );
```
"""
function magma_dgetf2_native_fused(m, n, dA, ldda, ipiv, gbstep, flags, info, queue)
    ccall((:magma_dgetf2_native_fused, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), m, n, dA, ldda, ipiv, gbstep, flags, info, queue)
end

"""
    magma_dgetf2_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)


### Prototype
```c
magma_int_t magma_dgetf2_native( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *dipiv, magma_int_t* dipivinfo, magma_int_t *dinfo, magma_int_t gbstep, magma_queue_t queue, magma_queue_t update_queue);
```
"""
function magma_dgetf2_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
    ccall((:magma_dgetf2_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t, magma_queue_t), m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
end

"""
    magma_dgetf2_nopiv(m, n, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgetf2_nopiv( magma_int_t m, magma_int_t n, double *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_dgetf2_nopiv(m, n, A, lda, info)
    ccall((:magma_dgetf2_nopiv, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, info)
end

"""
    magma_dgetrf_recpanel_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)


### Prototype
```c
magma_int_t magma_dgetrf_recpanel_native( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t* dipiv, magma_int_t* dipivinfo, magma_int_t *dinfo, magma_int_t gbstep, magma_queue_t queue, magma_queue_t update_queue );
```
"""
function magma_dgetrf_recpanel_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
    ccall((:magma_dgetrf_recpanel_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t, magma_queue_t), m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
end

"""
    magma_dgetrf(m, n, A, lda, ipiv, info)


### Prototype
```c
magma_int_t magma_dgetrf( magma_int_t m, magma_int_t n, double *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_dgetrf(m, n, A, lda, ipiv, info)
    ccall((:magma_dgetrf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, A, lda, ipiv, info)
end

"""
    magma_dgetrf_gpu(m, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_dgetrf_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_dgetrf_gpu(m, n, dA, ldda, ipiv, info)
    ccall((:magma_dgetrf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, PtrOrCuPtr{magma_int_t}), m, n, dA, ldda, ipiv, info)
end

"""
    magma_dgetrf_gpu_expert(m, n, dA, ldda, ipiv, info, nb, mode)


### Prototype
```c
magma_int_t magma_dgetrf_gpu_expert( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info, magma_int_t nb, magma_mode_t mode);
```
"""
function magma_dgetrf_gpu_expert(m, n, dA, ldda, ipiv, info, nb, mode)
    ccall((:magma_dgetrf_gpu_expert, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_mode_t), m, n, dA, ldda, ipiv, info, nb, mode)
end

"""
    magma_dgetrf_native(m, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_dgetrf_native( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info );
```
"""
function magma_dgetrf_native(m, n, dA, ldda, ipiv, info)
    ccall((:magma_dgetrf_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, dA, ldda, ipiv, info)
end

"""
    magma_dgetrf_m(ngpu, m, n, A, lda, ipiv, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgetrf_m( magma_int_t ngpu, magma_int_t m, magma_int_t n, double *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_dgetrf_m(ngpu, m, n, A, lda, ipiv, info)
    ccall((:magma_dgetrf_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), ngpu, m, n, A, lda, ipiv, info)
end

"""
    magma_dgetrf_mgpu(ngpu, m, n, d_lA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_dgetrf_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magmaDouble_ptr d_lA[], magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_dgetrf_mgpu(ngpu, m, n, d_lA, ldda, ipiv, info)
    ccall((:magma_dgetrf_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), ngpu, m, n, d_lA, ldda, ipiv, info)
end

"""
    magma_dgetrf2(m, n, A, lda, ipiv, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgetrf2( magma_int_t m, magma_int_t n, double *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_dgetrf2(m, n, A, lda, ipiv, info)
    ccall((:magma_dgetrf2, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, A, lda, ipiv, info)
end

"""
    magma_dgetrf2_mgpu(ngpu, m, n, nb, offset, d_lAT, lddat, ipiv, d_lAP, W, ldw, queues, info)


### Prototype
```c
magma_int_t magma_dgetrf2_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t offset, magmaDouble_ptr d_lAT[], magma_int_t lddat, magma_int_t *ipiv, magmaDouble_ptr d_lAP[], double *W, magma_int_t ldw, magma_queue_t queues[][2], magma_int_t *info);
```
"""
function magma_dgetrf2_mgpu(ngpu, m, n, nb, offset, d_lAT, lddat, ipiv, d_lAP, W, ldw, queues, info)
    ccall((:magma_dgetrf2_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaDouble_ptr}, Ptr{Cdouble}, magma_int_t, Ptr{NTuple{2, magma_queue_t}}, Ptr{magma_int_t}), ngpu, m, n, nb, offset, d_lAT, lddat, ipiv, d_lAP, W, ldw, queues, info)
end

"""
    magma_dgetrf_nopiv(m, n, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgetrf_nopiv( magma_int_t m, magma_int_t n, double *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_dgetrf_nopiv(m, n, A, lda, info)
    ccall((:magma_dgetrf_nopiv, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, info)
end

"""
    magma_dgetrf_nopiv_gpu(m, n, dA, ldda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgetrf_nopiv_gpu( magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_dgetrf_nopiv_gpu(m, n, dA, ldda, info)
    ccall((:magma_dgetrf_nopiv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), m, n, dA, ldda, info)
end

"""
    magma_dgetri_gpu(n, dA, ldda, ipiv, dwork, lwork, info)


### Prototype
```c
magma_int_t magma_dgetri_gpu( magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaDouble_ptr dwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dgetri_gpu(n, dA, ldda, ipiv, dwork, lwork, info)
    ccall((:magma_dgetri_gpu, libmagma), magma_int_t, (magma_int_t, magmaDouble_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, magmaDouble_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), n, dA, ldda, ipiv, dwork, lwork, info)
end

"""
    magma_dgetrs_gpu(trans, n, nrhs, dA, ldda, ipiv, dB, lddb, info)


### Prototype
```c
magma_int_t magma_dgetrs_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaDouble_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_dgetrs_gpu(trans, n, nrhs, dA, ldda, ipiv, dB, lddb, info)
    ccall((:magma_dgetrs_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, magmaDouble_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), trans, n, nrhs, dA, ldda, ipiv, dB, lddb, info)
end

"""
    magma_dgetrs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dgetrs_nopiv_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_dgetrs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_dgetrs_nopiv_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_dsyevd(jobz, uplo, n, A, lda, w, work, lwork, iwork, liwork, info)

------------------------------------------------------------ zhe routines
### Prototype
```c
magma_int_t magma_dsyevd( magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double *w, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsyevd(jobz, uplo, n, A, lda, w, work, lwork, iwork, liwork, info)
    ccall((:magma_dsyevd, libmagma), magma_int_t, (magma_vec_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, uplo, n, A, lda, w, work, lwork, iwork, liwork, info)
end

"""
    magma_dsyevd_gpu(jobz, uplo, n, dA, ldda, w, wA, ldwa, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsyevd_gpu( magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, double *w, double *wA, magma_int_t ldwa, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsyevd_gpu(jobz, uplo, n, dA, ldda, w, wA, ldwa, work, lwork, iwork, liwork, info)
    ccall((:magma_dsyevd_gpu, libmagma), magma_int_t, (magma_vec_t, magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, uplo, n, dA, ldda, w, wA, ldwa, work, lwork, iwork, liwork, info)
end

"""
    magma_dsyevd_m(ngpu, jobz, uplo, n, A, lda, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsyevd_m( magma_int_t ngpu, magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double *w, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsyevd_m(ngpu, jobz, uplo, n, A, lda, w, work, lwork, iwork, liwork, info)
    ccall((:magma_dsyevd_m, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, jobz, uplo, n, A, lda, w, work, lwork, iwork, liwork, info)
end

"""
    magma_dsyevdx(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsyevdx( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsyevdx(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_dsyevdx, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_dsyevdx_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, mout, w, wA, ldwa, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsyevdx_gpu( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, double *wA, magma_int_t ldwa, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsyevdx_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, mout, w, wA, ldwa, work, lwork, iwork, liwork, info)
    ccall((:magma_dsyevdx_gpu, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, mout, w, wA, ldwa, work, lwork, iwork, liwork, info)
end

"""
    magma_dsyevdx_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsyevdx_m( magma_int_t ngpu, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsyevdx_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_dsyevdx_m, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_dsyevdx_2stage(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsyevdx_2stage( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsyevdx_2stage(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_dsyevdx_2stage, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_dsyevdx_2stage_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsyevdx_2stage_m( magma_int_t ngpu, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsyevdx_2stage_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_dsyevdx_2stage_m, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_dsygst(itype, uplo, n, A, lda, B, ldb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsygst( magma_int_t itype, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_dsygst(itype, uplo, n, A, lda, B, ldb, info)
    ccall((:magma_dsygst, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), itype, uplo, n, A, lda, B, ldb, info)
end

"""
    magma_dsygst_gpu(itype, uplo, n, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsygst_gpu( magma_int_t itype, magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_const_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_dsygst_gpu(itype, uplo, n, dA, ldda, dB, lddb, info)
    ccall((:magma_dsygst_gpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{magma_int_t}), itype, uplo, n, dA, ldda, dB, lddb, info)
end

"""
    magma_dsygst_m(ngpu, itype, uplo, n, A, lda, B, ldb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsygst_m( magma_int_t ngpu, magma_int_t itype, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_dsygst_m(ngpu, itype, uplo, n, A, lda, B, ldb, info)
    ccall((:magma_dsygst_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, uplo, n, A, lda, B, ldb, info)
end

"""
    magma_dsygvd(itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsygvd( magma_int_t itype, magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double *B, magma_int_t ldb, double *w, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsygvd(itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, iwork, liwork, info)
    ccall((:magma_dsygvd, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, iwork, liwork, info)
end

"""
    magma_dsygvd_m(ngpu, itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsygvd_m( magma_int_t ngpu, magma_int_t itype, magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double *B, magma_int_t ldb, double *w, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsygvd_m(ngpu, itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, iwork, liwork, info)
    ccall((:magma_dsygvd_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_vec_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, iwork, liwork, info)
end

"""
    magma_dsygvdx(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsygvdx( magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double *B, magma_int_t ldb, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsygvdx(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_dsygvdx, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_dsygvdx_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsygvdx_m( magma_int_t ngpu, magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double *B, magma_int_t ldb, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsygvdx_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_dsygvdx_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_dsygvdx_2stage(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsygvdx_2stage( magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double *B, magma_int_t ldb, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsygvdx_2stage(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_dsygvdx_2stage, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_dsygvdx_2stage_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsygvdx_2stage_m( magma_int_t ngpu, magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double *B, magma_int_t ldb, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, double *w, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dsygvdx_2stage_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_dsygvdx_2stage_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_dsysv(uplo, n, nrhs, A, lda, ipiv, B, ldb, info)


### Prototype
```c
magma_int_t magma_dsysv( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, double *A, magma_int_t lda, magma_int_t *ipiv, double *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_dsysv(uplo, n, nrhs, A, lda, ipiv, B, ldb, info)
    ccall((:magma_dsysv, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, A, lda, ipiv, B, ldb, info)
end

"""
    magma_dsysv_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsysv_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_dsysv_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_dsysv_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_dsytrd(uplo, n, A, lda, d, e, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_dsytrd( magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double *d, double *e, double *tau, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dsytrd(uplo, n, A, lda, d, e, tau, work, lwork, info)
    ccall((:magma_dsytrd, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, d, e, tau, work, lwork, info)
end

"""
    magma_dsytrd_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsytrd_gpu( magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, double *d, double *e, double *tau, double *wA, magma_int_t ldwa, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dsytrd_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, info)
    ccall((:magma_dsytrd_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, info)
end

"""
    magma_dsytrd2_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, dwork, ldwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsytrd2_gpu( magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, double *d, double *e, double *tau, double *wA, magma_int_t ldwa, double *work, magma_int_t lwork, magmaDouble_ptr dwork, magma_int_t ldwork, magma_int_t *info);
```
"""
function magma_dsytrd2_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, dwork, ldwork, info)
    ccall((:magma_dsytrd2_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, dwork, ldwork, info)
end

"""
    magma_dsytrd_mgpu(ngpu, nqueue, uplo, n, A, lda, d, e, tau, work, lwork, info)

TODO: rename magma_dsytrd_m?
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsytrd_mgpu( magma_int_t ngpu, magma_int_t nqueue, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, double *d, double *e, double *tau, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dsytrd_mgpu(ngpu, nqueue, uplo, n, A, lda, d, e, tau, work, lwork, info)
    ccall((:magma_dsytrd_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), ngpu, nqueue, uplo, n, A, lda, d, e, tau, work, lwork, info)
end

"""
    magma_dsytrd_sb2st(uplo, n, nb, Vblksiz, A, lda, d, e, V, ldv, TAU, compT, T, ldt)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsytrd_sb2st( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, double *A, magma_int_t lda, double *d, double *e, double *V, magma_int_t ldv, double *TAU, magma_int_t compT, double *T, magma_int_t ldt);
```
"""
function magma_dsytrd_sb2st(uplo, n, nb, Vblksiz, A, lda, d, e, V, ldv, TAU, compT, T, ldt)
    ccall((:magma_dsytrd_sb2st, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t), uplo, n, nb, Vblksiz, A, lda, d, e, V, ldv, TAU, compT, T, ldt)
end

"""
    magma_dsytrd_sy2sb(uplo, n, nb, A, lda, tau, work, lwork, dT, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsytrd_sy2sb( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, double *tau, double *work, magma_int_t lwork, magmaDouble_ptr dT, magma_int_t *info);
```
"""
function magma_dsytrd_sy2sb(uplo, n, nb, A, lda, tau, work, lwork, dT, info)
    ccall((:magma_dsytrd_sy2sb, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, Ptr{magma_int_t}), uplo, n, nb, A, lda, tau, work, lwork, dT, info)
end

"""
    magma_dsytrd_sy2sb_mgpu(uplo, n, nb, A, lda, tau, work, lwork, dAmgpu, ldda, dTmgpu, lddt, ngpu, distblk, queues, nqueue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsytrd_sy2sb_mgpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, double *tau, double *work, magma_int_t lwork, magmaDouble_ptr dAmgpu[], magma_int_t ldda, magmaDouble_ptr dTmgpu[], magma_int_t lddt, magma_int_t ngpu, magma_int_t distblk, magma_queue_t queues[][20], magma_int_t nqueue, magma_int_t *info);
```
"""
function magma_dsytrd_sy2sb_mgpu(uplo, n, nb, A, lda, tau, work, lwork, dAmgpu, ldda, dTmgpu, lddt, ngpu, distblk, queues, nqueue, info)
    ccall((:magma_dsytrd_sy2sb_mgpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{20, magma_queue_t}}, magma_int_t, Ptr{magma_int_t}), uplo, n, nb, A, lda, tau, work, lwork, dAmgpu, ldda, dTmgpu, lddt, ngpu, distblk, queues, nqueue, info)
end

"""
    magma_dsytrf(uplo, n, A, lda, ipiv, info)


### Prototype
```c
magma_int_t magma_dsytrf( magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_dsytrf(uplo, n, A, lda, ipiv, info)
    ccall((:magma_dsytrf, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, A, lda, ipiv, info)
end

"""
    magma_dsytrf_gpu(uplo, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_dsytrf_gpu( magma_uplo_t uplo, magma_int_t n, double *dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_dsytrf_gpu(uplo, n, dA, ldda, ipiv, info)
    ccall((:magma_dsytrf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, dA, ldda, ipiv, info)
end

"""
    magma_dsytrf_aasen(uplo, cpu_panel, n, A, lda, ipiv, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsytrf_aasen( magma_uplo_t uplo, magma_int_t cpu_panel, magma_int_t n, double *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_dsytrf_aasen(uplo, cpu_panel, n, A, lda, ipiv, info)
    ccall((:magma_dsytrf_aasen, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, cpu_panel, n, A, lda, ipiv, info)
end

"""
    magma_dsytrf_nopiv(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_dsytrf_nopiv( magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_dsytrf_nopiv(uplo, n, A, lda, info)
    ccall((:magma_dsytrf_nopiv, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_dsytrf_nopiv_cpu(uplo, n, ib, A, lda, info)


### Prototype
```c
magma_int_t magma_dsytrf_nopiv_cpu( magma_uplo_t uplo, magma_int_t n, magma_int_t ib, double *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_dsytrf_nopiv_cpu(uplo, n, ib, A, lda, info)
    ccall((:magma_dsytrf_nopiv_cpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), uplo, n, ib, A, lda, info)
end

"""
    magma_dsytrf_nopiv_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_dsytrf_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_dsytrf_nopiv_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_dsytrf_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_dsytrs_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dsytrs_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_dsytrs_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_dsytrs_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_dlaex0(n, d, e, Q, ldq, work, iwork, dwork, range, vl, vu, il, iu, info)

only applicable to real [sd] precisions
### Prototype
```c
magma_int_t magma_dlaex0( magma_int_t n, double *d, double *e, double *Q, magma_int_t ldq, double *work, magma_int_t *iwork, magmaDouble_ptr dwork, magma_range_t range, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *info);
```
"""
function magma_dlaex0(n, d, e, Q, ldq, work, iwork, dwork, range, vl, vu, il, iu, info)
    ccall((:magma_dlaex0, libmagma), magma_int_t, (magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}, magmaDouble_ptr, magma_range_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}), n, d, e, Q, ldq, work, iwork, dwork, range, vl, vu, il, iu, info)
end

"""
    magma_dlaex0_m(ngpu, n, d, e, Q, ldq, work, iwork, range, vl, vu, il, iu, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlaex0_m( magma_int_t ngpu, magma_int_t n, double *d, double *e, double *Q, magma_int_t ldq, double *work, magma_int_t *iwork, magma_range_t range, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *info);
```
"""
function magma_dlaex0_m(ngpu, n, d, e, Q, ldq, work, iwork, range, vl, vu, il, iu, info)
    ccall((:magma_dlaex0_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}, magma_range_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}), ngpu, n, d, e, Q, ldq, work, iwork, range, vl, vu, il, iu, info)
end

"""
    magma_dlaex1(n, d, Q, ldq, indxq, rho, cutpnt, work, iwork, dwork, queue, range, vl, vu, il, iu, info)


### Prototype
```c
magma_int_t magma_dlaex1( magma_int_t n, double *d, double *Q, magma_int_t ldq, magma_int_t *indxq, double rho, magma_int_t cutpnt, double *work, magma_int_t *iwork, magmaDouble_ptr dwork, magma_queue_t queue, magma_range_t range, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *info);
```
"""
function magma_dlaex1(n, d, Q, ldq, indxq, rho, cutpnt, work, iwork, dwork, queue, range, vl, vu, il, iu, info)
    ccall((:magma_dlaex1, libmagma), magma_int_t, (magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Cdouble, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}, magmaDouble_ptr, magma_queue_t, magma_range_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}), n, d, Q, ldq, indxq, rho, cutpnt, work, iwork, dwork, queue, range, vl, vu, il, iu, info)
end

"""
    magma_dlaex1_m(ngpu, n, d, Q, ldq, indxq, rho, cutpnt, work, iwork, dwork, queues, range, vl, vu, il, iu, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlaex1_m( magma_int_t ngpu, magma_int_t n, double *d, double *Q, magma_int_t ldq, magma_int_t *indxq, double rho, magma_int_t cutpnt, double *work, magma_int_t *iwork, magmaDouble_ptr dwork[], magma_queue_t queues[MagmaMaxGPUs][2], magma_range_t range, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *info);
```
"""
function magma_dlaex1_m(ngpu, n, d, Q, ldq, indxq, rho, cutpnt, work, iwork, dwork, queues, range, vl, vu, il, iu, info)
    ccall((:magma_dlaex1_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Cdouble, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}, Ptr{magmaDouble_ptr}, Ptr{NTuple{2, magma_queue_t}}, magma_range_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}), ngpu, n, d, Q, ldq, indxq, rho, cutpnt, work, iwork, dwork, queues, range, vl, vu, il, iu, info)
end

"""
    magma_dlaex3(k, n, n1, d, Q, ldq, rho, dlamda, Q2, indx, ctot, w, s, indxq, dwork, queue, range, vl, vu, il, iu, info)


### Prototype
```c
magma_int_t magma_dlaex3( magma_int_t k, magma_int_t n, magma_int_t n1, double *d, double *Q, magma_int_t ldq, double rho, double *dlamda, double *Q2, magma_int_t *indx, magma_int_t *ctot, double *w, double *s, magma_int_t *indxq, magmaDouble_ptr dwork, magma_queue_t queue, magma_range_t range, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *info);
```
"""
function magma_dlaex3(k, n, n1, d, Q, ldq, rho, dlamda, Q2, indx, ctot, w, s, indxq, dwork, queue, range, vl, vu, il, iu, info)
    ccall((:magma_dlaex3, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Cdouble, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magma_int_t}, magmaDouble_ptr, magma_queue_t, magma_range_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}), k, n, n1, d, Q, ldq, rho, dlamda, Q2, indx, ctot, w, s, indxq, dwork, queue, range, vl, vu, il, iu, info)
end

"""
    magma_dlaex3_m(ngpu, k, n, n1, d, Q, ldq, rho, dlamda, Q2, indx, ctot, w, s, indxq, dwork, queues, range, vl, vu, il, iu, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlaex3_m( magma_int_t ngpu, magma_int_t k, magma_int_t n, magma_int_t n1, double *d, double *Q, magma_int_t ldq, double rho, double *dlamda, double *Q2, magma_int_t *indx, magma_int_t *ctot, double *w, double *s, magma_int_t *indxq, magmaDouble_ptr dwork[], magma_queue_t queues[MagmaMaxGPUs][2], magma_range_t range, double vl, double vu, magma_int_t il, magma_int_t iu, magma_int_t *info);
```
"""
function magma_dlaex3_m(ngpu, k, n, n1, d, Q, ldq, rho, dlamda, Q2, indx, ctot, w, s, indxq, dwork, queues, range, vl, vu, il, iu, info)
    ccall((:magma_dlaex3_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Cdouble, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magma_int_t}, Ptr{magmaDouble_ptr}, Ptr{NTuple{2, magma_queue_t}}, magma_range_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{magma_int_t}), ngpu, k, n, n1, d, Q, ldq, rho, dlamda, Q2, indx, ctot, w, s, indxq, dwork, queues, range, vl, vu, il, iu, info)
end

"""
    magma_dlabrd_gpu(m, n, nb, A, lda, dA, ldda, d, e, tauq, taup, X, ldx, dX, lddx, Y, ldy, dY, lddy, work, lwork, queue)


### Prototype
```c
magma_int_t magma_dlabrd_gpu( magma_int_t m, magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, magmaDouble_ptr dA, magma_int_t ldda, double *d, double *e, double *tauq, double *taup, double *X, magma_int_t ldx, magmaDouble_ptr dX, magma_int_t lddx, double *Y, magma_int_t ldy, magmaDouble_ptr dY, magma_int_t lddy, double *work, magma_int_t lwork, magma_queue_t queue);
```
"""
function magma_dlabrd_gpu(m, n, nb, A, lda, dA, ldda, d, e, tauq, taup, X, ldx, dX, lddx, Y, ldy, dY, lddy, work, lwork, queue)
    ccall((:magma_dlabrd_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t), m, n, nb, A, lda, dA, ldda, d, e, tauq, taup, X, ldx, dX, lddx, Y, ldy, dY, lddy, work, lwork, queue)
end

"""
    magma_dlasyf_gpu(uplo, n, nb, kb, dA, ldda, ipiv, dW, lddw, queues, info)


### Prototype
```c
magma_int_t magma_dlasyf_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t *kb, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaDouble_ptr dW, magma_int_t lddw, magma_queue_t queues[], magma_int_t *info);
```
"""
function magma_dlasyf_gpu(uplo, n, nb, kb, dA, ldda, ipiv, dW, lddw, queues, info)
    ccall((:magma_dlasyf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, magmaDouble_ptr, magma_int_t, Ptr{magma_queue_t}, Ptr{magma_int_t}), uplo, n, nb, kb, dA, ldda, ipiv, dW, lddw, queues, info)
end

"""
    magma_dlahr2(n, k, nb, dA, ldda, dV, lddv, A, lda, tau, T, ldt, Y, ldy, queue)


### Prototype
```c
magma_int_t magma_dlahr2( magma_int_t n, magma_int_t k, magma_int_t nb, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dV, magma_int_t lddv, double *A, magma_int_t lda, double *tau, double *T, magma_int_t ldt, double *Y, magma_int_t ldy, magma_queue_t queue);
```
"""
function magma_dlahr2(n, k, nb, dA, ldda, dV, lddv, A, lda, tau, T, ldt, Y, ldy, queue)
    ccall((:magma_dlahr2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t), n, k, nb, dA, ldda, dV, lddv, A, lda, tau, T, ldt, Y, ldy, queue)
end

"""
    magma_dlahr2_m(n, k, nb, A, lda, tau, T, ldt, Y, ldy, data)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlahr2_m( magma_int_t n, magma_int_t k, magma_int_t nb, double *A, magma_int_t lda, double *tau, double *T, magma_int_t ldt, double *Y, magma_int_t ldy, struct dgehrd_data *data);
```
"""
function magma_dlahr2_m(n, k, nb, A, lda, tau, T, ldt, Y, ldy, data)
    ccall((:magma_dlahr2_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{dgehrd_data}), n, k, nb, A, lda, tau, T, ldt, Y, ldy, data)
end

"""
    magma_dlahru(n, ihi, k, nb, A, lda, dA, ldda, dY, lddy, dV, lddv, dT, dwork, queue)


### Prototype
```c
magma_int_t magma_dlahru( magma_int_t n, magma_int_t ihi, magma_int_t k, magma_int_t nb, double *A, magma_int_t lda, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dY, magma_int_t lddy, magmaDouble_ptr dV, magma_int_t lddv, magmaDouble_ptr dT, magmaDouble_ptr dwork, magma_queue_t queue);
```
"""
function magma_dlahru(n, ihi, k, nb, A, lda, dA, ldda, dY, lddy, dV, lddv, dT, dwork, queue)
    ccall((:magma_dlahru, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaDouble_ptr, magma_queue_t), n, ihi, k, nb, A, lda, dA, ldda, dY, lddy, dV, lddv, dT, dwork, queue)
end

"""
    magma_dlahru_m(n, ihi, k, nb, A, lda, data)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlahru_m( magma_int_t n, magma_int_t ihi, magma_int_t k, magma_int_t nb, double *A, magma_int_t lda, struct dgehrd_data *data);
```
"""
function magma_dlahru_m(n, ihi, k, nb, A, lda, data)
    ccall((:magma_dlahru_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{dgehrd_data}), n, ihi, k, nb, A, lda, data)
end

"""
    magma_dlaln2(trans, na, nw, smin, ca, A, lda, d1, d2, B, ldb, wr, wi, X, ldx, scale, xnorm, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlaln2( magma_int_t trans, magma_int_t na, magma_int_t nw, double smin, double ca, const double *A, magma_int_t lda, double d1, double d2, const double *B, magma_int_t ldb, double wr, double wi, double *X, magma_int_t ldx, double *scale, double *xnorm, magma_int_t *info);
```
"""
function magma_dlaln2(trans, na, nw, smin, ca, A, lda, d1, d2, B, ldb, wr, wi, X, ldx, scale, xnorm, info)
    ccall((:magma_dlaln2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Cdouble, Cdouble, Ptr{Cdouble}, magma_int_t, Cdouble, Cdouble, Ptr{Cdouble}, magma_int_t, Cdouble, Cdouble, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{magma_int_t}), trans, na, nw, smin, ca, A, lda, d1, d2, B, ldb, wr, wi, X, ldx, scale, xnorm, info)
end

"""
    magma_dlaqps(m, n, offset, nb, kb, A, lda, dA, ldda, jpvt, tau, vn1, vn2, auxv, F, ldf, dF, lddf)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlaqps( magma_int_t m, magma_int_t n, magma_int_t offset, magma_int_t nb, magma_int_t *kb, double *A, magma_int_t lda, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *jpvt, double *tau, double *vn1, double *vn2, double *auxv, double *F, magma_int_t ldf, magmaDouble_ptr dF, magma_int_t lddf);
```
"""
function magma_dlaqps(m, n, offset, nb, kb, A, lda, dA, ldda, jpvt, tau, vn1, vn2, auxv, F, ldf, dF, lddf)
    ccall((:magma_dlaqps, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t), m, n, offset, nb, kb, A, lda, dA, ldda, jpvt, tau, vn1, vn2, auxv, F, ldf, dF, lddf)
end

"""
    magma_dlaqps_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, tau, vn1, vn2, dauxv, dF, lddf)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlaqps_gpu( magma_int_t m, magma_int_t n, magma_int_t offset, magma_int_t nb, magma_int_t *kb, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *jpvt, double *tau, double *vn1, double *vn2, magmaDouble_ptr dauxv, magmaDouble_ptr dF, magma_int_t lddf);
```
"""
function magma_dlaqps_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, tau, vn1, vn2, dauxv, dF, lddf)
    ccall((:magma_dlaqps_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magmaDouble_ptr, magmaDouble_ptr, magma_int_t), m, n, offset, nb, kb, dA, ldda, jpvt, tau, vn1, vn2, dauxv, dF, lddf)
end

"""
    magma_dlaqps2_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, dtau, dvn1, dvn2, dauxv, dF, lddf, dlsticcs, queue)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlaqps2_gpu( magma_int_t m, magma_int_t n, magma_int_t offset, magma_int_t nb, magma_int_t *kb, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *jpvt, magmaDouble_ptr dtau, magmaDouble_ptr dvn1, magmaDouble_ptr dvn2, magmaDouble_ptr dauxv, magmaDouble_ptr dF, magma_int_t lddf, magmaDouble_ptr dlsticcs, magma_queue_t queue);
```
"""
function magma_dlaqps2_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, dtau, dvn1, dvn2, dauxv, dF, lddf, dlsticcs, queue)
    ccall((:magma_dlaqps2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_queue_t), m, n, offset, nb, kb, dA, ldda, jpvt, dtau, dvn1, dvn2, dauxv, dF, lddf, dlsticcs, queue)
end

"""
    magma_dlaqtrsd(trans, n, T, ldt, x, ldx, cnorm, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlaqtrsd( magma_trans_t trans, magma_int_t n, const double *T, magma_int_t ldt, double *x, magma_int_t ldx, const double *cnorm, magma_int_t *info);
```
"""
function magma_dlaqtrsd(trans, n, T, ldt, x, ldx, cnorm, info)
    ccall((:magma_dlaqtrsd, libmagma), magma_int_t, (magma_trans_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}), trans, n, T, ldt, x, ldx, cnorm, info)
end

"""
    magma_dlarf_gpu(m, n, dv, dtau, dC, lddc, queue)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlarf_gpu( magma_int_t m, magma_int_t n, magmaDouble_const_ptr dv, magmaDouble_const_ptr dtau, magmaDouble_ptr dC, magma_int_t lddc, magma_queue_t queue);
```
"""
function magma_dlarf_gpu(m, n, dv, dtau, dC, lddc, queue)
    ccall((:magma_dlarf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaDouble_const_ptr, magmaDouble_const_ptr, magmaDouble_ptr, magma_int_t, magma_queue_t), m, n, dv, dtau, dC, lddc, queue)
end

"""
    magma_dlarfb2_gpu(m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, queue)

in dgeqr2x_gpu-v3.cpp
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlarfb2_gpu( magma_int_t m, magma_int_t n, magma_int_t k, magmaDouble_const_ptr dV, magma_int_t lddv, magmaDouble_const_ptr dT, magma_int_t lddt, magmaDouble_ptr dC, magma_int_t lddc, magmaDouble_ptr dwork, magma_int_t ldwork, magma_queue_t queue);
```
"""
function magma_dlarfb2_gpu(m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, queue)
    ccall((:magma_dlarfb2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_const_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t), m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, queue)
end

"""
    magma_dlatrd(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, queue)


### Prototype
```c
magma_int_t magma_dlatrd( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, double *e, double *tau, double *W, magma_int_t ldw, double *work, magma_int_t lwork, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dW, magma_int_t lddw, magma_queue_t queue);
```
"""
function magma_dlatrd(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, queue)
    ccall((:magma_dlatrd, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t), uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, queue)
end

"""
    magma_dlatrd2(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, dwork, ldwork, queue)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlatrd2( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, double *A, magma_int_t lda, double *e, double *tau, double *W, magma_int_t ldw, double *work, magma_int_t lwork, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dW, magma_int_t lddw, magmaDouble_ptr dwork, magma_int_t ldwork, magma_queue_t queue);
```
"""
function magma_dlatrd2(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, dwork, ldwork, queue)
    ccall((:magma_dlatrd2, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t), uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, dwork, ldwork, queue)
end

"""
    magma_dlatrd_mgpu(ngpu, uplo, n, nb, nb0, A, lda, e, tau, W, ldw, dA, ldda, offset, dW, lddw, hwork, lhwork, dwork, ldwork, queues)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dlatrd_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t nb0, double *A, magma_int_t lda, double *e, double *tau, double *W, magma_int_t ldw, magmaDouble_ptr dA[], magma_int_t ldda, magma_int_t offset, magmaDouble_ptr dW[], magma_int_t lddw, double *hwork, magma_int_t lhwork, magmaDouble_ptr dwork[], magma_int_t ldwork, magma_queue_t queues[]);
```
"""
function magma_dlatrd_mgpu(ngpu, uplo, n, nb, nb0, A, lda, e, tau, W, ldw, dA, ldda, offset, dW, lddw, hwork, lhwork, dwork, ldwork, queues)
    ccall((:magma_dlatrd_mgpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magma_queue_t}), ngpu, uplo, n, nb, nb0, A, lda, e, tau, W, ldw, dA, ldda, offset, dW, lddw, hwork, lhwork, dwork, ldwork, queues)
end

"""
    magma_dlauum(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_dlauum( magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_dlauum(uplo, n, A, lda, info)
    ccall((:magma_dlauum, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_dlauum_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_dlauum_gpu( magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_dlauum_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_dlauum_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_dposv(uplo, n, nrhs, A, lda, B, ldb, info)

------------------------------------------------------------ zpo routines
### Prototype
```c
magma_int_t magma_dposv( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, double *A, magma_int_t lda, double *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_dposv(uplo, n, nrhs, A, lda, B, ldb, info)
    ccall((:magma_dposv, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, A, lda, B, ldb, info)
end

"""
    magma_dposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)


### Prototype
```c
magma_int_t magma_dposv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_dposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_dposv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_dpotf2_gpu(uplo, n, dA, ldda, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dpotf2_gpu( magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_dpotf2_gpu(uplo, n, dA, ldda, queue, info)
    ccall((:magma_dpotf2_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, magma_queue_t, Ptr{magma_int_t}), uplo, n, dA, ldda, queue, info)
end

"""
    magma_dpotrf_rectile_native(uplo, n, recnb, dA, ldda, gbstep, dinfo, info, queue)


### Prototype
```c
magma_int_t magma_dpotrf_rectile_native( magma_uplo_t uplo, magma_int_t n, magma_int_t recnb, double* dA, magma_int_t ldda, magma_int_t gbstep, magma_int_t *dinfo, magma_int_t *info, magma_queue_t queue);
```
"""
function magma_dpotrf_rectile_native(uplo, n, recnb, dA, ldda, gbstep, dinfo, info, queue)
    ccall((:magma_dpotrf_rectile_native, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), uplo, n, recnb, dA, ldda, gbstep, dinfo, info, queue)
end

"""
    magma_dpotrf(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_dpotrf( magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_dpotrf(uplo, n, A, lda, info)
    ccall((:magma_dpotrf, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_dpotrf_expert_gpu(uplo, n, dA, ldda, info, nb, mode)


### Prototype
```c
magma_int_t magma_dpotrf_expert_gpu( magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *info, magma_int_t nb, magma_mode_t mode );
```
"""
function magma_dpotrf_expert_gpu(uplo, n, dA, ldda, info, nb, mode)
    ccall((:magma_dpotrf_expert_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_mode_t), uplo, n, dA, ldda, info, nb, mode)
end

"""
    magma_dpotrf_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_dpotrf_gpu( magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_dpotrf_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_dpotrf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_dpotrf_native(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_dpotrf_native( magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magma_dpotrf_native(uplo, n, dA, ldda, info)
    ccall((:magma_dpotrf_native, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_dpotrf_m(ngpu, uplo, n, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dpotrf_m( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_dpotrf_m(ngpu, uplo, n, A, lda, info)
    ccall((:magma_dpotrf_m, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, A, lda, info)
end

"""
    magma_dpotrf_mgpu(ngpu, uplo, n, d_lA, ldda, info)


### Prototype
```c
magma_int_t magma_dpotrf_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr d_lA[], magma_int_t ldda, magma_int_t *info);
```
"""
function magma_dpotrf_mgpu(ngpu, uplo, n, d_lA, ldda, info)
    ccall((:magma_dpotrf_mgpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, d_lA, ldda, info)
end

"""
    magma_dpotrf_mgpu_right(ngpu, uplo, n, d_lA, ldda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dpotrf_mgpu_right( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr d_lA[], magma_int_t ldda, magma_int_t *info);
```
"""
function magma_dpotrf_mgpu_right(ngpu, uplo, n, d_lA, ldda, info)
    ccall((:magma_dpotrf_mgpu_right, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, d_lA, ldda, info)
end

"""
    magma_dpotrf3_mgpu(ngpu, uplo, m, n, off_i, off_j, nb, d_lA, ldda, d_lP, lddp, A, lda, h, queues, events, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dpotrf3_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t off_i, magma_int_t off_j, magma_int_t nb, magmaDouble_ptr d_lA[], magma_int_t ldda, magmaDouble_ptr d_lP[], magma_int_t lddp, double *A, magma_int_t lda, magma_int_t h, magma_queue_t queues[][3], magma_event_t events[][5], magma_int_t *info);
```
"""
function magma_dpotrf3_mgpu(ngpu, uplo, m, n, off_i, off_j, nb, d_lA, ldda, d_lP, lddp, A, lda, h, queues, events, info)
    ccall((:magma_dpotrf3_mgpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{magmaDouble_ptr}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, Ptr{NTuple{3, magma_queue_t}}, Ptr{NTuple{5, magma_event_t}}, Ptr{magma_int_t}), ngpu, uplo, m, n, off_i, off_j, nb, d_lA, ldda, d_lP, lddp, A, lda, h, queues, events, info)
end

"""
    magma_dpotri(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_dpotri( magma_uplo_t uplo, magma_int_t n, double *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_dpotri(uplo, n, A, lda, info)
    ccall((:magma_dpotri, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_dpotri_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_dpotri_gpu( magma_uplo_t uplo, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_dpotri_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_dpotri_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_dpotrs_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)


### Prototype
```c
magma_int_t magma_dpotrs_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_dpotrs_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_dpotrs_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_dstedx(range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, dwork, info)

------------------------------------------------------------ zst routines
### Prototype
```c
magma_int_t magma_dstedx( magma_range_t range, magma_int_t n, double vl, double vu, magma_int_t il, magma_int_t iu, double *d, double *e, double *Z, magma_int_t ldz, double *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magmaDouble_ptr dwork, magma_int_t *info);
```
"""
function magma_dstedx(range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, dwork, info)
    ccall((:magma_dstedx, libmagma), magma_int_t, (magma_range_t, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magmaDouble_ptr, Ptr{magma_int_t}), range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, dwork, info)
end

"""
    magma_dstedx_m(ngpu, range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dstedx_m( magma_int_t ngpu, magma_range_t range, magma_int_t n, double vl, double vu, magma_int_t il, magma_int_t iu, double *d, double *e, double *Z, magma_int_t ldz, double *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_dstedx_m(ngpu, range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_dstedx_m, libmagma), magma_int_t, (magma_int_t, magma_range_t, magma_int_t, Cdouble, Cdouble, magma_int_t, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_dtrevc3(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, info)

------------------------------------------------------------ ztr routines
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dtrevc3( magma_side_t side, magma_vec_t howmany, magma_int_t *select, magma_int_t n, double *T, magma_int_t ldt, double *VL, magma_int_t ldvl, double *VR, magma_int_t ldvr, magma_int_t mm, magma_int_t *mout, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_dtrevc3(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, info)
    ccall((:magma_dtrevc3, libmagma), magma_int_t, (magma_side_t, magma_vec_t, Ptr{magma_int_t}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, info)
end

"""
    magma_dtrevc3_mt(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dtrevc3_mt( magma_side_t side, magma_vec_t howmany, magma_int_t *select, magma_int_t n, double *T, magma_int_t ldt, double *VL, magma_int_t ldvl, double *VR, magma_int_t ldvr, magma_int_t mm, magma_int_t *mout, double *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX double *rwork, #endif magma_int_t *info);
```
"""
function magma_dtrevc3_mt(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, info)
    ccall((:magma_dtrevc3_mt, libmagma), magma_int_t, (magma_side_t, magma_vec_t, Ptr{magma_int_t}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, info)
end

"""
    magma_dtrsm_m(ngpu, side, uplo, transa, diag, m, n, alpha, A, lda, B, ldb)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dtrsm_m( magma_int_t ngpu, magma_side_t side, magma_uplo_t uplo, magma_trans_t transa, magma_diag_t diag, magma_int_t m, magma_int_t n, double alpha, const double *A, magma_int_t lda, double *B, magma_int_t ldb);
```
"""
function magma_dtrsm_m(ngpu, side, uplo, transa, diag, m, n, alpha, A, lda, B, ldb)
    ccall((:magma_dtrsm_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cdouble, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t), ngpu, side, uplo, transa, diag, m, n, alpha, A, lda, B, ldb)
end

"""
    magma_dtrtri(uplo, diag, n, A, lda, info)


### Prototype
```c
magma_int_t magma_dtrtri( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, double *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_dtrtri(uplo, diag, n, A, lda, info)
    ccall((:magma_dtrtri, libmagma), magma_int_t, (magma_uplo_t, magma_diag_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), uplo, diag, n, A, lda, info)
end

"""
    magma_dtrtri_gpu(uplo, diag, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_dtrtri_gpu( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_dtrtri_gpu(uplo, diag, n, dA, ldda, info)
    ccall((:magma_dtrtri_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_diag_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), uplo, diag, n, dA, ldda, info)
end

"""
    magma_dorgbr(vect, m, n, k, A, lda, tau, work, lwork, info)

------------------------------------------------------------ zun routines
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dorgbr( magma_vect_t vect, magma_int_t m, magma_int_t n, magma_int_t k, double *A, magma_int_t lda, double *tau, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dorgbr(vect, m, n, k, A, lda, tau, work, lwork, info)
    ccall((:magma_dorgbr, libmagma), magma_int_t, (magma_vect_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), vect, m, n, k, A, lda, tau, work, lwork, info)
end

"""
    magma_dorghr(n, ilo, ihi, A, lda, tau, dT, nb, info)


### Prototype
```c
magma_int_t magma_dorghr( magma_int_t n, magma_int_t ilo, magma_int_t ihi, double *A, magma_int_t lda, double *tau, magmaDouble_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_dorghr(n, ilo, ihi, A, lda, tau, dT, nb, info)
    ccall((:magma_dorghr, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, dT, nb, info)
end

"""
    magma_dorghr_m(n, ilo, ihi, A, lda, tau, T, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dorghr_m( magma_int_t n, magma_int_t ilo, magma_int_t ihi, double *A, magma_int_t lda, double *tau, double *T, magma_int_t nb, magma_int_t *info);
```
"""
function magma_dorghr_m(n, ilo, ihi, A, lda, tau, T, nb, info)
    ccall((:magma_dorghr_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, T, nb, info)
end

"""
    magma_dorglq(m, n, k, A, lda, tau, dT, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dorglq( magma_int_t m, magma_int_t n, magma_int_t k, double *A, magma_int_t lda, double *tau, magmaDouble_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_dorglq(m, n, k, A, lda, tau, dT, nb, info)
    ccall((:magma_dorglq, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, A, lda, tau, dT, nb, info)
end

"""
    magma_dorgqr(m, n, k, A, lda, tau, dT, nb, info)


### Prototype
```c
magma_int_t magma_dorgqr( magma_int_t m, magma_int_t n, magma_int_t k, double *A, magma_int_t lda, double *tau, magmaDouble_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_dorgqr(m, n, k, A, lda, tau, dT, nb, info)
    ccall((:magma_dorgqr, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, A, lda, tau, dT, nb, info)
end

"""
    magma_dorgqr_gpu(m, n, k, dA, ldda, tau, dT, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dorgqr_gpu( magma_int_t m, magma_int_t n, magma_int_t k, magmaDouble_ptr dA, magma_int_t ldda, double *tau, magmaDouble_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_dorgqr_gpu(m, n, k, dA, ldda, tau, dT, nb, info)
    ccall((:magma_dorgqr_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, dA, ldda, tau, dT, nb, info)
end

"""
    magma_dorgqr_m(m, n, k, A, lda, tau, T, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dorgqr_m( magma_int_t m, magma_int_t n, magma_int_t k, double *A, magma_int_t lda, double *tau, double *T, magma_int_t nb, magma_int_t *info);
```
"""
function magma_dorgqr_m(m, n, k, A, lda, tau, T, nb, info)
    ccall((:magma_dorgqr_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), m, n, k, A, lda, tau, T, nb, info)
end

"""
    magma_dorgqr2(m, n, k, A, lda, tau, info)


### Prototype
```c
magma_int_t magma_dorgqr2( magma_int_t m, magma_int_t n, magma_int_t k, double *A, magma_int_t lda, double *tau, magma_int_t *info);
```
"""
function magma_dorgqr2(m, n, k, A, lda, tau, info)
    ccall((:magma_dorgqr2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{magma_int_t}), m, n, k, A, lda, tau, info)
end

"""
    magma_dormbr(vect, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_dormbr( magma_vect_t vect, magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, double *A, magma_int_t lda, double *tau, double *C, magma_int_t ldc, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dormbr(vect, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_dormbr, libmagma), magma_int_t, (magma_vect_t, magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), vect, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_dormlq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_dormlq( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, double *A, magma_int_t lda, double *tau, double *C, magma_int_t ldc, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dormlq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_dormlq, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_dormrq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_dormrq( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, double *A, magma_int_t lda, double *tau, double *C, magma_int_t ldc, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dormrq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_dormrq, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_dormql(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_dormql( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, double *A, magma_int_t lda, double *tau, double *C, magma_int_t ldc, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dormql(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_dormql, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_dormql2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dormql2_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDouble_ptr dA, magma_int_t ldda, double *tau, magmaDouble_ptr dC, magma_int_t lddc, const double *wA, magma_int_t ldwa, magma_int_t *info);
```
"""
function magma_dormql2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
    ccall((:magma_dormql2_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
end

"""
    magma_dormqr(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_dormqr( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, double *A, magma_int_t lda, double *tau, double *C, magma_int_t ldc, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dormqr(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_dormqr, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_dormqr_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, hwork, lwork, dT, nb, info)


### Prototype
```c
magma_int_t magma_dormqr_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDouble_const_ptr dA, magma_int_t ldda, double const *tau, magmaDouble_ptr dC, magma_int_t lddc, double *hwork, magma_int_t lwork, magmaDouble_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_dormqr_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, hwork, lwork, dT, nb, info)
    ccall((:magma_dormqr_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{Cdouble}, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, tau, dC, lddc, hwork, lwork, dT, nb, info)
end

"""
    magma_dormqr2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dormqr2_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaDouble_ptr dA, magma_int_t ldda, double *tau, magmaDouble_ptr dC, magma_int_t lddc, const double *wA, magma_int_t ldwa, magma_int_t *info);
```
"""
function magma_dormqr2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
    ccall((:magma_dormqr2_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
end

"""
    magma_dormqr_m(ngpu, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dormqr_m( magma_int_t ngpu, magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, double *A, magma_int_t lda, double *tau, double *C, magma_int_t ldc, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dormqr_m(ngpu, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_dormqr_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), ngpu, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_dormtr(side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_dormtr( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_int_t m, magma_int_t n, double *A, magma_int_t lda, double *tau, double *C, magma_int_t ldc, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dormtr(side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_dormtr, libmagma), magma_int_t, (magma_side_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_dormtr_gpu(side, uplo, trans, m, n, dA, ldda, tau, dC, lddc, wA, ldwa, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dormtr_gpu( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_int_t m, magma_int_t n, magmaDouble_ptr dA, magma_int_t ldda, double *tau, magmaDouble_ptr dC, magma_int_t lddc, const double *wA, magma_int_t ldwa, magma_int_t *info);
```
"""
function magma_dormtr_gpu(side, uplo, trans, m, n, dA, ldda, tau, dC, lddc, wA, ldwa, info)
    ccall((:magma_dormtr_gpu, libmagma), magma_int_t, (magma_side_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magmaDouble_ptr, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), side, uplo, trans, m, n, dA, ldda, tau, dC, lddc, wA, ldwa, info)
end

"""
    magma_dormtr_m(ngpu, side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dormtr_m( magma_int_t ngpu, magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_int_t m, magma_int_t n, double *A, magma_int_t lda, double *tau, double *C, magma_int_t ldc, double *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_dormtr_m(ngpu, side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_dormtr_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}), ngpu, side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_d_isnan(x)


### Prototype
```c
int magma_d_isnan( double x );
```
"""
function magma_d_isnan(x)
    ccall((:magma_d_isnan, libmagma), Cint, (Cdouble,), x)
end

"""
    magma_d_isinf(x)


### Prototype
```c
int magma_d_isinf( double x );
```
"""
function magma_d_isinf(x)
    ccall((:magma_d_isinf, libmagma), Cint, (Cdouble,), x)
end

"""
    magma_d_isnan_inf(x)


### Prototype
```c
int magma_d_isnan_inf( double x );
```
"""
function magma_d_isnan_inf(x)
    ccall((:magma_d_isnan_inf, libmagma), Cint, (Cdouble,), x)
end

"""
    magma_dmake_lwork(lwork)


### Prototype
```c
double magma_dmake_lwork( magma_int_t lwork );
```
"""
function magma_dmake_lwork(lwork)
    ccall((:magma_dmake_lwork, libmagma), Cdouble, (magma_int_t,), lwork)
end

"""
    magma_dnan_inf(uplo, m, n, A, lda, cnt_nan, cnt_inf)


### Prototype
```c
magma_int_t magma_dnan_inf( magma_uplo_t uplo, magma_int_t m, magma_int_t n, const double *A, magma_int_t lda, magma_int_t *cnt_nan, magma_int_t *cnt_inf);
```
"""
function magma_dnan_inf(uplo, m, n, A, lda, cnt_nan, cnt_inf)
    ccall((:magma_dnan_inf, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, m, n, A, lda, cnt_nan, cnt_inf)
end

"""
    magma_dnan_inf_gpu(uplo, m, n, dA, ldda, cnt_nan, cnt_inf, queue)


### Prototype
```c
magma_int_t magma_dnan_inf_gpu( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, magma_int_t *cnt_nan, magma_int_t *cnt_inf, magma_queue_t queue);
```
"""
function magma_dnan_inf_gpu(uplo, m, n, dA, ldda, cnt_nan, cnt_inf, queue)
    ccall((:magma_dnan_inf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), uplo, m, n, dA, ldda, cnt_nan, cnt_inf, queue)
end

"""
    magma_dprint(m, n, A, lda)


### Prototype
```c
void magma_dprint( magma_int_t m, magma_int_t n, const double *A, magma_int_t lda);
```
"""
function magma_dprint(m, n, A, lda)
    ccall((:magma_dprint, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t), m, n, A, lda)
end

"""
    magma_dprint_gpu(m, n, dA, ldda, queue)


### Prototype
```c
void magma_dprint_gpu( magma_int_t m, magma_int_t n, magmaDouble_const_ptr dA, magma_int_t ldda, magma_queue_t queue);
```
"""
function magma_dprint_gpu(m, n, dA, ldda, queue)
    ccall((:magma_dprint_gpu, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaDouble_const_ptr, magma_int_t, magma_queue_t), m, n, dA, ldda, queue)
end

"""
    magma_dpanel_to_q(uplo, ib, A, lda, work)


### Prototype
```c
void magma_dpanel_to_q( magma_uplo_t uplo, magma_int_t ib, double *A, magma_int_t lda, double *work);
```
"""
function magma_dpanel_to_q(uplo, ib, A, lda, work)
    ccall((:magma_dpanel_to_q, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}), uplo, ib, A, lda, work)
end

"""
    magma_dq_to_panel(uplo, ib, A, lda, work)


### Prototype
```c
void magma_dq_to_panel( magma_uplo_t uplo, magma_int_t ib, double *A, magma_int_t lda, double *work);
```
"""
function magma_dq_to_panel(uplo, ib, A, lda, work)
    ccall((:magma_dq_to_panel, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}), uplo, ib, A, lda, work)
end

"""
    magmablas_dextract_diag_sqrt(m, n, dA, ldda, dD, incd, queue)

auxiliary routines for posv-irgmres  
### Prototype
```c
void magmablas_dextract_diag_sqrt( magma_int_t m, magma_int_t n, double* dA, magma_int_t ldda, double* dD, magma_int_t incd, magma_queue_t queue);
```
"""
function magmablas_dextract_diag_sqrt(m, n, dA, ldda, dD, incd, queue)
    ccall((:magmablas_dextract_diag_sqrt, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t), m, n, dA, ldda, dD, incd, queue)
end

"""
    magmablas_dscal_shift_hpd(uplo, n, dA, ldda, dD, incd, miu, cn, eps, queue)


### Prototype
```c
void magmablas_dscal_shift_hpd( magma_uplo_t uplo, int n, double* dA, int ldda, double* dD, int incd, double miu, double cn, double eps, magma_queue_t queue);
```
"""
function magmablas_dscal_shift_hpd(uplo, n, dA, ldda, dD, incd, miu, cn, eps, queue)
    ccall((:magmablas_dscal_shift_hpd, libmagma), Cvoid, (magma_uplo_t, Cint, Ptr{Cdouble}, Cint, Ptr{Cdouble}, Cint, Cdouble, Cdouble, Cdouble, magma_queue_t), uplo, n, dA, ldda, dD, incd, miu, cn, eps, queue)
end

"""
    magmablas_ddimv_invert(n, alpha, dD, incd, dx, incx, beta, dy, incy, queue)


### Prototype
```c
void magmablas_ddimv_invert( magma_int_t n, double alpha, double* dD, magma_int_t incd, double* dx, magma_int_t incx, double beta, double* dy, magma_int_t incy, magma_queue_t queue);
```
"""
function magmablas_ddimv_invert(n, alpha, dD, incd, dx, incx, beta, dy, incy, queue)
    ccall((:magmablas_ddimv_invert, libmagma), Cvoid, (magma_int_t, Cdouble, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Cdouble, Ptr{Cdouble}, magma_int_t, magma_queue_t), n, alpha, dD, incd, dx, incx, beta, dy, incy, queue)
end

"""
    sgehrd_data

//**
Structure containing matrices for multi-GPU sgehrd.

- dA  is distributed column block-cyclic across GPUs.
- dV  is duplicated on all GPUs.
- dVd is distributed row block-cyclic across GPUs (TODO: verify).
- dY  is partial results on each GPU in slahr2,
then complete results are duplicated on all GPUs for slahru.
- dW  is local to each GPU (workspace).
- dTi is duplicated on all GPUs.

@ingroup magma_gehrd
"""
struct sgehrd_data
    ngpu::magma_int_t
    ldda::magma_int_t
    ldv::magma_int_t
    ldvd::magma_int_t
    dA::NTuple{8, magmaFloat_ptr}
    dV::NTuple{8, magmaFloat_ptr}
    dVd::NTuple{8, magmaFloat_ptr}
    dY::NTuple{8, magmaFloat_ptr}
    dW::NTuple{8, magmaFloat_ptr}
    dTi::NTuple{8, magmaFloat_ptr}
    queues::NTuple{8, magma_queue_t}
end

# no prototype is found for this function at magma_s.h:27:13, please use with caution
"""
    magma_get_slaex3_m_nb()


### Prototype
```c
magma_int_t magma_get_slaex3_m_nb();
```
"""
function magma_get_slaex3_m_nb()
    ccall((:magma_get_slaex3_m_nb, libmagma), magma_int_t, ())
end

"""
    magma_get_spotrf_nb(n)

Cholesky, LU, symmetric indefinite
### Prototype
```c
magma_int_t magma_get_spotrf_nb( magma_int_t n );
```
"""
function magma_get_spotrf_nb(n)
    ccall((:magma_get_spotrf_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_sgetrf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_sgetrf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_sgetrf_nb(m, n)
    ccall((:magma_get_sgetrf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_sgetrf_native_nb(m, n)


### Prototype
```c
magma_int_t magma_get_sgetrf_native_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_sgetrf_native_nb(m, n)
    ccall((:magma_get_sgetrf_native_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_sgetri_nb(n)


### Prototype
```c
magma_int_t magma_get_sgetri_nb( magma_int_t n );
```
"""
function magma_get_sgetri_nb(n)
    ccall((:magma_get_sgetri_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_ssytrf_nb(n)


### Prototype
```c
magma_int_t magma_get_ssytrf_nb( magma_int_t n );
```
"""
function magma_get_ssytrf_nb(n)
    ccall((:magma_get_ssytrf_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_ssytrf_nopiv_nb(n)


### Prototype
```c
magma_int_t magma_get_ssytrf_nopiv_nb( magma_int_t n );
```
"""
function magma_get_ssytrf_nopiv_nb(n)
    ccall((:magma_get_ssytrf_nopiv_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_ssytrf_aasen_nb(n)


### Prototype
```c
magma_int_t magma_get_ssytrf_aasen_nb( magma_int_t n );
```
"""
function magma_get_ssytrf_aasen_nb(n)
    ccall((:magma_get_ssytrf_aasen_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_sgeqp3_nb(m, n)

QR
### Prototype
```c
magma_int_t magma_get_sgeqp3_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_sgeqp3_nb(m, n)
    ccall((:magma_get_sgeqp3_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_sgeqrf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_sgeqrf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_sgeqrf_nb(m, n)
    ccall((:magma_get_sgeqrf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_sgeqlf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_sgeqlf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_sgeqlf_nb(m, n)
    ccall((:magma_get_sgeqlf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_sgelqf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_sgelqf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_sgelqf_nb(m, n)
    ccall((:magma_get_sgelqf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_sgehrd_nb(n)

eigenvalues
### Prototype
```c
magma_int_t magma_get_sgehrd_nb( magma_int_t n );
```
"""
function magma_get_sgehrd_nb(n)
    ccall((:magma_get_sgehrd_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_ssytrd_nb(n)


### Prototype
```c
magma_int_t magma_get_ssytrd_nb( magma_int_t n );
```
"""
function magma_get_ssytrd_nb(n)
    ccall((:magma_get_ssytrd_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_ssygst_nb(n)


### Prototype
```c
magma_int_t magma_get_ssygst_nb( magma_int_t n );
```
"""
function magma_get_ssygst_nb(n)
    ccall((:magma_get_ssygst_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_ssygst_m_nb(n)


### Prototype
```c
magma_int_t magma_get_ssygst_m_nb( magma_int_t n );
```
"""
function magma_get_ssygst_m_nb(n)
    ccall((:magma_get_ssygst_m_nb, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_sgebrd_nb(m, n)

SVD
### Prototype
```c
magma_int_t magma_get_sgebrd_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_sgebrd_nb(m, n)
    ccall((:magma_get_sgebrd_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_sgesvd_nb(m, n)


### Prototype
```c
magma_int_t magma_get_sgesvd_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_sgesvd_nb(m, n)
    ccall((:magma_get_sgesvd_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_sbulge_nb(n, nbthreads)

2-stage eigenvalues
### Prototype
```c
magma_int_t magma_get_sbulge_nb( magma_int_t n, magma_int_t nbthreads );
```
"""
function magma_get_sbulge_nb(n, nbthreads)
    ccall((:magma_get_sbulge_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), n, nbthreads)
end

"""
    magma_get_sbulge_nb_mgpu(n)


### Prototype
```c
magma_int_t magma_get_sbulge_nb_mgpu( magma_int_t n );
```
"""
function magma_get_sbulge_nb_mgpu(n)
    ccall((:magma_get_sbulge_nb_mgpu, libmagma), magma_int_t, (magma_int_t,), n)
end

"""
    magma_get_sbulge_vblksiz(n, nb, nbthreads)


### Prototype
```c
magma_int_t magma_get_sbulge_vblksiz( magma_int_t n, magma_int_t nb, magma_int_t nbthreads );
```
"""
function magma_get_sbulge_vblksiz(n, nb, nbthreads)
    ccall((:magma_get_sbulge_vblksiz, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t), n, nb, nbthreads)
end

# no prototype is found for this function at magma_s.h:59:13, please use with caution
"""
    magma_get_sbulge_gcperf()


### Prototype
```c
magma_int_t magma_get_sbulge_gcperf();
```
"""
function magma_get_sbulge_gcperf()
    ccall((:magma_get_sbulge_gcperf, libmagma), magma_int_t, ())
end

"""
    magma_ssidi(uplo, A, lda, n, ipiv, det, inert, work, job, info)

only applicable to real [sd] precisions
### Prototype
```c
magma_int_t magma_ssidi( magma_uplo_t uplo, float *A, magma_int_t lda, magma_int_t n, magma_int_t *ipiv, float *det, magma_int_t *inert, float *work, magma_int_t job, magma_int_t *info);
```
"""
function magma_ssidi(uplo, A, lda, n, ipiv, det, inert, work, job, info)
    ccall((:magma_ssidi, libmagma), magma_int_t, (magma_uplo_t, Ptr{Cfloat}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{magma_int_t}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), uplo, A, lda, n, ipiv, det, inert, work, job, info)
end

"""
    magma_smove_eig(range, n, w, il, iu, vl, vu, mout)


### Prototype
```c
void magma_smove_eig( magma_range_t range, magma_int_t n, float *w, magma_int_t *il, magma_int_t *iu, float vl, float vu, magma_int_t *mout);
```
"""
function magma_smove_eig(range, n, w, il, iu, vl, vu, mout)
    ccall((:magma_smove_eig, libmagma), Cvoid, (magma_range_t, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Cfloat, Ptr{magma_int_t}), range, n, w, il, iu, vl, vu, mout)
end

"""
    magma_svrange(k, d, il, iu, vl, vu)

defined in slaex3.cpp
### Prototype
```c
void magma_svrange( magma_int_t k, float *d, magma_int_t *il, magma_int_t *iu, float vl, float vu);
```
"""
function magma_svrange(k, d, il, iu, vl, vu)
    ccall((:magma_svrange, libmagma), Cvoid, (magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}, Ptr{magma_int_t}, Cfloat, Cfloat), k, d, il, iu, vl, vu)
end

"""
    magma_sirange(k, indxq, iil, iiu, il, iu)


### Prototype
```c
void magma_sirange( magma_int_t k, magma_int_t *indxq, magma_int_t *iil, magma_int_t *iiu, magma_int_t il, magma_int_t iu);
```
"""
function magma_sirange(k, indxq, iil, iiu, il, iu)
    ccall((:magma_sirange, libmagma), Cvoid, (magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_int_t), k, indxq, iil, iiu, il, iu)
end

"""
    magma_sgebrd(m, n, A, lda, d, e, tauq, taup, work, lwork, info)

------------------------------------------------------------ zge routines
### Prototype
```c
magma_int_t magma_sgebrd( magma_int_t m, magma_int_t n, float *A, magma_int_t lda, float *d, float *e, float *tauq, float *taup, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgebrd(m, n, A, lda, d, e, tauq, taup, work, lwork, info)
    ccall((:magma_sgebrd, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, d, e, tauq, taup, work, lwork, info)
end

"""
    magma_sgeev(jobvl, jobvr, n, A, lda, wr, wi, VL, ldvl, VR, ldvr, work, lwork, info)


### Prototype
```c
magma_int_t magma_sgeev( magma_vec_t jobvl, magma_vec_t jobvr, magma_int_t n, float *A, magma_int_t lda, #ifdef MAGMA_COMPLEX float *w, #else float *wr, float *wi, #endif float *VL, magma_int_t ldvl, float *VR, magma_int_t ldvr, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_sgeev(jobvl, jobvr, n, A, lda, wr, wi, VL, ldvl, VR, ldvr, work, lwork, info)
    ccall((:magma_sgeev, libmagma), magma_int_t, (magma_vec_t, magma_vec_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), jobvl, jobvr, n, A, lda, wr, wi, VL, ldvl, VR, ldvr, work, lwork, info)
end

"""
    magma_sgeev_m(jobvl, jobvr, n, A, lda, wr, wi, VL, ldvl, VR, ldvr, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgeev_m( magma_vec_t jobvl, magma_vec_t jobvr, magma_int_t n, float *A, magma_int_t lda, #ifdef MAGMA_COMPLEX float *w, #else float *wr, float *wi, #endif float *VL, magma_int_t ldvl, float *VR, magma_int_t ldvr, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_sgeev_m(jobvl, jobvr, n, A, lda, wr, wi, VL, ldvl, VR, ldvr, work, lwork, info)
    ccall((:magma_sgeev_m, libmagma), magma_int_t, (magma_vec_t, magma_vec_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), jobvl, jobvr, n, A, lda, wr, wi, VL, ldvl, VR, ldvr, work, lwork, info)
end

"""
    magma_sgegqr_gpu(ikind, m, n, dA, ldda, dwork, work, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgegqr_gpu( magma_int_t ikind, magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dwork, float *work, magma_int_t *info);
```
"""
function magma_sgegqr_gpu(ikind, m, n, dA, ldda, dwork, work, info)
    ccall((:magma_sgegqr_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, Ptr{Cfloat}, Ptr{magma_int_t}), ikind, m, n, dA, ldda, dwork, work, info)
end

"""
    magma_sgehrd(n, ilo, ihi, A, lda, tau, work, lwork, dT, info)


### Prototype
```c
magma_int_t magma_sgehrd( magma_int_t n, magma_int_t ilo, magma_int_t ihi, float *A, magma_int_t lda, float *tau, float *work, magma_int_t lwork, magmaFloat_ptr dT, magma_int_t *info);
```
"""
function magma_sgehrd(n, ilo, ihi, A, lda, tau, work, lwork, dT, info)
    ccall((:magma_sgehrd, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, work, lwork, dT, info)
end

"""
    magma_sgehrd_m(n, ilo, ihi, A, lda, tau, work, lwork, T, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgehrd_m( magma_int_t n, magma_int_t ilo, magma_int_t ihi, float *A, magma_int_t lda, float *tau, float *work, magma_int_t lwork, float *T, magma_int_t *info);
```
"""
function magma_sgehrd_m(n, ilo, ihi, A, lda, tau, work, lwork, T, info)
    ccall((:magma_sgehrd_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, work, lwork, T, info)
end

"""
    magma_sgehrd2(n, ilo, ihi, A, lda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgehrd2( magma_int_t n, magma_int_t ilo, magma_int_t ihi, float *A, magma_int_t lda, float *tau, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgehrd2(n, ilo, ihi, A, lda, tau, work, lwork, info)
    ccall((:magma_sgehrd2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, work, lwork, info)
end

"""
    magma_sgelqf(m, n, A, lda, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_sgelqf( magma_int_t m, magma_int_t n, float *A, magma_int_t lda, float *tau, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgelqf(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_sgelqf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_sgelqf_gpu(m, n, dA, ldda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgelqf_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, float *tau, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgelqf_gpu(m, n, dA, ldda, tau, work, lwork, info)
    ccall((:magma_sgelqf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, dA, ldda, tau, work, lwork, info)
end

"""
    magma_sgels(trans, m, n, nrhs, A, lda, B, ldb, hwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgels( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr A, magma_int_t lda, magmaFloat_ptr B, magma_int_t ldb, float *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgels(trans, m, n, nrhs, A, lda, B, ldb, hwork, lwork, info)
    ccall((:magma_sgels, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), trans, m, n, nrhs, A, lda, B, ldb, hwork, lwork, info)
end

"""
    magma_sggrqf(m, p, n, A, lda, taua, B, ldb, taub, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sggrqf( magma_int_t m, magma_int_t p, magma_int_t n, float *A, magma_int_t lda, float *taua, float *B, magma_int_t ldb, float *taub, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sggrqf(m, p, n, A, lda, taua, B, ldb, taub, work, lwork, info)
    ccall((:magma_sggrqf, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, p, n, A, lda, taua, B, ldb, taub, work, lwork, info)
end

"""
    magma_sgglse(m, n, p, A, lda, B, ldb, c, d, x, work, lwork, info)


### Prototype
```c
magma_int_t magma_sgglse( magma_int_t m, magma_int_t n, magma_int_t p, float *A, magma_int_t lda, float *B, magma_int_t ldb, float *c, float *d, float *x, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgglse(m, n, p, A, lda, B, ldb, c, d, x, work, lwork, info)
    ccall((:magma_sgglse, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, p, A, lda, B, ldb, c, d, x, work, lwork, info)
end

"""
    magma_sgels_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)


### Prototype
```c
magma_int_t magma_sgels_gpu( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, float *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgels_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
    ccall((:magma_sgels_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, PtrOrCuPtr{Cfloat}, magma_int_t, PtrOrCuPtr{magma_int_t}), trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
end

"""
    magma_sgels3_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgels3_gpu( magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, float *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgels3_gpu(trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
    ccall((:magma_sgels3_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), trans, m, n, nrhs, dA, ldda, dB, lddb, hwork, lwork, info)
end

"""
    magma_sgeqlf(m, n, A, lda, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_sgeqlf( magma_int_t m, magma_int_t n, float *A, magma_int_t lda, float *tau, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgeqlf(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_sgeqlf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_sgeqp3(m, n, A, lda, jpvt, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgeqp3( magma_int_t m, magma_int_t n, float *A, magma_int_t lda, magma_int_t *jpvt, float *tau, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_sgeqp3(m, n, A, lda, jpvt, tau, work, lwork, info)
    ccall((:magma_sgeqp3, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, jpvt, tau, work, lwork, info)
end

"""
    magma_sgeqp3_gpu(m, n, dA, ldda, jpvt, tau, dwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgeqp3_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *jpvt, float *tau, magmaFloat_ptr dwork, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_sgeqp3_gpu(m, n, dA, ldda, jpvt, tau, dwork, lwork, info)
    ccall((:magma_sgeqp3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), m, n, dA, ldda, jpvt, tau, dwork, lwork, info)
end

"""
    magma_sgeqr2_gpu(m, n, dA, ldda, dtau, dwork, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgeqr2_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dtau, magmaFloat_ptr dwork, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_sgeqr2_gpu(m, n, dA, ldda, dtau, dwork, queue, info)
    ccall((:magma_sgeqr2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magma_queue_t, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dwork, queue, info)
end

"""
    magma_sgeqr2x_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgeqr2x_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dtau, magmaFloat_ptr dT, magmaFloat_ptr ddA, magmaFloat_ptr dwork, magma_int_t *info);
```
"""
function magma_sgeqr2x_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)
    ccall((:magma_sgeqr2x_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, info)
end

"""
    magma_sgeqr2x2_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgeqr2x2_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dtau, magmaFloat_ptr dT, magmaFloat_ptr ddA, magmaFloat_ptr dwork, magma_int_t *info);
```
"""
function magma_sgeqr2x2_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)
    ccall((:magma_sgeqr2x2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, info)
end

"""
    magma_sgeqr2x3_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)


### Prototype
```c
magma_int_t magma_sgeqr2x3_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dtau, magmaFloat_ptr dT, magmaFloat_ptr ddA, magmaFloat_ptr dwork, magma_int_t *info);
```
"""
function magma_sgeqr2x3_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, info)
    ccall((:magma_sgeqr2x3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, info)
end

"""
    magma_sgeqr2x4_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgeqr2x4_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dtau, magmaFloat_ptr dT, magmaFloat_ptr ddA, magmaFloat_ptr dwork, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_sgeqr2x4_gpu(m, n, dA, ldda, dtau, dT, ddA, dwork, queue, info)
    ccall((:magma_sgeqr2x4_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magma_queue_t, Ptr{magma_int_t}), m, n, dA, ldda, dtau, dT, ddA, dwork, queue, info)
end

"""
    magma_sgeqrf(m, n, A, lda, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_sgeqrf( magma_int_t m, magma_int_t n, float *A, magma_int_t lda, float *tau, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgeqrf(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_sgeqrf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_sgeqrf_gpu(m, n, dA, ldda, tau, dT, info)


### Prototype
```c
magma_int_t magma_sgeqrf_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, float *tau, magmaFloat_ptr dT, magma_int_t *info);
```
"""
function magma_sgeqrf_gpu(m, n, dA, ldda, tau, dT, info)
    ccall((:magma_sgeqrf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, PtrOrCuPtr{Cfloat}, magmaFloat_ptr, PtrOrCuPtr{magma_int_t}), m, n, dA, ldda, tau, dT, info)
end

"""
    magma_sgeqrf_m(ngpu, m, n, A, lda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgeqrf_m( magma_int_t ngpu, magma_int_t m, magma_int_t n, float *A, magma_int_t lda, float *tau, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgeqrf_m(ngpu, m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_sgeqrf_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), ngpu, m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_sgeqrf_ooc(m, n, A, lda, tau, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgeqrf_ooc( magma_int_t m, magma_int_t n, float *A, magma_int_t lda, float *tau, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgeqrf_ooc(m, n, A, lda, tau, work, lwork, info)
    ccall((:magma_sgeqrf_ooc, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, tau, work, lwork, info)
end

"""
    magma_sgeqrf2_gpu(m, n, dA, ldda, tau, info)


### Prototype
```c
magma_int_t magma_sgeqrf2_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, float *tau, magma_int_t *info);
```
"""
function magma_sgeqrf2_gpu(m, n, dA, ldda, tau, info)
    ccall((:magma_sgeqrf2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}), m, n, dA, ldda, tau, info)
end

"""
    magma_sgeqrf2_mgpu(ngpu, m, n, d_lA, ldda, tau, info)


### Prototype
```c
magma_int_t magma_sgeqrf2_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magmaFloat_ptr d_lA[], magma_int_t ldda, float *tau, magma_int_t *info);
```
"""
function magma_sgeqrf2_mgpu(ngpu, m, n, d_lA, ldda, tau, info)
    ccall((:magma_sgeqrf2_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}), ngpu, m, n, d_lA, ldda, tau, info)
end

"""
    magma_sgeqrf3_gpu(m, n, dA, ldda, tau, dT, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgeqrf3_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, float *tau, magmaFloat_ptr dT, magma_int_t *info);
```
"""
function magma_sgeqrf3_gpu(m, n, dA, ldda, tau, dT, info)
    ccall((:magma_sgeqrf3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magmaFloat_ptr, Ptr{magma_int_t}), m, n, dA, ldda, tau, dT, info)
end

"""
    magma_sgeqrs_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)


### Prototype
```c
magma_int_t magma_sgeqrs_gpu( magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaFloat_const_ptr dA, magma_int_t ldda, float const *tau, magmaFloat_ptr dT, magmaFloat_ptr dB, magma_int_t lddb, float *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgeqrs_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
    ccall((:magma_sgeqrs_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{Cfloat}, magmaFloat_ptr, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
end

"""
    magma_sgeqrs3_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgeqrs3_gpu( magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, float const *tau, magmaFloat_ptr dT, magmaFloat_ptr dB, magma_int_t lddb, float *hwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgeqrs3_gpu(m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
    ccall((:magma_sgeqrs3_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magmaFloat_ptr, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, nrhs, dA, ldda, tau, dT, dB, lddb, hwork, lwork, info)
end

"""
    magma_sgerbt_gpu(gen, n, nrhs, dA, ldda, dB, lddb, U, V, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgerbt_gpu( magma_bool_t gen, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, float *U, float *V, magma_int_t *info);
```
"""
function magma_sgerbt_gpu(gen, n, nrhs, dA, ldda, dB, lddb, U, V, info)
    ccall((:magma_sgerbt_gpu, libmagma), magma_int_t, (magma_bool_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magma_int_t}), gen, n, nrhs, dA, ldda, dB, lddb, U, V, info)
end

"""
    magma_sgerfs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dAF, iter, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgerfs_nopiv_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, magmaFloat_ptr dX, magma_int_t lddx, magmaFloat_ptr dworkd, magmaFloat_ptr dAF, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_sgerfs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dAF, iter, info)
    ccall((:magma_sgerfs_nopiv_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magmaFloat_ptr, Ptr{magma_int_t}, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dAF, iter, info)
end

"""
    magma_sgesdd(jobz, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, iwork, info)


### Prototype
```c
magma_int_t magma_sgesdd( magma_vec_t jobz, magma_int_t m, magma_int_t n, float *A, magma_int_t lda, float *s, float *U, magma_int_t ldu, float *VT, magma_int_t ldvt, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *iwork, magma_int_t *info);
```
"""
function magma_sgesdd(jobz, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, iwork, info)
    ccall((:magma_sgesdd, libmagma), magma_int_t, (magma_vec_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), jobz, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, iwork, info)
end

"""
    magma_sgesv(n, nrhs, A, lda, ipiv, B, ldb, info)


### Prototype
```c
magma_int_t magma_sgesv( magma_int_t n, magma_int_t nrhs, float *A, magma_int_t lda, magma_int_t *ipiv, float *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_sgesv(n, nrhs, A, lda, ipiv, B, ldb, info)
    ccall((:magma_sgesv, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), n, nrhs, A, lda, ipiv, B, ldb, info)
end

"""
    magma_sgesv_gpu(n, nrhs, dA, ldda, ipiv, dB, lddb, info)


### Prototype
```c
magma_int_t magma_sgesv_gpu( magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaFloat_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_sgesv_gpu(n, nrhs, dA, ldda, ipiv, dB, lddb, info)
    ccall((:magma_sgesv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, magmaFloat_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), n, nrhs, dA, ldda, ipiv, dB, lddb, info)
end

"""
    magma_sgesv_nopiv_gpu(n, nrhs, dA, ldda, dB, lddb, info)


### Prototype
```c
magma_int_t magma_sgesv_nopiv_gpu( magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_sgesv_nopiv_gpu(n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_sgesv_nopiv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_sgesv_rbt(ref, n, nrhs, A, lda, B, ldb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgesv_rbt( magma_bool_t ref, magma_int_t n, magma_int_t nrhs, float *A, magma_int_t lda, float *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_sgesv_rbt(ref, n, nrhs, A, lda, B, ldb, info)
    ccall((:magma_sgesv_rbt, libmagma), magma_int_t, (magma_bool_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), ref, n, nrhs, A, lda, B, ldb, info)
end

"""
    magma_sgesvd(jobu, jobvt, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, info)


### Prototype
```c
magma_int_t magma_sgesvd( magma_vec_t jobu, magma_vec_t jobvt, magma_int_t m, magma_int_t n, float *A, magma_int_t lda, float *s, float *U, magma_int_t ldu, float *VT, magma_int_t ldvt, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_sgesvd(jobu, jobvt, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, info)
    ccall((:magma_sgesvd, libmagma), magma_int_t, (magma_vec_t, magma_vec_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), jobu, jobvt, m, n, A, lda, s, U, ldu, VT, ldvt, work, lwork, info)
end

"""
    magma_sgetf2_gpu(m, n, dA, ldda, ipiv, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgetf2_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_sgetf2_gpu(m, n, dA, ldda, ipiv, queue, info)
    ccall((:magma_sgetf2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, magma_queue_t, Ptr{magma_int_t}), m, n, dA, ldda, ipiv, queue, info)
end

"""
    magma_sgetf2_native_fused(m, n, dA, ldda, ipiv, gbstep, flags, info, queue)


### Prototype
```c
magma_int_t magma_sgetf2_native_fused( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t gbstep, magma_int_t *flags, magma_int_t *info, magma_queue_t queue );
```
"""
function magma_sgetf2_native_fused(m, n, dA, ldda, ipiv, gbstep, flags, info, queue)
    ccall((:magma_sgetf2_native_fused, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), m, n, dA, ldda, ipiv, gbstep, flags, info, queue)
end

"""
    magma_sgetf2_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)


### Prototype
```c
magma_int_t magma_sgetf2_native( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *dipiv, magma_int_t* dipivinfo, magma_int_t *dinfo, magma_int_t gbstep, magma_queue_t queue, magma_queue_t update_queue);
```
"""
function magma_sgetf2_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
    ccall((:magma_sgetf2_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t, magma_queue_t), m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
end

"""
    magma_sgetf2_nopiv(m, n, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgetf2_nopiv( magma_int_t m, magma_int_t n, float *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_sgetf2_nopiv(m, n, A, lda, info)
    ccall((:magma_sgetf2_nopiv, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, info)
end

"""
    magma_sgetrf_recpanel_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)


### Prototype
```c
magma_int_t magma_sgetrf_recpanel_native( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t* dipiv, magma_int_t* dipivinfo, magma_int_t *dinfo, magma_int_t gbstep, magma_queue_t queue, magma_queue_t update_queue );
```
"""
function magma_sgetrf_recpanel_native(m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
    ccall((:magma_sgetrf_recpanel_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_queue_t, magma_queue_t), m, n, dA, ldda, dipiv, dipivinfo, dinfo, gbstep, queue, update_queue)
end

"""
    magma_sgetrf(m, n, A, lda, ipiv, info)


### Prototype
```c
magma_int_t magma_sgetrf( magma_int_t m, magma_int_t n, float *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_sgetrf(m, n, A, lda, ipiv, info)
    ccall((:magma_sgetrf, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, A, lda, ipiv, info)
end

"""
    magma_sgetrf_gpu(m, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_sgetrf_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_sgetrf_gpu(m, n, dA, ldda, ipiv, info)
    ccall((:magma_sgetrf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, PtrOrCuPtr{magma_int_t}), m, n, dA, ldda, ipiv, info)
end

"""
    magma_sgetrf_gpu_expert(m, n, dA, ldda, ipiv, info, nb, mode)


### Prototype
```c
magma_int_t magma_sgetrf_gpu_expert( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info, magma_int_t nb, magma_mode_t mode);
```
"""
function magma_sgetrf_gpu_expert(m, n, dA, ldda, ipiv, info, nb, mode)
    ccall((:magma_sgetrf_gpu_expert, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_int_t, magma_mode_t), m, n, dA, ldda, ipiv, info, nb, mode)
end

"""
    magma_sgetrf_native(m, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_sgetrf_native( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info );
```
"""
function magma_sgetrf_native(m, n, dA, ldda, ipiv, info)
    ccall((:magma_sgetrf_native, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, dA, ldda, ipiv, info)
end

"""
    magma_sgetrf_m(ngpu, m, n, A, lda, ipiv, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgetrf_m( magma_int_t ngpu, magma_int_t m, magma_int_t n, float *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_sgetrf_m(ngpu, m, n, A, lda, ipiv, info)
    ccall((:magma_sgetrf_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), ngpu, m, n, A, lda, ipiv, info)
end

"""
    magma_sgetrf_mgpu(ngpu, m, n, d_lA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_sgetrf_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magmaFloat_ptr d_lA[], magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_sgetrf_mgpu(ngpu, m, n, d_lA, ldda, ipiv, info)
    ccall((:magma_sgetrf_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), ngpu, m, n, d_lA, ldda, ipiv, info)
end

"""
    magma_sgetrf2(m, n, A, lda, ipiv, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgetrf2( magma_int_t m, magma_int_t n, float *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_sgetrf2(m, n, A, lda, ipiv, info)
    ccall((:magma_sgetrf2, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, A, lda, ipiv, info)
end

"""
    magma_sgetrf2_mgpu(ngpu, m, n, nb, offset, d_lAT, lddat, ipiv, d_lAP, W, ldw, queues, info)


### Prototype
```c
magma_int_t magma_sgetrf2_mgpu( magma_int_t ngpu, magma_int_t m, magma_int_t n, magma_int_t nb, magma_int_t offset, magmaFloat_ptr d_lAT[], magma_int_t lddat, magma_int_t *ipiv, magmaFloat_ptr d_lAP[], float *W, magma_int_t ldw, magma_queue_t queues[][2], magma_int_t *info);
```
"""
function magma_sgetrf2_mgpu(ngpu, m, n, nb, offset, d_lAT, lddat, ipiv, d_lAP, W, ldw, queues, info)
    ccall((:magma_sgetrf2_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magma_int_t}, Ptr{magmaFloat_ptr}, Ptr{Cfloat}, magma_int_t, Ptr{NTuple{2, magma_queue_t}}, Ptr{magma_int_t}), ngpu, m, n, nb, offset, d_lAT, lddat, ipiv, d_lAP, W, ldw, queues, info)
end

"""
    magma_sgetrf_nopiv(m, n, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgetrf_nopiv( magma_int_t m, magma_int_t n, float *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_sgetrf_nopiv(m, n, A, lda, info)
    ccall((:magma_sgetrf_nopiv, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, A, lda, info)
end

"""
    magma_sgetrf_nopiv_gpu(m, n, dA, ldda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgetrf_nopiv_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_sgetrf_nopiv_gpu(m, n, dA, ldda, info)
    ccall((:magma_sgetrf_nopiv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), m, n, dA, ldda, info)
end

"""
    magma_sgetri_gpu(n, dA, ldda, ipiv, dwork, lwork, info)


### Prototype
```c
magma_int_t magma_sgetri_gpu( magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaFloat_ptr dwork, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sgetri_gpu(n, dA, ldda, ipiv, dwork, lwork, info)
    ccall((:magma_sgetri_gpu, libmagma), magma_int_t, (magma_int_t, magmaFloat_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, magmaFloat_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), n, dA, ldda, ipiv, dwork, lwork, info)
end

"""
    magma_sgetrs_gpu(trans, n, nrhs, dA, ldda, ipiv, dB, lddb, info)


### Prototype
```c
magma_int_t magma_sgetrs_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaFloat_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_sgetrs_gpu(trans, n, nrhs, dA, ldda, ipiv, dB, lddb, info)
    ccall((:magma_sgetrs_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}, magmaFloat_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), trans, n, nrhs, dA, ldda, ipiv, dB, lddb, info)
end

"""
    magma_sgetrs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sgetrs_nopiv_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_sgetrs_nopiv_gpu(trans, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_sgetrs_nopiv_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_ssyevd(jobz, uplo, n, A, lda, w, work, lwork, iwork, liwork, info)

------------------------------------------------------------ zhe routines
### Prototype
```c
magma_int_t magma_ssyevd( magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float *w, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssyevd(jobz, uplo, n, A, lda, w, work, lwork, iwork, liwork, info)
    ccall((:magma_ssyevd, libmagma), magma_int_t, (magma_vec_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, uplo, n, A, lda, w, work, lwork, iwork, liwork, info)
end

"""
    magma_ssyevd_gpu(jobz, uplo, n, dA, ldda, w, wA, ldwa, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssyevd_gpu( magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, float *w, float *wA, magma_int_t ldwa, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssyevd_gpu(jobz, uplo, n, dA, ldda, w, wA, ldwa, work, lwork, iwork, liwork, info)
    ccall((:magma_ssyevd_gpu, libmagma), magma_int_t, (magma_vec_t, magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, uplo, n, dA, ldda, w, wA, ldwa, work, lwork, iwork, liwork, info)
end

"""
    magma_ssyevd_m(ngpu, jobz, uplo, n, A, lda, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssyevd_m( magma_int_t ngpu, magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float *w, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssyevd_m(ngpu, jobz, uplo, n, A, lda, w, work, lwork, iwork, liwork, info)
    ccall((:magma_ssyevd_m, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, jobz, uplo, n, A, lda, w, work, lwork, iwork, liwork, info)
end

"""
    magma_ssyevdx(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssyevdx( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssyevdx(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_ssyevdx, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_ssyevdx_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, mout, w, wA, ldwa, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssyevdx_gpu( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, float *wA, magma_int_t ldwa, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssyevdx_gpu(jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, mout, w, wA, ldwa, work, lwork, iwork, liwork, info)
    ccall((:magma_ssyevdx_gpu, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, dA, ldda, vl, vu, il, iu, mout, w, wA, ldwa, work, lwork, iwork, liwork, info)
end

"""
    magma_ssyevdx_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssyevdx_m( magma_int_t ngpu, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssyevdx_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_ssyevdx_m, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_ssyevdx_2stage(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssyevdx_2stage( magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssyevdx_2stage(jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_ssyevdx_2stage, libmagma), magma_int_t, (magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_ssyevdx_2stage_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssyevdx_2stage_m( magma_int_t ngpu, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssyevdx_2stage_m(ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_ssyevdx_2stage_m, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, jobz, range, uplo, n, A, lda, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_ssygst(itype, uplo, n, A, lda, B, ldb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssygst( magma_int_t itype, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_ssygst(itype, uplo, n, A, lda, B, ldb, info)
    ccall((:magma_ssygst, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), itype, uplo, n, A, lda, B, ldb, info)
end

"""
    magma_ssygst_gpu(itype, uplo, n, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssygst_gpu( magma_int_t itype, magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_const_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_ssygst_gpu(itype, uplo, n, dA, ldda, dB, lddb, info)
    ccall((:magma_ssygst_gpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{magma_int_t}), itype, uplo, n, dA, ldda, dB, lddb, info)
end

"""
    magma_ssygst_m(ngpu, itype, uplo, n, A, lda, B, ldb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssygst_m( magma_int_t ngpu, magma_int_t itype, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_ssygst_m(ngpu, itype, uplo, n, A, lda, B, ldb, info)
    ccall((:magma_ssygst_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, uplo, n, A, lda, B, ldb, info)
end

"""
    magma_ssygvd(itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssygvd( magma_int_t itype, magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float *B, magma_int_t ldb, float *w, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssygvd(itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, iwork, liwork, info)
    ccall((:magma_ssygvd, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, iwork, liwork, info)
end

"""
    magma_ssygvd_m(ngpu, itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssygvd_m( magma_int_t ngpu, magma_int_t itype, magma_vec_t jobz, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float *B, magma_int_t ldb, float *w, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssygvd_m(ngpu, itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, iwork, liwork, info)
    ccall((:magma_ssygvd_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_vec_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, jobz, uplo, n, A, lda, B, ldb, w, work, lwork, iwork, liwork, info)
end

"""
    magma_ssygvdx(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssygvdx( magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float *B, magma_int_t ldb, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssygvdx(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_ssygvdx, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_ssygvdx_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssygvdx_m( magma_int_t ngpu, magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float *B, magma_int_t ldb, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssygvdx_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_ssygvdx_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_ssygvdx_2stage(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssygvdx_2stage( magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float *B, magma_int_t ldb, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssygvdx_2stage(itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_ssygvdx_2stage, libmagma), magma_int_t, (magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_ssygvdx_2stage_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssygvdx_2stage_m( magma_int_t ngpu, magma_int_t itype, magma_vec_t jobz, magma_range_t range, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float *B, magma_int_t ldb, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *mout, float *w, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, magma_int_t lrwork, #endif magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_ssygvdx_2stage_m(ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
    ccall((:magma_ssygvdx_2stage_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_vec_t, magma_range_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, itype, jobz, range, uplo, n, A, lda, B, ldb, vl, vu, il, iu, mout, w, work, lwork, iwork, liwork, info)
end

"""
    magma_ssysv(uplo, n, nrhs, A, lda, ipiv, B, ldb, info)


### Prototype
```c
magma_int_t magma_ssysv( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, float *A, magma_int_t lda, magma_int_t *ipiv, float *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_ssysv(uplo, n, nrhs, A, lda, ipiv, B, ldb, info)
    ccall((:magma_ssysv, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, A, lda, ipiv, B, ldb, info)
end

"""
    magma_ssysv_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssysv_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_ssysv_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_ssysv_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_ssytrd(uplo, n, A, lda, d, e, tau, work, lwork, info)


### Prototype
```c
magma_int_t magma_ssytrd( magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float *d, float *e, float *tau, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_ssytrd(uplo, n, A, lda, d, e, tau, work, lwork, info)
    ccall((:magma_ssytrd, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, d, e, tau, work, lwork, info)
end

"""
    magma_ssytrd_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssytrd_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, float *d, float *e, float *tau, float *wA, magma_int_t ldwa, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_ssytrd_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, info)
    ccall((:magma_ssytrd_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, info)
end

"""
    magma_ssytrd2_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, dwork, ldwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssytrd2_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, float *d, float *e, float *tau, float *wA, magma_int_t ldwa, float *work, magma_int_t lwork, magmaFloat_ptr dwork, magma_int_t ldwork, magma_int_t *info);
```
"""
function magma_ssytrd2_gpu(uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, dwork, ldwork, info)
    ccall((:magma_ssytrd2_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, d, e, tau, wA, ldwa, work, lwork, dwork, ldwork, info)
end

"""
    magma_ssytrd_mgpu(ngpu, nqueue, uplo, n, A, lda, d, e, tau, work, lwork, info)

TODO: rename magma_ssytrd_m?
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssytrd_mgpu( magma_int_t ngpu, magma_int_t nqueue, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, float *d, float *e, float *tau, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_ssytrd_mgpu(ngpu, nqueue, uplo, n, A, lda, d, e, tau, work, lwork, info)
    ccall((:magma_ssytrd_mgpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), ngpu, nqueue, uplo, n, A, lda, d, e, tau, work, lwork, info)
end

"""
    magma_ssytrd_sb2st(uplo, n, nb, Vblksiz, A, lda, d, e, V, ldv, TAU, compT, T, ldt)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssytrd_sb2st( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t Vblksiz, float *A, magma_int_t lda, float *d, float *e, float *V, magma_int_t ldv, float *TAU, magma_int_t compT, float *T, magma_int_t ldt);
```
"""
function magma_ssytrd_sb2st(uplo, n, nb, Vblksiz, A, lda, d, e, V, ldv, TAU, compT, T, ldt)
    ccall((:magma_ssytrd_sb2st, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t), uplo, n, nb, Vblksiz, A, lda, d, e, V, ldv, TAU, compT, T, ldt)
end

"""
    magma_ssytrd_sy2sb(uplo, n, nb, A, lda, tau, work, lwork, dT, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssytrd_sy2sb( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, float *tau, float *work, magma_int_t lwork, magmaFloat_ptr dT, magma_int_t *info);
```
"""
function magma_ssytrd_sy2sb(uplo, n, nb, A, lda, tau, work, lwork, dT, info)
    ccall((:magma_ssytrd_sy2sb, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, Ptr{magma_int_t}), uplo, n, nb, A, lda, tau, work, lwork, dT, info)
end

"""
    magma_ssytrd_sy2sb_mgpu(uplo, n, nb, A, lda, tau, work, lwork, dAmgpu, ldda, dTmgpu, lddt, ngpu, distblk, queues, nqueue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssytrd_sy2sb_mgpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, float *tau, float *work, magma_int_t lwork, magmaFloat_ptr dAmgpu[], magma_int_t ldda, magmaFloat_ptr dTmgpu[], magma_int_t lddt, magma_int_t ngpu, magma_int_t distblk, magma_queue_t queues[][20], magma_int_t nqueue, magma_int_t *info);
```
"""
function magma_ssytrd_sy2sb_mgpu(uplo, n, nb, A, lda, tau, work, lwork, dAmgpu, ldda, dTmgpu, lddt, ngpu, distblk, queues, nqueue, info)
    ccall((:magma_ssytrd_sy2sb_mgpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, magma_int_t, Ptr{NTuple{20, magma_queue_t}}, magma_int_t, Ptr{magma_int_t}), uplo, n, nb, A, lda, tau, work, lwork, dAmgpu, ldda, dTmgpu, lddt, ngpu, distblk, queues, nqueue, info)
end

"""
    magma_ssytrf(uplo, n, A, lda, ipiv, info)


### Prototype
```c
magma_int_t magma_ssytrf( magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_ssytrf(uplo, n, A, lda, ipiv, info)
    ccall((:magma_ssytrf, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, A, lda, ipiv, info)
end

"""
    magma_ssytrf_gpu(uplo, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_ssytrf_gpu( magma_uplo_t uplo, magma_int_t n, float *dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_ssytrf_gpu(uplo, n, dA, ldda, ipiv, info)
    ccall((:magma_ssytrf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, dA, ldda, ipiv, info)
end

"""
    magma_ssytrf_aasen(uplo, cpu_panel, n, A, lda, ipiv, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssytrf_aasen( magma_uplo_t uplo, magma_int_t cpu_panel, magma_int_t n, float *A, magma_int_t lda, magma_int_t *ipiv, magma_int_t *info);
```
"""
function magma_ssytrf_aasen(uplo, cpu_panel, n, A, lda, ipiv, info)
    ccall((:magma_ssytrf_aasen, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, cpu_panel, n, A, lda, ipiv, info)
end

"""
    magma_ssytrf_nopiv(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_ssytrf_nopiv( magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_ssytrf_nopiv(uplo, n, A, lda, info)
    ccall((:magma_ssytrf_nopiv, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_ssytrf_nopiv_cpu(uplo, n, ib, A, lda, info)


### Prototype
```c
magma_int_t magma_ssytrf_nopiv_cpu( magma_uplo_t uplo, magma_int_t n, magma_int_t ib, float *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_ssytrf_nopiv_cpu(uplo, n, ib, A, lda, info)
    ccall((:magma_ssytrf_nopiv_cpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), uplo, n, ib, A, lda, info)
end

"""
    magma_ssytrf_nopiv_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_ssytrf_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_ssytrf_nopiv_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_ssytrf_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_ssytrs_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_ssytrs_nopiv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_ssytrs_nopiv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_ssytrs_nopiv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_slaex0(n, d, e, Q, ldq, work, iwork, dwork, range, vl, vu, il, iu, info)

only applicable to real [sd] precisions
### Prototype
```c
magma_int_t magma_slaex0( magma_int_t n, float *d, float *e, float *Q, magma_int_t ldq, float *work, magma_int_t *iwork, magmaFloat_ptr dwork, magma_range_t range, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *info);
```
"""
function magma_slaex0(n, d, e, Q, ldq, work, iwork, dwork, range, vl, vu, il, iu, info)
    ccall((:magma_slaex0, libmagma), magma_int_t, (magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}, magmaFloat_ptr, magma_range_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}), n, d, e, Q, ldq, work, iwork, dwork, range, vl, vu, il, iu, info)
end

"""
    magma_slaex0_m(ngpu, n, d, e, Q, ldq, work, iwork, range, vl, vu, il, iu, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slaex0_m( magma_int_t ngpu, magma_int_t n, float *d, float *e, float *Q, magma_int_t ldq, float *work, magma_int_t *iwork, magma_range_t range, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *info);
```
"""
function magma_slaex0_m(ngpu, n, d, e, Q, ldq, work, iwork, range, vl, vu, il, iu, info)
    ccall((:magma_slaex0_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}, magma_range_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}), ngpu, n, d, e, Q, ldq, work, iwork, range, vl, vu, il, iu, info)
end

"""
    magma_slaex1(n, d, Q, ldq, indxq, rho, cutpnt, work, iwork, dwork, queue, range, vl, vu, il, iu, info)


### Prototype
```c
magma_int_t magma_slaex1( magma_int_t n, float *d, float *Q, magma_int_t ldq, magma_int_t *indxq, float rho, magma_int_t cutpnt, float *work, magma_int_t *iwork, magmaFloat_ptr dwork, magma_queue_t queue, magma_range_t range, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *info);
```
"""
function magma_slaex1(n, d, Q, ldq, indxq, rho, cutpnt, work, iwork, dwork, queue, range, vl, vu, il, iu, info)
    ccall((:magma_slaex1, libmagma), magma_int_t, (magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Cfloat, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}, magmaFloat_ptr, magma_queue_t, magma_range_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}), n, d, Q, ldq, indxq, rho, cutpnt, work, iwork, dwork, queue, range, vl, vu, il, iu, info)
end

"""
    magma_slaex1_m(ngpu, n, d, Q, ldq, indxq, rho, cutpnt, work, iwork, dwork, queues, range, vl, vu, il, iu, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slaex1_m( magma_int_t ngpu, magma_int_t n, float *d, float *Q, magma_int_t ldq, magma_int_t *indxq, float rho, magma_int_t cutpnt, float *work, magma_int_t *iwork, magmaFloat_ptr dwork[], magma_queue_t queues[MagmaMaxGPUs][2], magma_range_t range, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *info);
```
"""
function magma_slaex1_m(ngpu, n, d, Q, ldq, indxq, rho, cutpnt, work, iwork, dwork, queues, range, vl, vu, il, iu, info)
    ccall((:magma_slaex1_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Cfloat, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}, Ptr{magmaFloat_ptr}, Ptr{NTuple{2, magma_queue_t}}, magma_range_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}), ngpu, n, d, Q, ldq, indxq, rho, cutpnt, work, iwork, dwork, queues, range, vl, vu, il, iu, info)
end

"""
    magma_slaex3(k, n, n1, d, Q, ldq, rho, dlamda, Q2, indx, ctot, w, s, indxq, dwork, queue, range, vl, vu, il, iu, info)


### Prototype
```c
magma_int_t magma_slaex3( magma_int_t k, magma_int_t n, magma_int_t n1, float *d, float *Q, magma_int_t ldq, float rho, float *dlamda, float *Q2, magma_int_t *indx, magma_int_t *ctot, float *w, float *s, magma_int_t *indxq, magmaFloat_ptr dwork, magma_queue_t queue, magma_range_t range, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *info);
```
"""
function magma_slaex3(k, n, n1, d, Q, ldq, rho, dlamda, Q2, indx, ctot, w, s, indxq, dwork, queue, range, vl, vu, il, iu, info)
    ccall((:magma_slaex3, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Cfloat, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magma_int_t}, magmaFloat_ptr, magma_queue_t, magma_range_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}), k, n, n1, d, Q, ldq, rho, dlamda, Q2, indx, ctot, w, s, indxq, dwork, queue, range, vl, vu, il, iu, info)
end

"""
    magma_slaex3_m(ngpu, k, n, n1, d, Q, ldq, rho, dlamda, Q2, indx, ctot, w, s, indxq, dwork, queues, range, vl, vu, il, iu, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slaex3_m( magma_int_t ngpu, magma_int_t k, magma_int_t n, magma_int_t n1, float *d, float *Q, magma_int_t ldq, float rho, float *dlamda, float *Q2, magma_int_t *indx, magma_int_t *ctot, float *w, float *s, magma_int_t *indxq, magmaFloat_ptr dwork[], magma_queue_t queues[MagmaMaxGPUs][2], magma_range_t range, float vl, float vu, magma_int_t il, magma_int_t iu, magma_int_t *info);
```
"""
function magma_slaex3_m(ngpu, k, n, n1, d, Q, ldq, rho, dlamda, Q2, indx, ctot, w, s, indxq, dwork, queues, range, vl, vu, il, iu, info)
    ccall((:magma_slaex3_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Cfloat, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magma_int_t}, Ptr{magmaFloat_ptr}, Ptr{NTuple{2, magma_queue_t}}, magma_range_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{magma_int_t}), ngpu, k, n, n1, d, Q, ldq, rho, dlamda, Q2, indx, ctot, w, s, indxq, dwork, queues, range, vl, vu, il, iu, info)
end

"""
    magma_slabrd_gpu(m, n, nb, A, lda, dA, ldda, d, e, tauq, taup, X, ldx, dX, lddx, Y, ldy, dY, lddy, work, lwork, queue)


### Prototype
```c
magma_int_t magma_slabrd_gpu( magma_int_t m, magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, magmaFloat_ptr dA, magma_int_t ldda, float *d, float *e, float *tauq, float *taup, float *X, magma_int_t ldx, magmaFloat_ptr dX, magma_int_t lddx, float *Y, magma_int_t ldy, magmaFloat_ptr dY, magma_int_t lddy, float *work, magma_int_t lwork, magma_queue_t queue);
```
"""
function magma_slabrd_gpu(m, n, nb, A, lda, dA, ldda, d, e, tauq, taup, X, ldx, dX, lddx, Y, ldy, dY, lddy, work, lwork, queue)
    ccall((:magma_slabrd_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t), m, n, nb, A, lda, dA, ldda, d, e, tauq, taup, X, ldx, dX, lddx, Y, ldy, dY, lddy, work, lwork, queue)
end

"""
    magma_slasyf_gpu(uplo, n, nb, kb, dA, ldda, ipiv, dW, lddw, queues, info)


### Prototype
```c
magma_int_t magma_slasyf_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t *kb, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaFloat_ptr dW, magma_int_t lddw, magma_queue_t queues[], magma_int_t *info);
```
"""
function magma_slasyf_gpu(uplo, n, nb, kb, dA, ldda, ipiv, dW, lddw, queues, info)
    ccall((:magma_slasyf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, magmaFloat_ptr, magma_int_t, Ptr{magma_queue_t}, Ptr{magma_int_t}), uplo, n, nb, kb, dA, ldda, ipiv, dW, lddw, queues, info)
end

"""
    magma_slahr2(n, k, nb, dA, ldda, dV, lddv, A, lda, tau, T, ldt, Y, ldy, queue)


### Prototype
```c
magma_int_t magma_slahr2( magma_int_t n, magma_int_t k, magma_int_t nb, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dV, magma_int_t lddv, float *A, magma_int_t lda, float *tau, float *T, magma_int_t ldt, float *Y, magma_int_t ldy, magma_queue_t queue);
```
"""
function magma_slahr2(n, k, nb, dA, ldda, dV, lddv, A, lda, tau, T, ldt, Y, ldy, queue)
    ccall((:magma_slahr2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t), n, k, nb, dA, ldda, dV, lddv, A, lda, tau, T, ldt, Y, ldy, queue)
end

"""
    magma_slahr2_m(n, k, nb, A, lda, tau, T, ldt, Y, ldy, data)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slahr2_m( magma_int_t n, magma_int_t k, magma_int_t nb, float *A, magma_int_t lda, float *tau, float *T, magma_int_t ldt, float *Y, magma_int_t ldy, struct sgehrd_data *data);
```
"""
function magma_slahr2_m(n, k, nb, A, lda, tau, T, ldt, Y, ldy, data)
    ccall((:magma_slahr2_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{sgehrd_data}), n, k, nb, A, lda, tau, T, ldt, Y, ldy, data)
end

"""
    magma_slahru(n, ihi, k, nb, A, lda, dA, ldda, dY, lddy, dV, lddv, dT, dwork, queue)


### Prototype
```c
magma_int_t magma_slahru( magma_int_t n, magma_int_t ihi, magma_int_t k, magma_int_t nb, float *A, magma_int_t lda, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dY, magma_int_t lddy, magmaFloat_ptr dV, magma_int_t lddv, magmaFloat_ptr dT, magmaFloat_ptr dwork, magma_queue_t queue);
```
"""
function magma_slahru(n, ihi, k, nb, A, lda, dA, ldda, dY, lddy, dV, lddv, dT, dwork, queue)
    ccall((:magma_slahru, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magmaFloat_ptr, magma_queue_t), n, ihi, k, nb, A, lda, dA, ldda, dY, lddy, dV, lddv, dT, dwork, queue)
end

"""
    magma_slahru_m(n, ihi, k, nb, A, lda, data)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slahru_m( magma_int_t n, magma_int_t ihi, magma_int_t k, magma_int_t nb, float *A, magma_int_t lda, struct sgehrd_data *data);
```
"""
function magma_slahru_m(n, ihi, k, nb, A, lda, data)
    ccall((:magma_slahru_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{sgehrd_data}), n, ihi, k, nb, A, lda, data)
end

"""
    magma_slaln2(trans, na, nw, smin, ca, A, lda, d1, d2, B, ldb, wr, wi, X, ldx, scale, xnorm, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slaln2( magma_int_t trans, magma_int_t na, magma_int_t nw, float smin, float ca, const float *A, magma_int_t lda, float d1, float d2, const float *B, magma_int_t ldb, float wr, float wi, float *X, magma_int_t ldx, float *scale, float *xnorm, magma_int_t *info);
```
"""
function magma_slaln2(trans, na, nw, smin, ca, A, lda, d1, d2, B, ldb, wr, wi, X, ldx, scale, xnorm, info)
    ccall((:magma_slaln2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Cfloat, Cfloat, Ptr{Cfloat}, magma_int_t, Cfloat, Cfloat, Ptr{Cfloat}, magma_int_t, Cfloat, Cfloat, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{magma_int_t}), trans, na, nw, smin, ca, A, lda, d1, d2, B, ldb, wr, wi, X, ldx, scale, xnorm, info)
end

"""
    magma_slaqps(m, n, offset, nb, kb, A, lda, dA, ldda, jpvt, tau, vn1, vn2, auxv, F, ldf, dF, lddf)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slaqps( magma_int_t m, magma_int_t n, magma_int_t offset, magma_int_t nb, magma_int_t *kb, float *A, magma_int_t lda, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *jpvt, float *tau, float *vn1, float *vn2, float *auxv, float *F, magma_int_t ldf, magmaFloat_ptr dF, magma_int_t lddf);
```
"""
function magma_slaqps(m, n, offset, nb, kb, A, lda, dA, ldda, jpvt, tau, vn1, vn2, auxv, F, ldf, dF, lddf)
    ccall((:magma_slaqps, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t), m, n, offset, nb, kb, A, lda, dA, ldda, jpvt, tau, vn1, vn2, auxv, F, ldf, dF, lddf)
end

"""
    magma_slaqps_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, tau, vn1, vn2, dauxv, dF, lddf)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slaqps_gpu( magma_int_t m, magma_int_t n, magma_int_t offset, magma_int_t nb, magma_int_t *kb, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *jpvt, float *tau, float *vn1, float *vn2, magmaFloat_ptr dauxv, magmaFloat_ptr dF, magma_int_t lddf);
```
"""
function magma_slaqps_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, tau, vn1, vn2, dauxv, dF, lddf)
    ccall((:magma_slaqps_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magmaFloat_ptr, magmaFloat_ptr, magma_int_t), m, n, offset, nb, kb, dA, ldda, jpvt, tau, vn1, vn2, dauxv, dF, lddf)
end

"""
    magma_slaqps2_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, dtau, dvn1, dvn2, dauxv, dF, lddf, dlsticcs, queue)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slaqps2_gpu( magma_int_t m, magma_int_t n, magma_int_t offset, magma_int_t nb, magma_int_t *kb, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *jpvt, magmaFloat_ptr dtau, magmaFloat_ptr dvn1, magmaFloat_ptr dvn2, magmaFloat_ptr dauxv, magmaFloat_ptr dF, magma_int_t lddf, magmaFloat_ptr dlsticcs, magma_queue_t queue);
```
"""
function magma_slaqps2_gpu(m, n, offset, nb, kb, dA, ldda, jpvt, dtau, dvn1, dvn2, dauxv, dF, lddf, dlsticcs, queue)
    ccall((:magma_slaqps2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_queue_t), m, n, offset, nb, kb, dA, ldda, jpvt, dtau, dvn1, dvn2, dauxv, dF, lddf, dlsticcs, queue)
end

"""
    magma_slaqtrsd(trans, n, T, ldt, x, ldx, cnorm, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slaqtrsd( magma_trans_t trans, magma_int_t n, const float *T, magma_int_t ldt, float *x, magma_int_t ldx, const float *cnorm, magma_int_t *info);
```
"""
function magma_slaqtrsd(trans, n, T, ldt, x, ldx, cnorm, info)
    ccall((:magma_slaqtrsd, libmagma), magma_int_t, (magma_trans_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}), trans, n, T, ldt, x, ldx, cnorm, info)
end

"""
    magma_slarf_gpu(m, n, dv, dtau, dC, lddc, queue)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slarf_gpu( magma_int_t m, magma_int_t n, magmaFloat_const_ptr dv, magmaFloat_const_ptr dtau, magmaFloat_ptr dC, magma_int_t lddc, magma_queue_t queue);
```
"""
function magma_slarf_gpu(m, n, dv, dtau, dC, lddc, queue)
    ccall((:magma_slarf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_const_ptr, magmaFloat_const_ptr, magmaFloat_ptr, magma_int_t, magma_queue_t), m, n, dv, dtau, dC, lddc, queue)
end

"""
    magma_slarfb2_gpu(m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, queue)

in sgeqr2x_gpu-v3.cpp
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slarfb2_gpu( magma_int_t m, magma_int_t n, magma_int_t k, magmaFloat_const_ptr dV, magma_int_t lddv, magmaFloat_const_ptr dT, magma_int_t lddt, magmaFloat_ptr dC, magma_int_t lddc, magmaFloat_ptr dwork, magma_int_t ldwork, magma_queue_t queue);
```
"""
function magma_slarfb2_gpu(m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, queue)
    ccall((:magma_slarfb2_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_const_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t), m, n, k, dV, lddv, dT, lddt, dC, lddc, dwork, ldwork, queue)
end

"""
    magma_slatrd(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, queue)


### Prototype
```c
magma_int_t magma_slatrd( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, float *e, float *tau, float *W, magma_int_t ldw, float *work, magma_int_t lwork, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dW, magma_int_t lddw, magma_queue_t queue);
```
"""
function magma_slatrd(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, queue)
    ccall((:magma_slatrd, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t), uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, queue)
end

"""
    magma_slatrd2(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, dwork, ldwork, queue)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slatrd2( magma_uplo_t uplo, magma_int_t n, magma_int_t nb, float *A, magma_int_t lda, float *e, float *tau, float *W, magma_int_t ldw, float *work, magma_int_t lwork, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dW, magma_int_t lddw, magmaFloat_ptr dwork, magma_int_t ldwork, magma_queue_t queue);
```
"""
function magma_slatrd2(uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, dwork, ldwork, queue)
    ccall((:magma_slatrd2, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t), uplo, n, nb, A, lda, e, tau, W, ldw, work, lwork, dA, ldda, dW, lddw, dwork, ldwork, queue)
end

"""
    magma_slatrd_mgpu(ngpu, uplo, n, nb, nb0, A, lda, e, tau, W, ldw, dA, ldda, offset, dW, lddw, hwork, lhwork, dwork, ldwork, queues)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_slatrd_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magma_int_t nb, magma_int_t nb0, float *A, magma_int_t lda, float *e, float *tau, float *W, magma_int_t ldw, magmaFloat_ptr dA[], magma_int_t ldda, magma_int_t offset, magmaFloat_ptr dW[], magma_int_t lddw, float *hwork, magma_int_t lhwork, magmaFloat_ptr dwork[], magma_int_t ldwork, magma_queue_t queues[]);
```
"""
function magma_slatrd_mgpu(ngpu, uplo, n, nb, nb0, A, lda, e, tau, W, ldw, dA, ldda, offset, dW, lddw, hwork, lhwork, dwork, ldwork, queues)
    ccall((:magma_slatrd_mgpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magma_queue_t}), ngpu, uplo, n, nb, nb0, A, lda, e, tau, W, ldw, dA, ldda, offset, dW, lddw, hwork, lhwork, dwork, ldwork, queues)
end

"""
    magma_slauum(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_slauum( magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_slauum(uplo, n, A, lda, info)
    ccall((:magma_slauum, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_slauum_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_slauum_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_slauum_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_slauum_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_sposv(uplo, n, nrhs, A, lda, B, ldb, info)

------------------------------------------------------------ zpo routines
### Prototype
```c
magma_int_t magma_sposv( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, float *A, magma_int_t lda, float *B, magma_int_t ldb, magma_int_t *info);
```
"""
function magma_sposv(uplo, n, nrhs, A, lda, B, ldb, info)
    ccall((:magma_sposv, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, A, lda, B, ldb, info)
end

"""
    magma_sposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)


### Prototype
```c
magma_int_t magma_sposv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_sposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_sposv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, PtrOrCuPtr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_spotf2_gpu(uplo, n, dA, ldda, queue, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_spotf2_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_queue_t queue, magma_int_t *info);
```
"""
function magma_spotf2_gpu(uplo, n, dA, ldda, queue, info)
    ccall((:magma_spotf2_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, magma_queue_t, Ptr{magma_int_t}), uplo, n, dA, ldda, queue, info)
end

"""
    magma_spotrf_rectile_native(uplo, n, recnb, dA, ldda, gbstep, dinfo, info, queue)


### Prototype
```c
magma_int_t magma_spotrf_rectile_native( magma_uplo_t uplo, magma_int_t n, magma_int_t recnb, float* dA, magma_int_t ldda, magma_int_t gbstep, magma_int_t *dinfo, magma_int_t *info, magma_queue_t queue);
```
"""
function magma_spotrf_rectile_native(uplo, n, recnb, dA, ldda, gbstep, dinfo, info, queue)
    ccall((:magma_spotrf_rectile_native, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), uplo, n, recnb, dA, ldda, gbstep, dinfo, info, queue)
end

"""
    magma_spotrf(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_spotrf( magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_spotrf(uplo, n, A, lda, info)
    ccall((:magma_spotrf, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_spotrf_expert_gpu(uplo, n, dA, ldda, info, nb, mode)


### Prototype
```c
magma_int_t magma_spotrf_expert_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info, magma_int_t nb, magma_mode_t mode );
```
"""
function magma_spotrf_expert_gpu(uplo, n, dA, ldda, info, nb, mode)
    ccall((:magma_spotrf_expert_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_mode_t), uplo, n, dA, ldda, info, nb, mode)
end

"""
    magma_spotrf_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_spotrf_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_spotrf_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_spotrf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_spotrf_native(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_spotrf_native( magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magma_spotrf_native(uplo, n, dA, ldda, info)
    ccall((:magma_spotrf_native, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_spotrf_m(ngpu, uplo, n, A, lda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_spotrf_m( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_spotrf_m(ngpu, uplo, n, A, lda, info)
    ccall((:magma_spotrf_m, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, A, lda, info)
end

"""
    magma_spotrf_mgpu(ngpu, uplo, n, d_lA, ldda, info)


### Prototype
```c
magma_int_t magma_spotrf_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr d_lA[], magma_int_t ldda, magma_int_t *info);
```
"""
function magma_spotrf_mgpu(ngpu, uplo, n, d_lA, ldda, info)
    ccall((:magma_spotrf_mgpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, d_lA, ldda, info)
end

"""
    magma_spotrf_mgpu_right(ngpu, uplo, n, d_lA, ldda, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_spotrf_mgpu_right( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr d_lA[], magma_int_t ldda, magma_int_t *info);
```
"""
function magma_spotrf_mgpu_right(ngpu, uplo, n, d_lA, ldda, info)
    ccall((:magma_spotrf_mgpu_right, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magma_int_t}), ngpu, uplo, n, d_lA, ldda, info)
end

"""
    magma_spotrf3_mgpu(ngpu, uplo, m, n, off_i, off_j, nb, d_lA, ldda, d_lP, lddp, A, lda, h, queues, events, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_spotrf3_mgpu( magma_int_t ngpu, magma_uplo_t uplo, magma_int_t m, magma_int_t n, magma_int_t off_i, magma_int_t off_j, magma_int_t nb, magmaFloat_ptr d_lA[], magma_int_t ldda, magmaFloat_ptr d_lP[], magma_int_t lddp, float *A, magma_int_t lda, magma_int_t h, magma_queue_t queues[][3], magma_event_t events[][5], magma_int_t *info);
```
"""
function magma_spotrf3_mgpu(ngpu, uplo, m, n, off_i, off_j, nb, d_lA, ldda, d_lP, lddp, A, lda, h, queues, events, info)
    ccall((:magma_spotrf3_mgpu, libmagma), magma_int_t, (magma_int_t, magma_uplo_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{magmaFloat_ptr}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, Ptr{NTuple{3, magma_queue_t}}, Ptr{NTuple{5, magma_event_t}}, Ptr{magma_int_t}), ngpu, uplo, m, n, off_i, off_j, nb, d_lA, ldda, d_lP, lddp, A, lda, h, queues, events, info)
end

"""
    magma_spotri(uplo, n, A, lda, info)


### Prototype
```c
magma_int_t magma_spotri( magma_uplo_t uplo, magma_int_t n, float *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_spotri(uplo, n, A, lda, info)
    ccall((:magma_spotri, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), uplo, n, A, lda, info)
end

"""
    magma_spotri_gpu(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_spotri_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_spotri_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_spotri_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_spotrs_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)


### Prototype
```c
magma_int_t magma_spotrs_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magmaFloat_ptr dB, magma_int_t lddb, magma_int_t *info);
```
"""
function magma_spotrs_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, info)
    ccall((:magma_spotrs_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, info)
end

"""
    magma_sstedx(range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, dwork, info)

------------------------------------------------------------ zst routines
### Prototype
```c
magma_int_t magma_sstedx( magma_range_t range, magma_int_t n, float vl, float vu, magma_int_t il, magma_int_t iu, float *d, float *e, float *Z, magma_int_t ldz, float *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magmaFloat_ptr dwork, magma_int_t *info);
```
"""
function magma_sstedx(range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, dwork, info)
    ccall((:magma_sstedx, libmagma), magma_int_t, (magma_range_t, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, magmaFloat_ptr, Ptr{magma_int_t}), range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, dwork, info)
end

"""
    magma_sstedx_m(ngpu, range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sstedx_m( magma_int_t ngpu, magma_range_t range, magma_int_t n, float vl, float vu, magma_int_t il, magma_int_t iu, float *d, float *e, float *Z, magma_int_t ldz, float *rwork, magma_int_t lrwork, magma_int_t *iwork, magma_int_t liwork, magma_int_t *info);
```
"""
function magma_sstedx_m(ngpu, range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, info)
    ccall((:magma_sstedx_m, libmagma), magma_int_t, (magma_int_t, magma_range_t, magma_int_t, Cfloat, Cfloat, magma_int_t, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, magma_int_t, Ptr{magma_int_t}), ngpu, range, n, vl, vu, il, iu, d, e, Z, ldz, rwork, lrwork, iwork, liwork, info)
end

"""
    magma_strevc3(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, info)

------------------------------------------------------------ ztr routines
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_strevc3( magma_side_t side, magma_vec_t howmany, magma_int_t *select, magma_int_t n, float *T, magma_int_t ldt, float *VL, magma_int_t ldvl, float *VR, magma_int_t ldvr, magma_int_t mm, magma_int_t *mout, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_strevc3(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, info)
    ccall((:magma_strevc3, libmagma), magma_int_t, (magma_side_t, magma_vec_t, Ptr{magma_int_t}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, info)
end

"""
    magma_strevc3_mt(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_strevc3_mt( magma_side_t side, magma_vec_t howmany, magma_int_t *select, magma_int_t n, float *T, magma_int_t ldt, float *VL, magma_int_t ldvl, float *VR, magma_int_t ldvr, magma_int_t mm, magma_int_t *mout, float *work, magma_int_t lwork, #ifdef MAGMA_COMPLEX float *rwork, #endif magma_int_t *info);
```
"""
function magma_strevc3_mt(side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, info)
    ccall((:magma_strevc3_mt, libmagma), magma_int_t, (magma_side_t, magma_vec_t, Ptr{magma_int_t}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), side, howmany, select, n, T, ldt, VL, ldvl, VR, ldvr, mm, mout, work, lwork, info)
end

"""
    magma_strsm_m(ngpu, side, uplo, transa, diag, m, n, alpha, A, lda, B, ldb)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_strsm_m( magma_int_t ngpu, magma_side_t side, magma_uplo_t uplo, magma_trans_t transa, magma_diag_t diag, magma_int_t m, magma_int_t n, float alpha, const float *A, magma_int_t lda, float *B, magma_int_t ldb);
```
"""
function magma_strsm_m(ngpu, side, uplo, transa, diag, m, n, alpha, A, lda, B, ldb)
    ccall((:magma_strsm_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_uplo_t, magma_trans_t, magma_diag_t, magma_int_t, magma_int_t, Cfloat, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t), ngpu, side, uplo, transa, diag, m, n, alpha, A, lda, B, ldb)
end

"""
    magma_strtri(uplo, diag, n, A, lda, info)


### Prototype
```c
magma_int_t magma_strtri( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, float *A, magma_int_t lda, magma_int_t *info);
```
"""
function magma_strtri(uplo, diag, n, A, lda, info)
    ccall((:magma_strtri, libmagma), magma_int_t, (magma_uplo_t, magma_diag_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), uplo, diag, n, A, lda, info)
end

"""
    magma_strtri_gpu(uplo, diag, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_strtri_gpu( magma_uplo_t uplo, magma_diag_t diag, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info);
```
"""
function magma_strtri_gpu(uplo, diag, n, dA, ldda, info)
    ccall((:magma_strtri_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_diag_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, diag, n, dA, ldda, info)
end

"""
    magma_sorgbr(vect, m, n, k, A, lda, tau, work, lwork, info)

------------------------------------------------------------ zun routines
CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sorgbr( magma_vect_t vect, magma_int_t m, magma_int_t n, magma_int_t k, float *A, magma_int_t lda, float *tau, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sorgbr(vect, m, n, k, A, lda, tau, work, lwork, info)
    ccall((:magma_sorgbr, libmagma), magma_int_t, (magma_vect_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), vect, m, n, k, A, lda, tau, work, lwork, info)
end

"""
    magma_sorghr(n, ilo, ihi, A, lda, tau, dT, nb, info)


### Prototype
```c
magma_int_t magma_sorghr( magma_int_t n, magma_int_t ilo, magma_int_t ihi, float *A, magma_int_t lda, float *tau, magmaFloat_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_sorghr(n, ilo, ihi, A, lda, tau, dT, nb, info)
    ccall((:magma_sorghr, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, dT, nb, info)
end

"""
    magma_sorghr_m(n, ilo, ihi, A, lda, tau, T, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sorghr_m( magma_int_t n, magma_int_t ilo, magma_int_t ihi, float *A, magma_int_t lda, float *tau, float *T, magma_int_t nb, magma_int_t *info);
```
"""
function magma_sorghr_m(n, ilo, ihi, A, lda, tau, T, nb, info)
    ccall((:magma_sorghr_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), n, ilo, ihi, A, lda, tau, T, nb, info)
end

"""
    magma_sorglq(m, n, k, A, lda, tau, dT, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sorglq( magma_int_t m, magma_int_t n, magma_int_t k, float *A, magma_int_t lda, float *tau, magmaFloat_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_sorglq(m, n, k, A, lda, tau, dT, nb, info)
    ccall((:magma_sorglq, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, A, lda, tau, dT, nb, info)
end

"""
    magma_sorgqr(m, n, k, A, lda, tau, dT, nb, info)


### Prototype
```c
magma_int_t magma_sorgqr( magma_int_t m, magma_int_t n, magma_int_t k, float *A, magma_int_t lda, float *tau, magmaFloat_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_sorgqr(m, n, k, A, lda, tau, dT, nb, info)
    ccall((:magma_sorgqr, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, A, lda, tau, dT, nb, info)
end

"""
    magma_sorgqr_gpu(m, n, k, dA, ldda, tau, dT, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sorgqr_gpu( magma_int_t m, magma_int_t n, magma_int_t k, magmaFloat_ptr dA, magma_int_t ldda, float *tau, magmaFloat_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_sorgqr_gpu(m, n, k, dA, ldda, tau, dT, nb, info)
    ccall((:magma_sorgqr_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), m, n, k, dA, ldda, tau, dT, nb, info)
end

"""
    magma_sorgqr_m(m, n, k, A, lda, tau, T, nb, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sorgqr_m( magma_int_t m, magma_int_t n, magma_int_t k, float *A, magma_int_t lda, float *tau, float *T, magma_int_t nb, magma_int_t *info);
```
"""
function magma_sorgqr_m(m, n, k, A, lda, tau, T, nb, info)
    ccall((:magma_sorgqr_m, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), m, n, k, A, lda, tau, T, nb, info)
end

"""
    magma_sorgqr2(m, n, k, A, lda, tau, info)


### Prototype
```c
magma_int_t magma_sorgqr2( magma_int_t m, magma_int_t n, magma_int_t k, float *A, magma_int_t lda, float *tau, magma_int_t *info);
```
"""
function magma_sorgqr2(m, n, k, A, lda, tau, info)
    ccall((:magma_sorgqr2, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{magma_int_t}), m, n, k, A, lda, tau, info)
end

"""
    magma_sormbr(vect, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_sormbr( magma_vect_t vect, magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, float *A, magma_int_t lda, float *tau, float *C, magma_int_t ldc, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sormbr(vect, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_sormbr, libmagma), magma_int_t, (magma_vect_t, magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), vect, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_sormlq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_sormlq( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, float *A, magma_int_t lda, float *tau, float *C, magma_int_t ldc, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sormlq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_sormlq, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_sormrq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_sormrq( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, float *A, magma_int_t lda, float *tau, float *C, magma_int_t ldc, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sormrq(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_sormrq, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_sormql(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_sormql( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, float *A, magma_int_t lda, float *tau, float *C, magma_int_t ldc, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sormql(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_sormql, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_sormql2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sormql2_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloat_ptr dA, magma_int_t ldda, float *tau, magmaFloat_ptr dC, magma_int_t lddc, const float *wA, magma_int_t ldwa, magma_int_t *info);
```
"""
function magma_sormql2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
    ccall((:magma_sormql2_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
end

"""
    magma_sormqr(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_sormqr( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, float *A, magma_int_t lda, float *tau, float *C, magma_int_t ldc, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sormqr(side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_sormqr, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_sormqr_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, hwork, lwork, dT, nb, info)


### Prototype
```c
magma_int_t magma_sormqr_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloat_const_ptr dA, magma_int_t ldda, float const *tau, magmaFloat_ptr dC, magma_int_t lddc, float *hwork, magma_int_t lwork, magmaFloat_ptr dT, magma_int_t nb, magma_int_t *info);
```
"""
function magma_sormqr_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, hwork, lwork, dT, nb, info)
    ccall((:magma_sormqr_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{Cfloat}, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, tau, dC, lddc, hwork, lwork, dT, nb, info)
end

"""
    magma_sormqr2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sormqr2_gpu( magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, magmaFloat_ptr dA, magma_int_t ldda, float *tau, magmaFloat_ptr dC, magma_int_t lddc, const float *wA, magma_int_t ldwa, magma_int_t *info);
```
"""
function magma_sormqr2_gpu(side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
    ccall((:magma_sormqr2_gpu, libmagma), magma_int_t, (magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), side, trans, m, n, k, dA, ldda, tau, dC, lddc, wA, ldwa, info)
end

"""
    magma_sormqr_m(ngpu, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sormqr_m( magma_int_t ngpu, magma_side_t side, magma_trans_t trans, magma_int_t m, magma_int_t n, magma_int_t k, float *A, magma_int_t lda, float *tau, float *C, magma_int_t ldc, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sormqr_m(ngpu, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_sormqr_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_trans_t, magma_int_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), ngpu, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_sormtr(side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)


### Prototype
```c
magma_int_t magma_sormtr( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_int_t m, magma_int_t n, float *A, magma_int_t lda, float *tau, float *C, magma_int_t ldc, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sormtr(side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_sormtr, libmagma), magma_int_t, (magma_side_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_sormtr_gpu(side, uplo, trans, m, n, dA, ldda, tau, dC, lddc, wA, ldwa, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sormtr_gpu( magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, float *tau, magmaFloat_ptr dC, magma_int_t lddc, const float *wA, magma_int_t ldwa, magma_int_t *info);
```
"""
function magma_sormtr_gpu(side, uplo, trans, m, n, dA, ldda, tau, dC, lddc, wA, ldwa, info)
    ccall((:magma_sormtr_gpu, libmagma), magma_int_t, (magma_side_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magmaFloat_ptr, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), side, uplo, trans, m, n, dA, ldda, tau, dC, lddc, wA, ldwa, info)
end

"""
    magma_sormtr_m(ngpu, side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_sormtr_m( magma_int_t ngpu, magma_side_t side, magma_uplo_t uplo, magma_trans_t trans, magma_int_t m, magma_int_t n, float *A, magma_int_t lda, float *tau, float *C, magma_int_t ldc, float *work, magma_int_t lwork, magma_int_t *info);
```
"""
function magma_sormtr_m(ngpu, side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
    ccall((:magma_sormtr_m, libmagma), magma_int_t, (magma_int_t, magma_side_t, magma_uplo_t, magma_trans_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}), ngpu, side, uplo, trans, m, n, A, lda, tau, C, ldc, work, lwork, info)
end

"""
    magma_s_isnan(x)


### Prototype
```c
int magma_s_isnan( float x );
```
"""
function magma_s_isnan(x)
    ccall((:magma_s_isnan, libmagma), Cint, (Cfloat,), x)
end

"""
    magma_s_isinf(x)


### Prototype
```c
int magma_s_isinf( float x );
```
"""
function magma_s_isinf(x)
    ccall((:magma_s_isinf, libmagma), Cint, (Cfloat,), x)
end

"""
    magma_s_isnan_inf(x)


### Prototype
```c
int magma_s_isnan_inf( float x );
```
"""
function magma_s_isnan_inf(x)
    ccall((:magma_s_isnan_inf, libmagma), Cint, (Cfloat,), x)
end

"""
    magma_smake_lwork(lwork)


### Prototype
```c
float magma_smake_lwork( magma_int_t lwork );
```
"""
function magma_smake_lwork(lwork)
    ccall((:magma_smake_lwork, libmagma), Cfloat, (magma_int_t,), lwork)
end

"""
    magma_snan_inf(uplo, m, n, A, lda, cnt_nan, cnt_inf)


### Prototype
```c
magma_int_t magma_snan_inf( magma_uplo_t uplo, magma_int_t m, magma_int_t n, const float *A, magma_int_t lda, magma_int_t *cnt_nan, magma_int_t *cnt_inf);
```
"""
function magma_snan_inf(uplo, m, n, A, lda, cnt_nan, cnt_inf)
    ccall((:magma_snan_inf, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, m, n, A, lda, cnt_nan, cnt_inf)
end

"""
    magma_snan_inf_gpu(uplo, m, n, dA, ldda, cnt_nan, cnt_inf, queue)


### Prototype
```c
magma_int_t magma_snan_inf_gpu( magma_uplo_t uplo, magma_int_t m, magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, magma_int_t *cnt_nan, magma_int_t *cnt_inf, magma_queue_t queue);
```
"""
function magma_snan_inf_gpu(uplo, m, n, dA, ldda, cnt_nan, cnt_inf, queue)
    ccall((:magma_snan_inf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_queue_t), uplo, m, n, dA, ldda, cnt_nan, cnt_inf, queue)
end

"""
    magma_sprint(m, n, A, lda)


### Prototype
```c
void magma_sprint( magma_int_t m, magma_int_t n, const float *A, magma_int_t lda);
```
"""
function magma_sprint(m, n, A, lda)
    ccall((:magma_sprint, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t), m, n, A, lda)
end

"""
    magma_sprint_gpu(m, n, dA, ldda, queue)


### Prototype
```c
void magma_sprint_gpu( magma_int_t m, magma_int_t n, magmaFloat_const_ptr dA, magma_int_t ldda, magma_queue_t queue);
```
"""
function magma_sprint_gpu(m, n, dA, ldda, queue)
    ccall((:magma_sprint_gpu, libmagma), Cvoid, (magma_int_t, magma_int_t, magmaFloat_const_ptr, magma_int_t, magma_queue_t), m, n, dA, ldda, queue)
end

"""
    magma_spanel_to_q(uplo, ib, A, lda, work)


### Prototype
```c
void magma_spanel_to_q( magma_uplo_t uplo, magma_int_t ib, float *A, magma_int_t lda, float *work);
```
"""
function magma_spanel_to_q(uplo, ib, A, lda, work)
    ccall((:magma_spanel_to_q, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}), uplo, ib, A, lda, work)
end

"""
    magma_sq_to_panel(uplo, ib, A, lda, work)


### Prototype
```c
void magma_sq_to_panel( magma_uplo_t uplo, magma_int_t ib, float *A, magma_int_t lda, float *work);
```
"""
function magma_sq_to_panel(uplo, ib, A, lda, work)
    ccall((:magma_sq_to_panel, libmagma), Cvoid, (magma_uplo_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}), uplo, ib, A, lda, work)
end

"""
    magmablas_sextract_diag_sqrt(m, n, dA, ldda, dD, incd, queue)

auxiliary routines for posv-irgmres  
### Prototype
```c
void magmablas_sextract_diag_sqrt( magma_int_t m, magma_int_t n, float* dA, magma_int_t ldda, float* dD, magma_int_t incd, magma_queue_t queue);
```
"""
function magmablas_sextract_diag_sqrt(m, n, dA, ldda, dD, incd, queue)
    ccall((:magmablas_sextract_diag_sqrt, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t), m, n, dA, ldda, dD, incd, queue)
end

"""
    magmablas_sscal_shift_hpd(uplo, n, dA, ldda, dD, incd, miu, cn, eps, queue)


### Prototype
```c
void magmablas_sscal_shift_hpd( magma_uplo_t uplo, int n, float* dA, int ldda, float* dD, int incd, float miu, float cn, float eps, magma_queue_t queue);
```
"""
function magmablas_sscal_shift_hpd(uplo, n, dA, ldda, dD, incd, miu, cn, eps, queue)
    ccall((:magmablas_sscal_shift_hpd, libmagma), Cvoid, (magma_uplo_t, Cint, Ptr{Cfloat}, Cint, Ptr{Cfloat}, Cint, Cfloat, Cfloat, Cfloat, magma_queue_t), uplo, n, dA, ldda, dD, incd, miu, cn, eps, queue)
end

"""
    magmablas_sdimv_invert(n, alpha, dD, incd, dx, incx, beta, dy, incy, queue)


### Prototype
```c
void magmablas_sdimv_invert( magma_int_t n, float alpha, float* dD, magma_int_t incd, float* dx, magma_int_t incx, float beta, float* dy, magma_int_t incy, magma_queue_t queue);
```
"""
function magmablas_sdimv_invert(n, alpha, dD, incd, dx, incx, beta, dy, incy, queue)
    ccall((:magmablas_sdimv_invert, libmagma), Cvoid, (magma_int_t, Cfloat, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, magma_int_t, Cfloat, Ptr{Cfloat}, magma_int_t, magma_queue_t), n, alpha, dD, incd, dx, incx, beta, dy, incy, queue)
end

"""
    magma_zcgeqrsv_gpu(m, n, nrhs, dA, ldda, dB, lddb, dX, lddx, iter, info)

=============================================================================
MAGMA mixed precision function definitions

In alphabetical order of base name (ignoring precision).
### Prototype
```c
magma_int_t magma_zcgeqrsv_gpu( magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex_ptr dX, magma_int_t lddx, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_zcgeqrsv_gpu(m, n, nrhs, dA, ldda, dB, lddb, dX, lddx, iter, info)
    ccall((:magma_zcgeqrsv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, nrhs, dA, ldda, dB, lddb, dX, lddx, iter, info)
end

"""
    magma_zcgesv_gpu(trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, iter, info)


### Prototype
```c
magma_int_t magma_zcgesv_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaInt_ptr dipiv, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex_ptr dX, magma_int_t lddx, magmaDoubleComplex_ptr dworkd, magmaFloatComplex_ptr dworks, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_zcgesv_gpu(trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
    ccall((:magma_zcgesv_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, Ptr{magma_int_t}, magmaInt_ptr, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magmaFloatComplex_ptr, Ptr{magma_int_t}, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
end

"""
    magma_zcgetrs_gpu(trans, n, nrhs, dA, ldda, dipiv, dB, lddb, dX, lddx, dSX, info)


### Prototype
```c
magma_int_t magma_zcgetrs_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaFloatComplex_ptr dA, magma_int_t ldda, magmaInt_ptr dipiv, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex_ptr dX, magma_int_t lddx, magmaFloatComplex_ptr dSX, magma_int_t *info);
```
"""
function magma_zcgetrs_gpu(trans, n, nrhs, dA, ldda, dipiv, dB, lddb, dX, lddx, dSX, info)
    ccall((:magma_zcgetrs_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaFloatComplex_ptr, magma_int_t, magmaInt_ptr, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaFloatComplex_ptr, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, dipiv, dB, lddb, dX, lddx, dSX, info)
end

"""
    magma_zchesv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_zchesv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex_ptr dX, magma_int_t lddx, magmaDoubleComplex_ptr dworkd, magmaFloatComplex_ptr dworks, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_zchesv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
    ccall((:magma_zchesv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magmaFloatComplex_ptr, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
end

"""
    magma_zcposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, info)


### Prototype
```c
magma_int_t magma_zcposv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDoubleComplex_ptr dA, magma_int_t ldda, magmaDoubleComplex_ptr dB, magma_int_t lddb, magmaDoubleComplex_ptr dX, magma_int_t lddx, magmaDoubleComplex_ptr dworkd, magmaFloatComplex_ptr dworks, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_zcposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
    ccall((:magma_zcposv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magma_int_t, magmaDoubleComplex_ptr, magmaFloatComplex_ptr, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
end

"""
    magma_dsgeqrsv_gpu(m, n, nrhs, dA, ldda, dB, lddb, dX, lddx, iter, info)

=============================================================================
MAGMA mixed precision function definitions

In alphabetical order of base name (ignoring precision).
### Prototype
```c
magma_int_t magma_dsgeqrsv_gpu( magma_int_t m, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_dsgeqrsv_gpu(m, n, nrhs, dA, ldda, dB, lddb, dX, lddx, iter, info)
    ccall((:magma_dsgeqrsv_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, nrhs, dA, ldda, dB, lddb, dX, lddx, iter, info)
end

"""
    magma_dsgesv_gpu(trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, iter, info)


### Prototype
```c
magma_int_t magma_dsgesv_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaInt_ptr dipiv, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magmaDouble_ptr dworkd, magmaFloat_ptr dworks, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_dsgesv_gpu(trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
    ccall((:magma_dsgesv_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, magmaInt_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaFloat_ptr, Ptr{magma_int_t}, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
end

"""
    magma_dsgetrs_gpu(trans, n, nrhs, dA, ldda, dipiv, dB, lddb, dX, lddx, dSX, info)


### Prototype
```c
magma_int_t magma_dsgetrs_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magmaInt_ptr dipiv, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magmaFloat_ptr dSX, magma_int_t *info);
```
"""
function magma_dsgetrs_gpu(trans, n, nrhs, dA, ldda, dipiv, dB, lddb, dX, lddx, dSX, info)
    ccall((:magma_dsgetrs_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaInt_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaFloat_ptr, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, dipiv, dB, lddb, dX, lddx, dSX, info)
end

"""
    magma_dssysv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, info)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_dssysv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magmaDouble_ptr dworkd, magmaFloat_ptr dworks, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_dssysv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
    ccall((:magma_dssysv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaFloat_ptr, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
end

"""
    magma_dsposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, info)


### Prototype
```c
magma_int_t magma_dsposv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magmaDouble_ptr dworkd, magmaFloat_ptr dworks, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_dsposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
    ccall((:magma_dsposv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaFloat_ptr, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
end

"""
    magma_init()

=============================================================================
initialization
### Prototype
```c
magma_int_t magma_init( void );
```
"""
function magma_init()
    ccall((:magma_init, libmagma), magma_int_t, ())
end

"""
    magma_finalize()


### Prototype
```c
magma_int_t magma_finalize( void );
```
"""
function magma_finalize()
    ccall((:magma_finalize, libmagma), magma_int_t, ())
end

"""
    magma_version(major, minor, micro)

=============================================================================
version information
### Prototype
```c
void magma_version( magma_int_t* major, magma_int_t* minor, magma_int_t* micro );
```
"""
function magma_version(major, minor, micro)
    ccall((:magma_version, libmagma), Cvoid, (Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{magma_int_t}), major, minor, micro)
end

# no prototype is found for this function at magma_auxiliary.h:42:6, please use with caution
"""
    magma_print_environment()


### Prototype
```c
void magma_print_environment();
```
"""
function magma_print_environment()
    ccall((:magma_print_environment, libmagma), Cvoid, ())
end

"""
    magma_wtime()

=============================================================================
timing
### Prototype
```c
real_Double_t magma_wtime( void );
```
"""
function magma_wtime()
    ccall((:magma_wtime, libmagma), real_Double_t, ())
end

"""
    magma_sync_wtime(queue)


### Prototype
```c
real_Double_t magma_sync_wtime( magma_queue_t queue );
```
"""
function magma_sync_wtime(queue)
    ccall((:magma_sync_wtime, libmagma), real_Double_t, (magma_queue_t,), queue)
end

"""
    magma_buildconnection_mgpu(gnode, ncmplx, ngpu)

magma GPU-complex PCIe connection
### Prototype
```c
magma_int_t magma_buildconnection_mgpu( magma_int_t gnode[MagmaMaxGPUs+2][MagmaMaxGPUs+2], magma_int_t *ncmplx, magma_int_t ngpu );
```
"""
function magma_buildconnection_mgpu(gnode, ncmplx, ngpu)
    ccall((:magma_buildconnection_mgpu, libmagma), magma_int_t, (Ptr{NTuple{10, magma_int_t}}, Ptr{magma_int_t}, magma_int_t), gnode, ncmplx, ngpu)
end

"""
    magma_indices_1D_bcyclic(nb, ngpu, dev, j0, j1, dj0, dj1)


### Prototype
```c
void magma_indices_1D_bcyclic( magma_int_t nb, magma_int_t ngpu, magma_int_t dev, magma_int_t j0, magma_int_t j1, magma_int_t* dj0, magma_int_t* dj1 );
```
"""
function magma_indices_1D_bcyclic(nb, ngpu, dev, j0, j1, dj0, dj1)
    ccall((:magma_indices_1D_bcyclic, libmagma), Cvoid, (magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), nb, ngpu, dev, j0, j1, dj0, dj1)
end

"""
    magma_swp2pswp(trans, n, ipiv, newipiv)


### Prototype
```c
void magma_swp2pswp( magma_trans_t trans, magma_int_t n, magma_int_t *ipiv, magma_int_t *newipiv );
```
"""
function magma_swp2pswp(trans, n, ipiv, newipiv)
    ccall((:magma_swp2pswp, libmagma), Cvoid, (magma_trans_t, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), trans, n, ipiv, newipiv)
end

# no prototype is found for this function at magma_auxiliary.h:75:13, please use with caution
"""
    magma_get_smlsize_divideconquer()

=============================================================================
get NB blocksize
### Prototype
```c
magma_int_t magma_get_smlsize_divideconquer();
```
"""
function magma_get_smlsize_divideconquer()
    ccall((:magma_get_smlsize_divideconquer, libmagma), magma_int_t, ())
end

"""
    magma_malloc(ptr_ptr, bytes)

=============================================================================
memory allocation
### Prototype
```c
magma_int_t magma_malloc( magma_ptr *ptr_ptr, size_t bytes );
```
"""
function magma_malloc(ptr_ptr, bytes)
    ccall((:magma_malloc, libmagma), magma_int_t, (Ptr{magma_ptr}, Cint), ptr_ptr, bytes)
end

"""
    magma_malloc_cpu(ptr_ptr, bytes)


### Prototype
```c
magma_int_t magma_malloc_cpu( void **ptr_ptr, size_t bytes );
```
"""
function magma_malloc_cpu(ptr_ptr, bytes)
    ccall((:magma_malloc_cpu, libmagma), magma_int_t, (Ptr{Ptr{Cvoid}}, Cint), ptr_ptr, bytes)
end

"""
    magma_malloc_pinned(ptr_ptr, bytes)


### Prototype
```c
magma_int_t magma_malloc_pinned( void **ptr_ptr, size_t bytes );
```
"""
function magma_malloc_pinned(ptr_ptr, bytes)
    ccall((:magma_malloc_pinned, libmagma), magma_int_t, (Ptr{Ptr{Cvoid}}, Cint), ptr_ptr, bytes)
end

"""
    magma_free_cpu(ptr)


### Prototype
```c
magma_int_t magma_free_cpu( void *ptr );
```
"""
function magma_free_cpu(ptr)
    ccall((:magma_free_cpu, libmagma), magma_int_t, (Ptr{Cvoid},), ptr)
end

"""
    magma_mem_info(freeMem, totalMem)

returns memory info (basically a wrapper around cudaMemGetInfo
### Prototype
```c
magma_int_t magma_mem_info(size_t* freeMem, size_t* totalMem);
```
"""
function magma_mem_info(freeMem, totalMem)
    ccall((:magma_mem_info, libmagma), magma_int_t, (Ptr{Cint}, Ptr{Cint}), freeMem, totalMem)
end

"""
    magma_memset(ptr, value, count)

wrapper around cudaMemset
### Prototype
```c
magma_int_t magma_memset(void * ptr, int value, size_t count);
```
"""
function magma_memset(ptr, value, count)
    ccall((:magma_memset, libmagma), magma_int_t, (Ptr{Cvoid}, Cint, Cint), ptr, value, count)
end

"""
    magma_memset_async(ptr, value, count, queue)

wrapper around cudaMemsetAsync
### Prototype
```c
magma_int_t magma_memset_async(void * ptr, int value, size_t count, magma_queue_t queue);
```
"""
function magma_memset_async(ptr, value, count, queue)
    ccall((:magma_memset_async, libmagma), magma_int_t, (Ptr{Cvoid}, Cint, Cint, magma_queue_t), ptr, value, count, queue)
end

"""
    magma_imalloc(ptr_ptr, n)

Type-safe version of magma_malloc(), for magma_int_t arrays. Allocates n*sizeof(magma_int_t) bytes.
### Prototype
```c
static inline magma_int_t magma_imalloc( magmaInt_ptr *ptr_ptr, size_t n );
```
"""
function magma_imalloc(ptr_ptr, n)
    ccall((:magma_imalloc, libmagma), magma_int_t, (Ptr{magmaInt_ptr}, Cint), ptr_ptr, n)
end

"""
    magma_index_malloc(ptr_ptr, n)

Type-safe version of magma_malloc(), for magma_index_t arrays. Allocates n*sizeof(magma_index_t) bytes.
### Prototype
```c
static inline magma_int_t magma_index_malloc( magmaIndex_ptr *ptr_ptr, size_t n );
```
"""
function magma_index_malloc(ptr_ptr, n)
    ccall((:magma_index_malloc, libmagma), magma_int_t, (Ptr{magmaIndex_ptr}, Cint), ptr_ptr, n)
end

"""
    magma_uindex_malloc(ptr_ptr, n)

Type-safe version of magma_malloc(), for magma_uindex_t arrays. Allocates n*sizeof(magma_uindex_t) bytes.
### Prototype
```c
static inline magma_int_t magma_uindex_malloc( magmaUIndex_ptr *ptr_ptr, size_t n );
```
"""
function magma_uindex_malloc(ptr_ptr, n)
    ccall((:magma_uindex_malloc, libmagma), magma_int_t, (Ptr{magmaUIndex_ptr}, Cint), ptr_ptr, n)
end

"""
    magma_smalloc(ptr_ptr, n)

Type-safe version of magma_malloc(), for float arrays. Allocates n*sizeof(float) bytes.
### Prototype
```c
static inline magma_int_t magma_smalloc( magmaFloat_ptr *ptr_ptr, size_t n );
```
"""
function magma_smalloc(ptr_ptr, n)
    ccall((:magma_smalloc, libmagma), magma_int_t, (Ptr{magmaFloat_ptr}, Cint), ptr_ptr, n)
end

"""
    magma_dmalloc(ptr_ptr, n)

Type-safe version of magma_malloc(), for double arrays. Allocates n*sizeof(double) bytes.
### Prototype
```c
static inline magma_int_t magma_dmalloc( magmaDouble_ptr *ptr_ptr, size_t n );
```
"""
function magma_dmalloc(ptr_ptr, n)
    ccall((:magma_dmalloc, libmagma), magma_int_t, (Ptr{magmaDouble_ptr}, Cint), ptr_ptr, n)
end

"""
    magma_cmalloc(ptr_ptr, n)

Type-safe version of magma_malloc(), for magmaFloatComplex arrays. Allocates n*sizeof(magmaFloatComplex) bytes.
### Prototype
```c
static inline magma_int_t magma_cmalloc( magmaFloatComplex_ptr *ptr_ptr, size_t n );
```
"""
function magma_cmalloc(ptr_ptr, n)
    ccall((:magma_cmalloc, libmagma), magma_int_t, (Ptr{magmaFloatComplex_ptr}, Cint), ptr_ptr, n)
end

"""
    magma_zmalloc(ptr_ptr, n)

Type-safe version of magma_malloc(), for magmaDoubleComplex arrays. Allocates n*sizeof(magmaDoubleComplex) bytes.
### Prototype
```c
static inline magma_int_t magma_zmalloc( magmaDoubleComplex_ptr *ptr_ptr, size_t n );
```
"""
function magma_zmalloc(ptr_ptr, n)
    ccall((:magma_zmalloc, libmagma), magma_int_t, (Ptr{magmaDoubleComplex_ptr}, Cint), ptr_ptr, n)
end

"""
    magma_imalloc_cpu(ptr_ptr, n)

Type-safe version of magma_malloc_cpu(), for magma_int_t arrays. Allocates n*sizeof(magma_int_t) bytes.
### Prototype
```c
static inline magma_int_t magma_imalloc_cpu( magma_int_t **ptr_ptr, size_t n );
```
"""
function magma_imalloc_cpu(ptr_ptr, n)
    ccall((:magma_imalloc_cpu, libmagma), magma_int_t, (Ptr{Ptr{magma_int_t}}, Cint), ptr_ptr, n)
end

"""
    magma_index_malloc_cpu(ptr_ptr, n)

Type-safe version of magma_malloc_cpu(), for magma_index_t arrays. Allocates n*sizeof(magma_index_t) bytes.
### Prototype
```c
static inline magma_int_t magma_index_malloc_cpu( magma_index_t **ptr_ptr, size_t n );
```
"""
function magma_index_malloc_cpu(ptr_ptr, n)
    ccall((:magma_index_malloc_cpu, libmagma), magma_int_t, (Ptr{Ptr{magma_index_t}}, Cint), ptr_ptr, n)
end

"""
    magma_uindex_malloc_cpu(ptr_ptr, n)

Type-safe version of magma_malloc_cpu(), for magma_uindex_t arrays. Allocates n*sizeof(magma_uindex_t) bytes.
### Prototype
```c
static inline magma_int_t magma_uindex_malloc_cpu( magma_uindex_t **ptr_ptr, size_t n );
```
"""
function magma_uindex_malloc_cpu(ptr_ptr, n)
    ccall((:magma_uindex_malloc_cpu, libmagma), magma_int_t, (Ptr{Ptr{magma_uindex_t}}, Cint), ptr_ptr, n)
end

"""
    magma_smalloc_cpu(ptr_ptr, n)

Type-safe version of magma_malloc_cpu(), for float arrays. Allocates n*sizeof(float) bytes.
### Prototype
```c
static inline magma_int_t magma_smalloc_cpu( float **ptr_ptr, size_t n );
```
"""
function magma_smalloc_cpu(ptr_ptr, n)
    ccall((:magma_smalloc_cpu, libmagma), magma_int_t, (Ptr{Ptr{Cfloat}}, Cint), ptr_ptr, n)
end

"""
    magma_dmalloc_cpu(ptr_ptr, n)

Type-safe version of magma_malloc_cpu(), for double arrays. Allocates n*sizeof(double) bytes.
### Prototype
```c
static inline magma_int_t magma_dmalloc_cpu( double **ptr_ptr, size_t n );
```
"""
function magma_dmalloc_cpu(ptr_ptr, n)
    ccall((:magma_dmalloc_cpu, libmagma), magma_int_t, (Ptr{Ptr{Cdouble}}, Cint), ptr_ptr, n)
end

"""
    magma_cmalloc_cpu(ptr_ptr, n)

Type-safe version of magma_malloc_cpu(), for magmaFloatComplex arrays. Allocates n*sizeof(magmaFloatComplex) bytes.
### Prototype
```c
static inline magma_int_t magma_cmalloc_cpu( magmaFloatComplex **ptr_ptr, size_t n );
```
"""
function magma_cmalloc_cpu(ptr_ptr, n)
    ccall((:magma_cmalloc_cpu, libmagma), magma_int_t, (Ptr{Ptr{magmaFloatComplex}}, Cint), ptr_ptr, n)
end

"""
    magma_zmalloc_cpu(ptr_ptr, n)

Type-safe version of magma_malloc_cpu(), for magmaDoubleComplex arrays. Allocates n*sizeof(magmaDoubleComplex) bytes.
### Prototype
```c
static inline magma_int_t magma_zmalloc_cpu( magmaDoubleComplex **ptr_ptr, size_t n );
```
"""
function magma_zmalloc_cpu(ptr_ptr, n)
    ccall((:magma_zmalloc_cpu, libmagma), magma_int_t, (Ptr{Ptr{magmaDoubleComplex}}, Cint), ptr_ptr, n)
end

"""
    magma_imalloc_pinned(ptr_ptr, n)

Type-safe version of magma_malloc_pinned(), for magma_int_t arrays. Allocates n*sizeof(magma_int_t) bytes.
### Prototype
```c
static inline magma_int_t magma_imalloc_pinned( magma_int_t **ptr_ptr, size_t n );
```
"""
function magma_imalloc_pinned(ptr_ptr, n)
    ccall((:magma_imalloc_pinned, libmagma), magma_int_t, (Ptr{Ptr{magma_int_t}}, Cint), ptr_ptr, n)
end

"""
    magma_index_malloc_pinned(ptr_ptr, n)

Type-safe version of magma_malloc_pinned(), for magma_index_t arrays. Allocates n*sizeof(magma_index_t) bytes.
### Prototype
```c
static inline magma_int_t magma_index_malloc_pinned( magma_index_t **ptr_ptr, size_t n );
```
"""
function magma_index_malloc_pinned(ptr_ptr, n)
    ccall((:magma_index_malloc_pinned, libmagma), magma_int_t, (Ptr{Ptr{magma_index_t}}, Cint), ptr_ptr, n)
end

"""
    magma_smalloc_pinned(ptr_ptr, n)

Type-safe version of magma_malloc_pinned(), for float arrays. Allocates n*sizeof(float) bytes.
### Prototype
```c
static inline magma_int_t magma_smalloc_pinned( float **ptr_ptr, size_t n );
```
"""
function magma_smalloc_pinned(ptr_ptr, n)
    ccall((:magma_smalloc_pinned, libmagma), magma_int_t, (Ptr{Ptr{Cfloat}}, Cint), ptr_ptr, n)
end

"""
    magma_dmalloc_pinned(ptr_ptr, n)

Type-safe version of magma_malloc_pinned(), for double arrays. Allocates n*sizeof(double) bytes.
### Prototype
```c
static inline magma_int_t magma_dmalloc_pinned( double **ptr_ptr, size_t n );
```
"""
function magma_dmalloc_pinned(ptr_ptr, n)
    ccall((:magma_dmalloc_pinned, libmagma), magma_int_t, (Ptr{Ptr{Cdouble}}, Cint), ptr_ptr, n)
end

"""
    magma_cmalloc_pinned(ptr_ptr, n)

Type-safe version of magma_malloc_pinned(), for magmaFloatComplex arrays. Allocates n*sizeof(magmaFloatComplex) bytes.
### Prototype
```c
static inline magma_int_t magma_cmalloc_pinned( magmaFloatComplex **ptr_ptr, size_t n );
```
"""
function magma_cmalloc_pinned(ptr_ptr, n)
    ccall((:magma_cmalloc_pinned, libmagma), magma_int_t, (Ptr{Ptr{magmaFloatComplex}}, Cint), ptr_ptr, n)
end

"""
    magma_zmalloc_pinned(ptr_ptr, n)

Type-safe version of magma_malloc_pinned(), for magmaDoubleComplex arrays. Allocates n*sizeof(magmaDoubleComplex) bytes.
### Prototype
```c
static inline magma_int_t magma_zmalloc_pinned( magmaDoubleComplex **ptr_ptr, size_t n );
```
"""
function magma_zmalloc_pinned(ptr_ptr, n)
    ccall((:magma_zmalloc_pinned, libmagma), magma_int_t, (Ptr{Ptr{magmaDoubleComplex}}, Cint), ptr_ptr, n)
end

"""
    magma_is_devptr(ptr)

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_is_devptr( const void* ptr );
```
"""
function magma_is_devptr(ptr)
    ccall((:magma_is_devptr, libmagma), magma_int_t, (Ptr{Cvoid},), ptr)
end

"""
    magma_num_gpus()

=============================================================================
device support
### Prototype
```c
magma_int_t magma_num_gpus( void );
```
"""
function magma_num_gpus()
    ccall((:magma_num_gpus, libmagma), magma_int_t, ())
end

# no prototype is found for this function at magma_auxiliary.h:220:1, please use with caution
"""
    magma_getdevice_arch()

CUDA MAGMA only
### Prototype
```c
magma_int_t magma_getdevice_arch();
```
"""
function magma_getdevice_arch()
    ccall((:magma_getdevice_arch, libmagma), magma_int_t, ())
end

"""
    magma_getdevices(devices, size, num_dev)

magma_int_t magma_getdevice_arch( magma_int_t dev or queue );   todo: new 
### Prototype
```c
void magma_getdevices( magma_device_t* devices, magma_int_t size, magma_int_t* num_dev );
```
"""
function magma_getdevices(devices, size, num_dev)
    ccall((:magma_getdevices, libmagma), Cvoid, (Ptr{magma_device_t}, magma_int_t, Ptr{magma_int_t}), devices, size, num_dev)
end

"""
    magma_getdevice(dev)


### Prototype
```c
void magma_getdevice( magma_device_t* dev );
```
"""
function magma_getdevice(dev)
    ccall((:magma_getdevice, libmagma), Cvoid, (Ptr{magma_device_t},), dev)
end

"""
    magma_setdevice(dev)


### Prototype
```c
void magma_setdevice( magma_device_t dev );
```
"""
function magma_setdevice(dev)
    ccall((:magma_setdevice, libmagma), Cvoid, (magma_device_t,), dev)
end

"""
    magma_mem_size(queue)


### Prototype
```c
size_t magma_mem_size( magma_queue_t queue );
```
"""
function magma_mem_size(queue)
    ccall((:magma_mem_size, libmagma), Cint, (magma_queue_t,), queue)
end

# no prototype is found for this function at magma_auxiliary.h:239:1, please use with caution
"""
    magma_getdevice_multiprocessor_count()


### Prototype
```c
magma_int_t magma_getdevice_multiprocessor_count();
```
"""
function magma_getdevice_multiprocessor_count()
    ccall((:magma_getdevice_multiprocessor_count, libmagma), magma_int_t, ())
end

# no prototype is found for this function at magma_auxiliary.h:242:1, please use with caution
"""
    magma_getdevice_shmem_block()


### Prototype
```c
size_t magma_getdevice_shmem_block();
```
"""
function magma_getdevice_shmem_block()
    ccall((:magma_getdevice_shmem_block, libmagma), Cint, ())
end

# no prototype is found for this function at magma_auxiliary.h:245:1, please use with caution
"""
    magma_getdevice_shmem_multiprocessor()


### Prototype
```c
size_t magma_getdevice_shmem_multiprocessor();
```
"""
function magma_getdevice_shmem_multiprocessor()
    ccall((:magma_getdevice_shmem_multiprocessor, libmagma), Cint, ())
end

"""
    magma_queue_get_device(queue)


### Prototype
```c
magma_int_t magma_queue_get_device( magma_queue_t queue );
```
"""
function magma_queue_get_device(queue)
    ccall((:magma_queue_get_device, libmagma), magma_int_t, (magma_queue_t,), queue)
end

"""
    magma_event_create(event_ptr)

=============================================================================
event support
### Prototype
```c
void magma_event_create( magma_event_t* event_ptr );
```
"""
function magma_event_create(event_ptr)
    ccall((:magma_event_create, libmagma), Cvoid, (Ptr{magma_event_t},), event_ptr)
end

"""
    magma_event_create_untimed(event_ptr)


### Prototype
```c
void magma_event_create_untimed( magma_event_t* event_ptr );
```
"""
function magma_event_create_untimed(event_ptr)
    ccall((:magma_event_create_untimed, libmagma), Cvoid, (Ptr{magma_event_t},), event_ptr)
end

"""
    magma_event_destroy(event)


### Prototype
```c
void magma_event_destroy( magma_event_t event );
```
"""
function magma_event_destroy(event)
    ccall((:magma_event_destroy, libmagma), Cvoid, (magma_event_t,), event)
end

"""
    magma_event_record(event, queue)


### Prototype
```c
void magma_event_record( magma_event_t event, magma_queue_t queue );
```
"""
function magma_event_record(event, queue)
    ccall((:magma_event_record, libmagma), Cvoid, (magma_event_t, magma_queue_t), event, queue)
end

"""
    magma_event_query(event)


### Prototype
```c
void magma_event_query( magma_event_t event );
```
"""
function magma_event_query(event)
    ccall((:magma_event_query, libmagma), Cvoid, (magma_event_t,), event)
end

"""
    magma_event_sync(event)


### Prototype
```c
void magma_event_sync( magma_event_t event );
```
"""
function magma_event_sync(event)
    ccall((:magma_event_sync, libmagma), Cvoid, (magma_event_t,), event)
end

"""
    magma_queue_wait_event(queue, event)


### Prototype
```c
void magma_queue_wait_event( magma_queue_t queue, magma_event_t event );
```
"""
function magma_queue_wait_event(queue, event)
    ccall((:magma_queue_wait_event, libmagma), Cvoid, (magma_queue_t, magma_event_t), queue, event)
end

"""
    magma_xerbla(name, info)

=============================================================================
error handler
### Prototype
```c
void magma_xerbla( const char *name, magma_int_t info );
```
"""
function magma_xerbla(name, info)
    ccall((:magma_xerbla, libmagma), Cvoid, (Ptr{Cchar}, magma_int_t), name, info)
end

"""
    magma_strerror(error)


### Prototype
```c
const char* magma_strerror( magma_int_t error );
```
"""
function magma_strerror(error)
    ccall((:magma_strerror, libmagma), Ptr{Cchar}, (magma_int_t,), error)
end

"""
    magma_strlcpy(dst, src, size)

=============================================================================
string functions
### Prototype
```c
size_t magma_strlcpy( char *dst, const char *src, size_t size );
```
"""
function magma_strlcpy(dst, src, size)
    ccall((:magma_strlcpy, libmagma), Cint, (Ptr{Cchar}, Ptr{Cchar}, Cint), dst, src, size)
end

"""
    magma_ceildiv(x, y)

For integers x >= 0, y > 0, returns ceil( x/y ).
For x == 0, this is 0.
@ingroup magma_ceildiv
### Prototype
```c
static inline magma_int_t magma_ceildiv( magma_int_t x, magma_int_t y );
```
"""
function magma_ceildiv(x, y)
    ccall((:magma_ceildiv, libmagma), magma_int_t, (magma_int_t, magma_int_t), x, y)
end

"""
    magma_roundup(x, y)

For integers x >= 0, y > 0, returns x rounded up to multiple of y.
That is, ceil(x/y)*y.
For x == 0, this is 0.
This implementation does not assume y is a power of 2.
@ingroup magma_ceildiv
### Prototype
```c
static inline magma_int_t magma_roundup( magma_int_t x, magma_int_t y );
```
"""
function magma_roundup(x, y)
    ccall((:magma_roundup, libmagma), magma_int_t, (magma_int_t, magma_int_t), x, y)
end

"""
    magma_ssqrt(x)

@return Square root of x. @ingroup magma_sqrt
### Prototype
```c
static inline float magma_ssqrt( float x );
```
"""
function magma_ssqrt(x)
    ccall((:magma_ssqrt, libmagma), Cfloat, (Cfloat,), x)
end

"""
    magma_dsqrt(x)

@return Square root of x. @ingroup magma_sqrt
### Prototype
```c
static inline double magma_dsqrt( double x );
```
"""
function magma_dsqrt(x)
    ccall((:magma_dsqrt, libmagma), Cdouble, (Cdouble,), x)
end

"""
    magma_csqrt(x)

@return Complex square root of x. @ingroup magma_sqrt
### Prototype
```c
magmaFloatComplex magma_csqrt( magmaFloatComplex x );
```
"""
function magma_csqrt(x)
    ccall((:magma_csqrt, libmagma), magmaFloatComplex, (magmaFloatComplex,), x)
end

"""
    magma_zsqrt(x)

@return Complex square root of x. @ingroup magma_sqrt
### Prototype
```c
magmaDoubleComplex magma_zsqrt( magmaDoubleComplex x );
```
"""
function magma_zsqrt(x)
    ccall((:magma_zsqrt, libmagma), magmaDoubleComplex, (magmaDoubleComplex,), x)
end

"""
    magma_dhgesv_iteref_gpu(trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, iter, info)

Half precision iterative refinement routines 
### Prototype
```c
magma_int_t magma_dhgesv_iteref_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaInt_ptr dipiv, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magmaDouble_ptr dworkd, magmaFloat_ptr dworks, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_dhgesv_iteref_gpu(trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
    ccall((:magma_dhgesv_iteref_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, magmaInt_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaFloat_ptr, Ptr{magma_int_t}, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
end

"""
    magma_dsgesv_iteref_gpu(trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, iter, info)


### Prototype
```c
magma_int_t magma_dsgesv_iteref_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaInt_ptr dipiv, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magmaDouble_ptr dworkd, magmaFloat_ptr dworks, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_dsgesv_iteref_gpu(trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
    ccall((:magma_dsgesv_iteref_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, magmaInt_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaFloat_ptr, Ptr{magma_int_t}, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, iter, info)
end

"""
    magma_dxgesv_gmres_gpu(trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, facto_type, solver_type, iter, info, facto_time)


### Prototype
```c
magma_int_t magma_dxgesv_gmres_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magmaInt_ptr dipiv, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magmaDouble_ptr dworkd, magmaFloat_ptr dworks, magma_refinement_t facto_type, magma_refinement_t solver_type, magma_int_t *iter, magma_int_t *info, real_Double_t *facto_time);
```
"""
function magma_dxgesv_gmres_gpu(trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, facto_type, solver_type, iter, info, facto_time)
    ccall((:magma_dxgesv_gmres_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, magmaInt_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaFloat_ptr, magma_refinement_t, magma_refinement_t, Ptr{magma_int_t}, Ptr{magma_int_t}, Ptr{real_Double_t}), trans, n, nrhs, dA, ldda, ipiv, dipiv, dB, lddb, dX, lddx, dworkd, dworks, facto_type, solver_type, iter, info, facto_time)
end

"""
    magma_dfgmres_plu_gpu(trans, n, nrhs, dA, ldda, dLU_sprec, lddlusp, dLU_dprec, lddludp, ipiv, dipiv, dB, lddb, dX, lddx, dSX, maxiter, restrt, maxiter_inner, restrt_inner, userinitguess, tol, innertol, rnorm0, niters, solver_type, algoname, is_inner, queue)


### Prototype
```c
magma_int_t magma_dfgmres_plu_gpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaFloat_ptr dLU_sprec, magma_int_t lddlusp, magmaDouble_ptr dLU_dprec, magma_int_t lddludp, magmaInt_ptr ipiv, magmaInt_ptr dipiv, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magmaFloat_ptr dSX, magma_int_t maxiter, magma_int_t restrt, magma_int_t maxiter_inner, magma_int_t restrt_inner, magma_int_t userinitguess, double tol, double innertol, double *rnorm0, magma_int_t *niters, magma_refinement_t solver_type, char *algoname, magma_int_t is_inner, magma_queue_t queue);
```
"""
function magma_dfgmres_plu_gpu(trans, n, nrhs, dA, ldda, dLU_sprec, lddlusp, dLU_dprec, lddludp, ipiv, dipiv, dB, lddb, dX, lddx, dSX, maxiter, restrt, maxiter_inner, restrt_inner, userinitguess, tol, innertol, rnorm0, niters, solver_type, algoname, is_inner, queue)
    ccall((:magma_dfgmres_plu_gpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaInt_ptr, magmaInt_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaFloat_ptr, magma_int_t, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Cdouble, Ptr{Cdouble}, Ptr{magma_int_t}, magma_refinement_t, Ptr{Cchar}, magma_int_t, magma_queue_t), trans, n, nrhs, dA, ldda, dLU_sprec, lddlusp, dLU_dprec, lddludp, ipiv, dipiv, dB, lddb, dX, lddx, dSX, maxiter, restrt, maxiter_inner, restrt_inner, userinitguess, tol, innertol, rnorm0, niters, solver_type, algoname, is_inner, queue)
end

"""
    magma_dsgelatrs_cpu(trans, n, nrhs, dA, ldda, dipiv, dB, lddb, dX, lddx, dSX, info)


### Prototype
```c
magma_int_t magma_dsgelatrs_cpu( magma_trans_t trans, magma_int_t n, magma_int_t nrhs, magmaFloat_ptr dA, magma_int_t ldda, magmaInt_ptr dipiv, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magmaFloat_ptr dSX, magma_int_t *info);
```
"""
function magma_dsgelatrs_cpu(trans, n, nrhs, dA, ldda, dipiv, dB, lddb, dX, lddx, dSX, info)
    ccall((:magma_dsgelatrs_cpu, libmagma), magma_int_t, (magma_trans_t, magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, magmaInt_ptr, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaFloat_ptr, Ptr{magma_int_t}), trans, n, nrhs, dA, ldda, dipiv, dB, lddb, dX, lddx, dSX, info)
end

"""
    magma_hgetrf_gpu(m, n, dA, ldda, ipiv, info)

Half precision LU factorizations routines 
### Prototype
```c
magma_int_t magma_hgetrf_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info );
```
"""
function magma_hgetrf_gpu(m, n, dA, ldda, ipiv, info)
    ccall((:magma_hgetrf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, dA, ldda, ipiv, info)
end

"""
    magma_htgetrf_gpu(m, n, dA, ldda, ipiv, info)


### Prototype
```c
magma_int_t magma_htgetrf_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info );
```
"""
function magma_htgetrf_gpu(m, n, dA, ldda, ipiv, info)
    ccall((:magma_htgetrf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), m, n, dA, ldda, ipiv, info)
end

"""
    magma_xhsgetrf_gpu(m, n, dA, ldda, ipiv, info, enable_tc, mp_algo_type)


### Prototype
```c
magma_int_t magma_xhsgetrf_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info, magma_mp_type_t enable_tc, magma_mp_type_t mp_algo_type);
```
"""
function magma_xhsgetrf_gpu(m, n, dA, ldda, ipiv, info, enable_tc, mp_algo_type)
    ccall((:magma_xhsgetrf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_mp_type_t, magma_mp_type_t), m, n, dA, ldda, ipiv, info, enable_tc, mp_algo_type)
end

"""
    magma_xshgetrf_gpu(m, n, dA, ldda, ipiv, info, enable_tc, mp_algo_type)


### Prototype
```c
magma_int_t magma_xshgetrf_gpu( magma_int_t m, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *ipiv, magma_int_t *info, magma_mp_type_t enable_tc, magma_mp_type_t mp_algo_type);
```
"""
function magma_xshgetrf_gpu(m, n, dA, ldda, ipiv, info, enable_tc, mp_algo_type)
    ccall((:magma_xshgetrf_gpu, libmagma), magma_int_t, (magma_int_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}, magma_mp_type_t, magma_mp_type_t), m, n, dA, ldda, ipiv, info, enable_tc, mp_algo_type)
end

"""
    magma_get_hgetrf_nb(m, n)


### Prototype
```c
magma_int_t magma_get_hgetrf_nb( magma_int_t m, magma_int_t n );
```
"""
function magma_get_hgetrf_nb(m, n)
    ccall((:magma_get_hgetrf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t), m, n)
end

"""
    magma_get_xgetrf_nb(m, n, prev_nb, enable_tc, mp_algo_type)


### Prototype
```c
magma_int_t magma_get_xgetrf_nb( magma_int_t m, magma_int_t n, magma_int_t prev_nb, magma_mp_type_t enable_tc, magma_mp_type_t mp_algo_type);
```
"""
function magma_get_xgetrf_nb(m, n, prev_nb, enable_tc, mp_algo_type)
    ccall((:magma_get_xgetrf_nb, libmagma), magma_int_t, (magma_int_t, magma_int_t, magma_int_t, magma_mp_type_t, magma_mp_type_t), m, n, prev_nb, enable_tc, mp_algo_type)
end

"""
    magma_dshposv_gpu_expert(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, mode, use_gmres, preprocess, cn, theta, info)

Cholesky-based solvers with FP16 capability 
### Prototype
```c
magma_int_t magma_dshposv_gpu_expert( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magmaDouble_ptr dworkd, magmaFloat_ptr dworks, magma_int_t *iter, magma_mode_t mode, magma_int_t use_gmres, magma_int_t preprocess, float cn, float theta, magma_int_t *info);
```
"""
function magma_dshposv_gpu_expert(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, mode, use_gmres, preprocess, cn, theta, info)
    ccall((:magma_dshposv_gpu_expert, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magmaFloat_ptr, Ptr{magma_int_t}, magma_mode_t, magma_int_t, magma_int_t, Cfloat, Cfloat, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, dworkd, dworks, iter, mode, use_gmres, preprocess, cn, theta, info)
end

"""
    magma_dshposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, iter, info)


### Prototype
```c
magma_int_t magma_dshposv_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_dshposv_gpu(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, iter, info)
    ccall((:magma_dshposv_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, iter, info)
end

"""
    magma_dshposv_native(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, iter, info)


### Prototype
```c
magma_int_t magma_dshposv_native( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, magmaDouble_ptr dA, magma_int_t ldda, magmaDouble_ptr dB, magma_int_t lddb, magmaDouble_ptr dX, magma_int_t lddx, magma_int_t *iter, magma_int_t *info);
```
"""
function magma_dshposv_native(uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, iter, info)
    ccall((:magma_dshposv_native, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, magmaDouble_ptr, magma_int_t, Ptr{magma_int_t}, Ptr{magma_int_t}), uplo, n, nrhs, dA, ldda, dB, lddb, dX, lddx, iter, info)
end

"""
    magma_shpotrf_gpu(uplo, n, dA, ldda, info)

Cholesky factorizations routines with FP16 
### Prototype
```c
magma_int_t magma_shpotrf_gpu( magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magma_shpotrf_gpu(uplo, n, dA, ldda, info)
    ccall((:magma_shpotrf_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_shpotrf_native(uplo, n, dA, ldda, info)


### Prototype
```c
magma_int_t magma_shpotrf_native( magma_uplo_t uplo, magma_int_t n, magmaFloat_ptr dA, magma_int_t ldda, magma_int_t *info );
```
"""
function magma_shpotrf_native(uplo, n, dA, ldda, info)
    ccall((:magma_shpotrf_native, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magmaFloat_ptr, magma_int_t, Ptr{magma_int_t}), uplo, n, dA, ldda, info)
end

"""
    magma_dfgmres_spd_gpu(uplo, n, nrhs, dA, ldda, dL, lddl, dD, dB, lddb, dX, lddx, dSX, maxiter, restrt, maxiter_inner, restrt_inner, tol, innertol, rnorm0, niters, is_inner, is_preprocessed, miu, queue)


### Prototype
```c
magma_int_t magma_dfgmres_spd_gpu( magma_uplo_t uplo, magma_int_t n, magma_int_t nrhs, double *dA, magma_int_t ldda, float *dL, magma_int_t lddl, float* dD, double *dB, magma_int_t lddb, double *dX, magma_int_t lddx, float *dSX, magma_int_t maxiter, magma_int_t restrt, magma_int_t maxiter_inner, magma_int_t restrt_inner, double tol, double innertol, double *rnorm0, magma_int_t *niters, magma_int_t is_inner, magma_int_t is_preprocessed, float miu, magma_queue_t queue);
```
"""
function magma_dfgmres_spd_gpu(uplo, n, nrhs, dA, ldda, dL, lddl, dD, dB, lddb, dX, lddx, dSX, maxiter, restrt, maxiter_inner, restrt_inner, tol, innertol, rnorm0, niters, is_inner, is_preprocessed, miu, queue)
    ccall((:magma_dfgmres_spd_gpu, libmagma), magma_int_t, (magma_uplo_t, magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{Cfloat}, Ptr{Cdouble}, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_int_t, magma_int_t, magma_int_t, Cdouble, Cdouble, Ptr{Cdouble}, Ptr{magma_int_t}, magma_int_t, magma_int_t, Cfloat, magma_queue_t), uplo, n, nrhs, dA, ldda, dL, lddl, dD, dB, lddb, dX, lddx, dSX, maxiter, restrt, maxiter_inner, restrt_inner, tol, innertol, rnorm0, niters, is_inner, is_preprocessed, miu, queue)
end

"""
    magmablas_convert_dp2hp(m, n, dA, ldda, dB, lddb, queue)

Half precision conversion routines 
### Prototype
```c
void magmablas_convert_dp2hp( magma_int_t m, magma_int_t n, const double *dA, magma_int_t ldda, magmaHalf *dB, magma_int_t lddb, magma_queue_t queue );
```
"""
function magmablas_convert_dp2hp(m, n, dA, ldda, dB, lddb, queue)
    ccall((:magmablas_convert_dp2hp, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cdouble}, magma_int_t, Ptr{magmaHalf}, magma_int_t, magma_queue_t), m, n, dA, ldda, dB, lddb, queue)
end

"""
    magmablas_convert_hp2dp(m, n, dA, ldda, dB, lddb, queue)


### Prototype
```c
void magmablas_convert_hp2dp( magma_int_t m, magma_int_t n, const magmaHalf *dA, magma_int_t ldda, double *dB, magma_int_t lddb, magma_queue_t queue );
```
"""
function magmablas_convert_hp2dp(m, n, dA, ldda, dB, lddb, queue)
    ccall((:magmablas_convert_hp2dp, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaHalf}, magma_int_t, Ptr{Cdouble}, magma_int_t, magma_queue_t), m, n, dA, ldda, dB, lddb, queue)
end

"""
    magmablas_convert_hp2sp(m, n, dA, ldda, dB, lddb, queue)


### Prototype
```c
void magmablas_convert_hp2sp( magma_int_t m, magma_int_t n, const magmaHalf *dA, magma_int_t ldda, float *dB, magma_int_t lddb, magma_queue_t queue );
```
"""
function magmablas_convert_hp2sp(m, n, dA, ldda, dB, lddb, queue)
    ccall((:magmablas_convert_hp2sp, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{magmaHalf}, magma_int_t, Ptr{Cfloat}, magma_int_t, magma_queue_t), m, n, dA, ldda, dB, lddb, queue)
end

"""
    magmablas_convert_sp2hp(m, n, dA, ldda, dB, lddb, queue)


### Prototype
```c
void magmablas_convert_sp2hp( magma_int_t m, magma_int_t n, const float *dA, magma_int_t ldda, magmaHalf *dB, magma_int_t lddb, magma_queue_t queue );
```
"""
function magmablas_convert_sp2hp(m, n, dA, ldda, dB, lddb, queue)
    ccall((:magmablas_convert_sp2hp, libmagma), Cvoid, (magma_int_t, magma_int_t, Ptr{Cfloat}, magma_int_t, Ptr{magmaHalf}, magma_int_t, magma_queue_t), m, n, dA, ldda, dB, lddb, queue)
end

"""
    magmablas_hlaswp(n, dAT, ldda, k1, k2, ipiv, inci, queue)


### Prototype
```c
void magmablas_hlaswp( magma_int_t n, magmaHalf *dAT, magma_int_t ldda, magma_int_t k1, magma_int_t k2, const magma_int_t *ipiv, magma_int_t inci, magma_queue_t queue );
```
"""
function magmablas_hlaswp(n, dAT, ldda, k1, k2, ipiv, inci, queue)
    ccall((:magmablas_hlaswp, libmagma), Cvoid, (magma_int_t, Ptr{magmaHalf}, magma_int_t, magma_int_t, magma_int_t, Ptr{magma_int_t}, magma_int_t, magma_queue_t), n, dAT, ldda, k1, k2, ipiv, inci, queue)
end

# no prototype is found for this function at magmablas_v1.h:52:6, please use with caution
"""
    magma_device_sync()

device_sync is not portable to OpenCL, and is generally not needed
### Prototype
```c
void magma_device_sync();
```
"""
function magma_device_sync()
    ccall((:magma_device_sync, libmagma), Cvoid, ())
end

"""
    magmablasSetKernelStream(queue)

=============================================================================
Define magma queue
@deprecated
### Prototype
```c
magma_int_t magmablasSetKernelStream( magma_queue_t queue );
```
"""
function magmablasSetKernelStream(queue)
    ccall((:magmablasSetKernelStream, libmagma), magma_int_t, (magma_queue_t,), queue)
end

"""
    magmablasGetKernelStream(queue)


### Prototype
```c
magma_int_t magmablasGetKernelStream( magma_queue_t *queue );
```
"""
function magmablasGetKernelStream(queue)
    ccall((:magmablasGetKernelStream, libmagma), magma_int_t, (Ptr{magma_queue_t},), queue)
end

# no prototype is found for this function at magmablas_v1.h:60:15, please use with caution
"""
    magmablasGetQueue()


### Prototype
```c
magma_queue_t magmablasGetQueue();
```
"""
function magmablasGetQueue()
    ccall((:magmablasGetQueue, libmagma), magma_queue_t, ())
end

const MAGMA_API = 2

#= const magmaCfma = cuCfma

const magmaCfmaf = cuCfmaf

const MAGMA_Z_ZERO = MAGMA_Z_MAKE(0.0, 0.0)

const MAGMA_Z_ONE = MAGMA_Z_MAKE(1.0, 0.0)

const MAGMA_Z_HALF = MAGMA_Z_MAKE(0.5, 0.0)

const MAGMA_Z_NEG_ONE = MAGMA_Z_MAKE(-1.0, 0.0)

const MAGMA_Z_NEG_HALF = MAGMA_Z_MAKE(-0.5, 0.0)

const MAGMA_C_ZERO = MAGMA_C_MAKE(0.0, 0.0)

const MAGMA_C_ONE = MAGMA_C_MAKE(1.0, 0.0)

const MAGMA_C_HALF = MAGMA_C_MAKE(0.5, 0.0)

const MAGMA_C_NEG_ONE = MAGMA_C_MAKE(-1.0, 0.0)

const MAGMA_C_NEG_HALF = MAGMA_C_MAKE(-0.5, 0.0) =#

const MAGMA_D_ZERO = 0.0

const MAGMA_D_ONE = 1.0

const MAGMA_D_HALF = 0.5

const MAGMA_D_NEG_ONE = -1.0

const MAGMA_D_NEG_HALF = -0.5

const MAGMA_S_ZERO = 0.0

const MAGMA_S_ONE = 1.0

const MAGMA_S_HALF = 0.5

const MAGMA_S_NEG_ONE = -1.0

const MAGMA_S_NEG_HALF = -0.5

const MAGMA_VERSION_MAJOR = 2

const MAGMA_VERSION_MINOR = 7

const MAGMA_VERSION_MICRO = 0

const MAGMA_VERSION_STAGE = ""

const MagmaMaxGPUs = 8

const MagmaMaxAccelerators = 8

const MagmaMaxSubs = 16

const MagmaBigTileSize = 1000000

const MAGMA_SUCCESS = 0

const MAGMA_ERR = -100

const MAGMA_ERR_NOT_INITIALIZED = -101

const MAGMA_ERR_REINITIALIZED = -102

const MAGMA_ERR_NOT_SUPPORTED = -103

const MAGMA_ERR_ILLEGAL_VALUE = -104

const MAGMA_ERR_NOT_FOUND = -105

const MAGMA_ERR_ALLOCATION = -106

const MAGMA_ERR_INTERNAL_LIMIT = -107

const MAGMA_ERR_UNALLOCATED = -108

const MAGMA_ERR_FILESYSTEM = -109

const MAGMA_ERR_UNEXPECTED = -110

const MAGMA_ERR_SEQUENCE_FLUSHED = -111

const MAGMA_ERR_HOST_ALLOC = -112

const MAGMA_ERR_DEVICE_ALLOC = -113

const MAGMA_ERR_CUDASTREAM = -114

const MAGMA_ERR_INVALID_PTR = -115

const MAGMA_ERR_UNKNOWN = -116

const MAGMA_ERR_NOT_IMPLEMENTED = -117

const MAGMA_ERR_NAN = -118

const MAGMA_SLOW_CONVERGENCE = -201

const MAGMA_DIVERGENCE = -202

const MAGMA_NONSPD = -203

const MAGMA_ERR_BADPRECOND = -204

const MAGMA_NOTCONVERGED = -205

const MAGMA_ERR_CUSPARSE = -3000

const MAGMA_ERR_CUSPARSE_NOT_INITIALIZED = -3001

const MAGMA_ERR_CUSPARSE_ALLOC_FAILED = -3002

const MAGMA_ERR_CUSPARSE_INVALID_VALUE = -3003

const MAGMA_ERR_CUSPARSE_ARCH_MISMATCH = -3004

const MAGMA_ERR_CUSPARSE_MAPPING_ERROR = -3005

const MAGMA_ERR_CUSPARSE_EXECUTION_FAILED = -3006

const MAGMA_ERR_CUSPARSE_INTERNAL_ERROR = -3007

const MAGMA_ERR_CUSPARSE_MATRIX_TYPE_NOT_SUPPORTED = -3008

const MAGMA_ERR_CUSPARSE_ZERO_PIVOT = -3009

const Magma2lapack_Min = MagmaFalse

const Magma2lapack_Max = MagmaRowwise

const MagmaRowMajorStr = "Row"

const MagmaColMajorStr = "Col"

const MagmaNoTransStr = "NoTrans"

const MagmaTransStr = "Trans"

const MagmaConjTransStr = "ConjTrans"

const Magma_ConjTransStr = "ConjTrans"

const MagmaUpperStr = "Upper"

const MagmaLowerStr = "Lower"

const MagmaFullStr = "Full"

const MagmaNonUnitStr = "NonUnit"

const MagmaUnitStr = "Unit"

const MagmaLeftStr = "Left"

const MagmaRightStr = "Right"

const MagmaBothSidesStr = "Both"

const MagmaOneNormStr = "1"

const MagmaTwoNormStr = "2"

const MagmaFrobeniusNormStr = "Fro"

const MagmaInfNormStr = "Inf"

const MagmaMaxNormStr = "Max"

const MagmaForwardStr = "Forward"

const MagmaBackwardStr = "Backward"

const MagmaColumnwiseStr = "Columnwise"

const MagmaRowwiseStr = "Rowwise"

const MagmaNoVecStr = "NoVec"

const MagmaVecStr = "Vec"

const MagmaIVecStr = "IVec"

const MagmaAllVecStr = "All"

const MagmaSomeVecStr = "Some"

const MagmaOverwriteVecStr = "Overwrite"

# Skipping MacroDefinition: magma_setvector ( n , elemSize , hx_src , incx , dy_dst , incy , queue ) magma_setvector_internal ( n , elemSize , hx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_getvector ( n , elemSize , dx_src , incx , hy_dst , incy , queue ) magma_getvector_internal ( n , elemSize , dx_src , incx , hy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_copyvector ( n , elemSize , dx_src , incx , dy_dst , incy , queue ) magma_copyvector_internal ( n , elemSize , dx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_setmatrix ( m , n , elemSize , hA_src , lda , dB_dst , lddb , queue ) magma_setmatrix_internal ( m , n , elemSize , hA_src , lda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_getmatrix ( m , n , elemSize , dA_src , ldda , hB_dst , ldb , queue ) magma_getmatrix_internal ( m , n , elemSize , dA_src , ldda , hB_dst , ldb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_copymatrix ( m , n , elemSize , dA_src , ldda , dB_dst , lddb , queue ) magma_copymatrix_internal ( m , n , elemSize , dA_src , ldda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_isetvector ( n , hx_src , incx , dy_dst , incy , queue ) magma_isetvector_internal ( n , hx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_igetvector ( n , dx_src , incx , hy_dst , incy , queue ) magma_igetvector_internal ( n , dx_src , incx , hy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_icopyvector ( n , dx_src , incx , dy_dst , incy , queue ) magma_icopyvector_internal ( n , dx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_isetmatrix ( m , n , hA_src , lda , dB_dst , lddb , queue ) magma_isetmatrix_internal ( m , n , hA_src , lda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_igetmatrix ( m , n , dA_src , ldda , hB_dst , ldb , queue ) magma_igetmatrix_internal ( m , n , dA_src , ldda , hB_dst , ldb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_icopymatrix ( m , n , dA_src , ldda , dB_dst , lddb , queue ) magma_icopymatrix_internal ( m , n , dA_src , ldda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_index_setvector ( n , hx_src , incx , dy_dst , incy , queue ) magma_index_setvector_internal ( n , hx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_index_getvector ( n , dx_src , incx , hy_dst , incy , queue ) magma_index_getvector_internal ( n , dx_src , incx , hy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_index_copyvector ( n , dx_src , incx , dy_dst , incy , queue ) magma_index_copyvector_internal ( n , dx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_index_setmatrix ( m , n , hA_src , lda , dB_dst , lddb , queue ) magma_index_setmatrix_internal ( m , n , hA_src , lda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_index_getmatrix ( m , n , dA_src , ldda , hB_dst , ldb , queue ) magma_index_getmatrix_internal ( m , n , dA_src , ldda , hB_dst , ldb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_index_copymatrix ( m , n , dA_src , ldda , dB_dst , lddb , queue ) magma_index_copymatrix_internal ( m , n , dA_src , ldda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_zsetvector ( n , hx_src , incx , dy_dst , incy , queue ) magma_zsetvector_internal ( n , hx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_zgetvector ( n , dx_src , incx , hy_dst , incy , queue ) magma_zgetvector_internal ( n , dx_src , incx , hy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_zcopyvector ( n , dx_src , incx , dy_dst , incy , queue ) magma_zcopyvector_internal ( n , dx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_zsetmatrix ( m , n , hA_src , lda , dB_dst , lddb , queue ) magma_zsetmatrix_internal ( m , n , hA_src , lda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_zgetmatrix ( m , n , dA_src , ldda , hB_dst , ldb , queue ) magma_zgetmatrix_internal ( m , n , dA_src , ldda , hB_dst , ldb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_zcopymatrix ( m , n , dA_src , ldda , dB_dst , lddb , queue ) magma_zcopymatrix_internal ( m , n , dA_src , ldda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_csetvector ( n , hx_src , incx , dy_dst , incy , queue ) magma_csetvector_internal ( n , hx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_cgetvector ( n , dx_src , incx , hy_dst , incy , queue ) magma_cgetvector_internal ( n , dx_src , incx , hy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_ccopyvector ( n , dx_src , incx , dy_dst , incy , queue ) magma_ccopyvector_internal ( n , dx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_csetmatrix ( m , n , hA_src , lda , dB_dst , lddb , queue ) magma_csetmatrix_internal ( m , n , hA_src , lda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_cgetmatrix ( m , n , dA_src , ldda , hB_dst , ldb , queue ) magma_cgetmatrix_internal ( m , n , dA_src , ldda , hB_dst , ldb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_ccopymatrix ( m , n , dA_src , ldda , dB_dst , lddb , queue ) magma_ccopymatrix_internal ( m , n , dA_src , ldda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_dsetvector ( n , hx_src , incx , dy_dst , incy , queue ) magma_dsetvector_internal ( n , hx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_dgetvector ( n , dx_src , incx , hy_dst , incy , queue ) magma_dgetvector_internal ( n , dx_src , incx , hy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_dcopyvector ( n , dx_src , incx , dy_dst , incy , queue ) magma_dcopyvector_internal ( n , dx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_dsetmatrix ( m , n , hA_src , lda , dB_dst , lddb , queue ) magma_dsetmatrix_internal ( m , n , hA_src , lda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_dgetmatrix ( m , n , dA_src , ldda , hB_dst , ldb , queue ) magma_dgetmatrix_internal ( m , n , dA_src , ldda , hB_dst , ldb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_dcopymatrix ( m , n , dA_src , ldda , dB_dst , lddb , queue ) magma_dcopymatrix_internal ( m , n , dA_src , ldda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_ssetvector ( n , hx_src , incx , dy_dst , incy , queue ) magma_ssetvector_internal ( n , hx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_sgetvector ( n , dx_src , incx , hy_dst , incy , queue ) magma_sgetvector_internal ( n , dx_src , incx , hy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_scopyvector ( n , dx_src , incx , dy_dst , incy , queue ) magma_scopyvector_internal ( n , dx_src , incx , dy_dst , incy , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_ssetmatrix ( m , n , hA_src , lda , dB_dst , lddb , queue ) magma_ssetmatrix_internal ( m , n , hA_src , lda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_sgetmatrix ( m , n , dA_src , ldda , hB_dst , ldb , queue ) magma_sgetmatrix_internal ( m , n , dA_src , ldda , hB_dst , ldb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_scopymatrix ( m , n , dA_src , ldda , dB_dst , lddb , queue ) magma_scopymatrix_internal ( m , n , dA_src , ldda , dB_dst , lddb , queue , __func__ , __FILE__ , __LINE__ )

# Skipping MacroDefinition: magma_queue_create ( device , queue_ptr ) magma_queue_create_internal ( device , queue_ptr , __func__ , __FILE__ , __LINE__ )

const MagmaUpperLower = MagmaFull

const MagmaUpperLowerStr = MagmaFullStr

const magmablas_stranspose_inplace = magmablas_stranspose_inplace_v1

const magmablas_stranspose = magmablas_stranspose_v1

const magmablas_sgetmatrix_transpose = magmablas_sgetmatrix_transpose_v1

const magmablas_ssetmatrix_transpose = magmablas_ssetmatrix_transpose_v1

const magmablas_sprbt = magmablas_sprbt_v1

const magmablas_sprbt_mv = magmablas_sprbt_mv_v1

const magmablas_sprbt_mtv = magmablas_sprbt_mtv_v1

const magma_sgetmatrix_1D_col_bcyclic = magma_sgetmatrix_1D_col_bcyclic_v1

const magma_ssetmatrix_1D_col_bcyclic = magma_ssetmatrix_1D_col_bcyclic_v1

const magma_sgetmatrix_1D_row_bcyclic = magma_sgetmatrix_1D_row_bcyclic_v1

const magma_ssetmatrix_1D_row_bcyclic = magma_ssetmatrix_1D_row_bcyclic_v1

const magmablas_sgeadd = magmablas_sgeadd_v1

const magmablas_sgeadd2 = magmablas_sgeadd2_v1

const magmablas_slacpy = magmablas_slacpy_v1

const magmablas_slacpy_conj = magmablas_slacpy_conj_v1

const magmablas_slacpy_sym_in = magmablas_slacpy_sym_in_v1

const magmablas_slacpy_sym_out = magmablas_slacpy_sym_out_v1

const magmablas_slange = magmablas_slange_v1

const magmablas_slansy = magmablas_slansy_v1

const magmablas_slarfg = magmablas_slarfg_v1

const magmablas_slascl = magmablas_slascl_v1

const magmablas_slascl_2x2 = magmablas_slascl_2x2_v1

const magmablas_slascl2 = magmablas_slascl2_v1

const magmablas_slascl_diag = magmablas_slascl_diag_v1

const magmablas_slaset = magmablas_slaset_v1

const magmablas_slaset_band = magmablas_slaset_band_v1

const magmablas_slaswp = magmablas_slaswp_v1

const magmablas_slaswp2 = magmablas_slaswp2_v1

const magmablas_slaswp_sym = magmablas_slaswp_sym_v1

const magmablas_slaswpx = magmablas_slaswpx_v1

const magmablas_ssymmetrize = magmablas_ssymmetrize_v1

const magmablas_ssymmetrize_tiles = magmablas_ssymmetrize_tiles_v1

const magmablas_strtri_diag = magmablas_strtri_diag_v1

const magmablas_snrm2_adjust = magmablas_snrm2_adjust_v1

const magmablas_snrm2_check = magmablas_snrm2_check_v1

const magmablas_snrm2_cols = magmablas_snrm2_cols_v1

const magmablas_snrm2_row_check_adjust = magmablas_snrm2_row_check_adjust_v1

const magma_slarfb_gpu = magma_slarfb_gpu_v1

const magma_slarfb_gpu_gemm = magma_slarfb_gpu_gemm_v1

const magma_slarfbx_gpu = magma_slarfbx_gpu_v1

const magma_slarfg_gpu = magma_slarfg_gpu_v1

const magma_slarfgtx_gpu = magma_slarfgtx_gpu_v1

const magma_slarfgx_gpu = magma_slarfgx_gpu_v1

const magma_slarfx_gpu = magma_slarfx_gpu_v1

const magmablas_saxpycp = magmablas_saxpycp_v1

const magmablas_sswap = magmablas_sswap_v1

const magmablas_sswapblk = magmablas_sswapblk_v1

const magmablas_sswapdblk = magmablas_sswapdblk_v1

const magmablas_sgemv = magmablas_sgemv_v1

const magmablas_sgemv_conj = magmablas_sgemv_conj_v1

const magmablas_ssymv = magmablas_ssymv_v1

const magmablas_sgemm = magmablas_sgemm_v1

const magmablas_sgemm_reduce = magmablas_sgemm_reduce_v1

const magmablas_ssymm = magmablas_ssymm_v1

const magmablas_ssyr2k = magmablas_ssyr2k_v1

const magmablas_ssyrk = magmablas_ssyrk_v1

const magmablas_strsm = magmablas_strsm_v1

const magmablas_strsm_outofplace = magmablas_strsm_outofplace_v1

const magmablas_strsm_work = magmablas_strsm_work_v1

const magma_isamax = magma_isamax_v1

const magma_isamin = magma_isamin_v1

const magma_sasum = magma_sasum_v1

const magma_saxpy = magma_saxpy_v1

const magma_scopy = magma_scopy_v1

const magma_sdot = magma_sdot_v1

const magma_snrm2 = magma_snrm2_v1

const magma_srot = magma_srot_v1

const magma_srotm = magma_srotm_v1

const magma_srotmg = magma_srotmg_v1

const magma_sscal = magma_sscal_v1

const magma_sswap = magma_sswap_v1

const magma_sgemv = magma_sgemv_v1

const magma_sger = magma_sger_v1

const magma_ssymv = magma_ssymv_v1

const magma_ssyr = magma_ssyr_v1

const magma_ssyr2 = magma_ssyr2_v1

const magma_strmv = magma_strmv_v1

const magma_strsv = magma_strsv_v1

const magma_sgemm = magma_sgemm_v1

const magma_ssymm = magma_ssymm_v1

const magma_ssyr2k = magma_ssyr2k_v1

const magma_ssyrk = magma_ssyrk_v1

const magma_strmm = magma_strmm_v1

const magma_strsm = magma_strsm_v1

const magmablas_dtranspose_inplace = magmablas_dtranspose_inplace_v1

const magmablas_dtranspose = magmablas_dtranspose_v1

const magmablas_dgetmatrix_transpose = magmablas_dgetmatrix_transpose_v1

const magmablas_dsetmatrix_transpose = magmablas_dsetmatrix_transpose_v1

const magmablas_dprbt = magmablas_dprbt_v1

const magmablas_dprbt_mv = magmablas_dprbt_mv_v1

const magmablas_dprbt_mtv = magmablas_dprbt_mtv_v1

const magma_dgetmatrix_1D_col_bcyclic = magma_dgetmatrix_1D_col_bcyclic_v1

const magma_dsetmatrix_1D_col_bcyclic = magma_dsetmatrix_1D_col_bcyclic_v1

const magma_dgetmatrix_1D_row_bcyclic = magma_dgetmatrix_1D_row_bcyclic_v1

const magma_dsetmatrix_1D_row_bcyclic = magma_dsetmatrix_1D_row_bcyclic_v1

const magmablas_dgeadd = magmablas_dgeadd_v1

const magmablas_dgeadd2 = magmablas_dgeadd2_v1

const magmablas_dlacpy = magmablas_dlacpy_v1

const magmablas_dlacpy_conj = magmablas_dlacpy_conj_v1

const magmablas_dlacpy_sym_in = magmablas_dlacpy_sym_in_v1

const magmablas_dlacpy_sym_out = magmablas_dlacpy_sym_out_v1

const magmablas_dlange = magmablas_dlange_v1

const magmablas_dlansy = magmablas_dlansy_v1

const magmablas_dlarfg = magmablas_dlarfg_v1

const magmablas_dlascl = magmablas_dlascl_v1

const magmablas_dlascl_2x2 = magmablas_dlascl_2x2_v1

const magmablas_dlascl2 = magmablas_dlascl2_v1

const magmablas_dlascl_diag = magmablas_dlascl_diag_v1

const magmablas_dlaset = magmablas_dlaset_v1

const magmablas_dlaset_band = magmablas_dlaset_band_v1

const magmablas_dlaswp = magmablas_dlaswp_v1

const magmablas_dlaswp2 = magmablas_dlaswp2_v1

const magmablas_dlaswp_sym = magmablas_dlaswp_sym_v1

const magmablas_dlaswpx = magmablas_dlaswpx_v1

const magmablas_dsymmetrize = magmablas_dsymmetrize_v1

const magmablas_dsymmetrize_tiles = magmablas_dsymmetrize_tiles_v1

const magmablas_dtrtri_diag = magmablas_dtrtri_diag_v1

const magmablas_dnrm2_adjust = magmablas_dnrm2_adjust_v1

const magmablas_dnrm2_check = magmablas_dnrm2_check_v1

const magmablas_dnrm2_cols = magmablas_dnrm2_cols_v1

const magmablas_dnrm2_row_check_adjust = magmablas_dnrm2_row_check_adjust_v1

const magma_dlarfb_gpu = magma_dlarfb_gpu_v1

const magma_dlarfb_gpu_gemm = magma_dlarfb_gpu_gemm_v1

const magma_dlarfbx_gpu = magma_dlarfbx_gpu_v1

const magma_dlarfg_gpu = magma_dlarfg_gpu_v1

const magma_dlarfgtx_gpu = magma_dlarfgtx_gpu_v1

const magma_dlarfgx_gpu = magma_dlarfgx_gpu_v1

const magma_dlarfx_gpu = magma_dlarfx_gpu_v1

const magmablas_daxpycp = magmablas_daxpycp_v1

const magmablas_dswap = magmablas_dswap_v1

const magmablas_dswapblk = magmablas_dswapblk_v1

const magmablas_dswapdblk = magmablas_dswapdblk_v1

const magmablas_dgemv = magmablas_dgemv_v1

const magmablas_dgemv_conj = magmablas_dgemv_conj_v1

const magmablas_dsymv = magmablas_dsymv_v1

const magmablas_dgemm = magmablas_dgemm_v1

const magmablas_dgemm_reduce = magmablas_dgemm_reduce_v1

const magmablas_dsymm = magmablas_dsymm_v1

const magmablas_dsyr2k = magmablas_dsyr2k_v1

const magmablas_dsyrk = magmablas_dsyrk_v1

const magmablas_dtrsm = magmablas_dtrsm_v1

const magmablas_dtrsm_outofplace = magmablas_dtrsm_outofplace_v1

const magmablas_dtrsm_work = magmablas_dtrsm_work_v1

const magma_idamax = magma_idamax_v1

const magma_idamin = magma_idamin_v1

const magma_dasum = magma_dasum_v1

const magma_daxpy = magma_daxpy_v1

const magma_dcopy = magma_dcopy_v1

const magma_ddot = magma_ddot_v1

const magma_dnrm2 = magma_dnrm2_v1

const magma_drot = magma_drot_v1

const magma_drotm = magma_drotm_v1

const magma_drotmg = magma_drotmg_v1

const magma_dscal = magma_dscal_v1

const magma_dswap = magma_dswap_v1

const magma_dgemv = magma_dgemv_v1

const magma_dger = magma_dger_v1

const magma_dsymv = magma_dsymv_v1

const magma_dsyr = magma_dsyr_v1

const magma_dsyr2 = magma_dsyr2_v1

const magma_dtrmv = magma_dtrmv_v1

const magma_dtrsv = magma_dtrsv_v1

const magma_dgemm = magma_dgemm_v1

const magma_dsymm = magma_dsymm_v1

const magma_dsyr2k = magma_dsyr2k_v1

const magma_dsyrk = magma_dsyrk_v1

const magma_dtrmm = magma_dtrmm_v1

const magma_dtrsm = magma_dtrsm_v1

const magmablas_ctranspose_inplace = magmablas_ctranspose_inplace_v1

const magmablas_ctranspose_conj_inplace = magmablas_ctranspose_conj_inplace_v1

const magmablas_ctranspose = magmablas_ctranspose_v1

const magmablas_ctranspose_conj = magmablas_ctranspose_conj_v1

const magmablas_cgetmatrix_transpose = magmablas_cgetmatrix_transpose_v1

const magmablas_csetmatrix_transpose = magmablas_csetmatrix_transpose_v1

const magmablas_cprbt = magmablas_cprbt_v1

const magmablas_cprbt_mv = magmablas_cprbt_mv_v1

const magmablas_cprbt_mtv = magmablas_cprbt_mtv_v1

const magma_cgetmatrix_1D_col_bcyclic = magma_cgetmatrix_1D_col_bcyclic_v1

const magma_csetmatrix_1D_col_bcyclic = magma_csetmatrix_1D_col_bcyclic_v1

const magma_cgetmatrix_1D_row_bcyclic = magma_cgetmatrix_1D_row_bcyclic_v1

const magma_csetmatrix_1D_row_bcyclic = magma_csetmatrix_1D_row_bcyclic_v1

const magmablas_cgeadd = magmablas_cgeadd_v1

const magmablas_cgeadd2 = magmablas_cgeadd2_v1

const magmablas_clacpy = magmablas_clacpy_v1

const magmablas_clacpy_conj = magmablas_clacpy_conj_v1

const magmablas_clacpy_sym_in = magmablas_clacpy_sym_in_v1

const magmablas_clacpy_sym_out = magmablas_clacpy_sym_out_v1

const magmablas_clange = magmablas_clange_v1

const magmablas_clanhe = magmablas_clanhe_v1

const magmablas_clansy = magmablas_clansy_v1

const magmablas_clarfg = magmablas_clarfg_v1

const magmablas_clascl = magmablas_clascl_v1

const magmablas_clascl_2x2 = magmablas_clascl_2x2_v1

const magmablas_clascl2 = magmablas_clascl2_v1

const magmablas_clascl_diag = magmablas_clascl_diag_v1

const magmablas_claset = magmablas_claset_v1

const magmablas_claset_band = magmablas_claset_band_v1

const magmablas_claswp = magmablas_claswp_v1

const magmablas_claswp2 = magmablas_claswp2_v1

const magmablas_claswp_sym = magmablas_claswp_sym_v1

const magmablas_claswpx = magmablas_claswpx_v1

const magmablas_csymmetrize = magmablas_csymmetrize_v1

const magmablas_csymmetrize_tiles = magmablas_csymmetrize_tiles_v1

const magmablas_ctrtri_diag = magmablas_ctrtri_diag_v1

const magmablas_scnrm2_adjust = magmablas_scnrm2_adjust_v1

const magmablas_scnrm2_check = magmablas_scnrm2_check_v1

const magmablas_scnrm2_cols = magmablas_scnrm2_cols_v1

const magmablas_scnrm2_row_check_adjust = magmablas_scnrm2_row_check_adjust_v1

const magma_clarfb_gpu = magma_clarfb_gpu_v1

const magma_clarfb_gpu_gemm = magma_clarfb_gpu_gemm_v1

const magma_clarfbx_gpu = magma_clarfbx_gpu_v1

const magma_clarfg_gpu = magma_clarfg_gpu_v1

const magma_clarfgtx_gpu = magma_clarfgtx_gpu_v1

const magma_clarfgx_gpu = magma_clarfgx_gpu_v1

const magma_clarfx_gpu = magma_clarfx_gpu_v1

const magmablas_caxpycp = magmablas_caxpycp_v1

const magmablas_cswap = magmablas_cswap_v1

const magmablas_cswapblk = magmablas_cswapblk_v1

const magmablas_cswapdblk = magmablas_cswapdblk_v1

const magmablas_cgemv = magmablas_cgemv_v1

const magmablas_cgemv_conj = magmablas_cgemv_conj_v1

const magmablas_chemv = magmablas_chemv_v1

const magmablas_csymv = magmablas_csymv_v1

const magmablas_cgemm = magmablas_cgemm_v1

const magmablas_cgemm_reduce = magmablas_cgemm_reduce_v1

const magmablas_chemm = magmablas_chemm_v1

const magmablas_csymm = magmablas_csymm_v1

const magmablas_csyr2k = magmablas_csyr2k_v1

const magmablas_cher2k = magmablas_cher2k_v1

const magmablas_csyrk = magmablas_csyrk_v1

const magmablas_cherk = magmablas_cherk_v1

const magmablas_ctrsm = magmablas_ctrsm_v1

const magmablas_ctrsm_outofplace = magmablas_ctrsm_outofplace_v1

const magmablas_ctrsm_work = magmablas_ctrsm_work_v1

const magma_icamax = magma_icamax_v1

const magma_icamin = magma_icamin_v1

const magma_scasum = magma_scasum_v1

const magma_caxpy = magma_caxpy_v1

const magma_ccopy = magma_ccopy_v1

const magma_cdotc = magma_cdotc_v1

const magma_cdotu = magma_cdotu_v1

const magma_scnrm2 = magma_scnrm2_v1

const magma_crot = magma_crot_v1

const magma_csrot = magma_csrot_v1

#const magma_crotm = magma_crotm_v1

#const magma_crotmg = magma_crotmg_v1

const magma_cscal = magma_cscal_v1

const magma_csscal = magma_csscal_v1

const magma_cswap = magma_cswap_v1

const magma_cgemv = magma_cgemv_v1

const magma_cgerc = magma_cgerc_v1

const magma_cgeru = magma_cgeru_v1

const magma_chemv = magma_chemv_v1

const magma_cher = magma_cher_v1

const magma_cher2 = magma_cher2_v1

const magma_ctrmv = magma_ctrmv_v1

const magma_ctrsv = magma_ctrsv_v1

const magma_cgemm = magma_cgemm_v1

const magma_csymm = magma_csymm_v1

const magma_chemm = magma_chemm_v1

const magma_csyr2k = magma_csyr2k_v1

const magma_cher2k = magma_cher2k_v1

const magma_csyrk = magma_csyrk_v1

const magma_cherk = magma_cherk_v1

const magma_ctrmm = magma_ctrmm_v1

const magma_ctrsm = magma_ctrsm_v1

const magmablas_ztranspose_inplace = magmablas_ztranspose_inplace_v1

const magmablas_ztranspose_conj_inplace = magmablas_ztranspose_conj_inplace_v1

const magmablas_ztranspose = magmablas_ztranspose_v1

const magmablas_ztranspose_conj = magmablas_ztranspose_conj_v1

const magmablas_zgetmatrix_transpose = magmablas_zgetmatrix_transpose_v1

const magmablas_zsetmatrix_transpose = magmablas_zsetmatrix_transpose_v1

const magmablas_zprbt = magmablas_zprbt_v1

const magmablas_zprbt_mv = magmablas_zprbt_mv_v1

const magmablas_zprbt_mtv = magmablas_zprbt_mtv_v1

const magma_zgetmatrix_1D_col_bcyclic = magma_zgetmatrix_1D_col_bcyclic_v1

const magma_zsetmatrix_1D_col_bcyclic = magma_zsetmatrix_1D_col_bcyclic_v1

const magma_zgetmatrix_1D_row_bcyclic = magma_zgetmatrix_1D_row_bcyclic_v1

const magma_zsetmatrix_1D_row_bcyclic = magma_zsetmatrix_1D_row_bcyclic_v1

const magmablas_zgeadd = magmablas_zgeadd_v1

const magmablas_zgeadd2 = magmablas_zgeadd2_v1

const magmablas_zlacpy = magmablas_zlacpy_v1

const magmablas_zlacpy_conj = magmablas_zlacpy_conj_v1

const magmablas_zlacpy_sym_in = magmablas_zlacpy_sym_in_v1

const magmablas_zlacpy_sym_out = magmablas_zlacpy_sym_out_v1

const magmablas_zlange = magmablas_zlange_v1

const magmablas_zlanhe = magmablas_zlanhe_v1

const magmablas_zlansy = magmablas_zlansy_v1

const magmablas_zlarfg = magmablas_zlarfg_v1

const magmablas_zlascl = magmablas_zlascl_v1

const magmablas_zlascl_2x2 = magmablas_zlascl_2x2_v1

const magmablas_zlascl2 = magmablas_zlascl2_v1

const magmablas_zlascl_diag = magmablas_zlascl_diag_v1

const magmablas_zlaset = magmablas_zlaset_v1

const magmablas_zlaset_band = magmablas_zlaset_band_v1

const magmablas_zlaswp = magmablas_zlaswp_v1

const magmablas_zlaswp2 = magmablas_zlaswp2_v1

const magmablas_zlaswp_sym = magmablas_zlaswp_sym_v1

const magmablas_zlaswpx = magmablas_zlaswpx_v1

const magmablas_zsymmetrize = magmablas_zsymmetrize_v1

const magmablas_zsymmetrize_tiles = magmablas_zsymmetrize_tiles_v1

const magmablas_ztrtri_diag = magmablas_ztrtri_diag_v1

const magmablas_dznrm2_adjust = magmablas_dznrm2_adjust_v1

const magmablas_dznrm2_check = magmablas_dznrm2_check_v1

const magmablas_dznrm2_cols = magmablas_dznrm2_cols_v1

const magmablas_dznrm2_row_check_adjust = magmablas_dznrm2_row_check_adjust_v1

const magma_zlarfb_gpu = magma_zlarfb_gpu_v1

const magma_zlarfb_gpu_gemm = magma_zlarfb_gpu_gemm_v1

const magma_zlarfbx_gpu = magma_zlarfbx_gpu_v1

const magma_zlarfg_gpu = magma_zlarfg_gpu_v1

const magma_zlarfgtx_gpu = magma_zlarfgtx_gpu_v1

const magma_zlarfgx_gpu = magma_zlarfgx_gpu_v1

const magma_zlarfx_gpu = magma_zlarfx_gpu_v1

const magmablas_zaxpycp = magmablas_zaxpycp_v1

const magmablas_zswap = magmablas_zswap_v1

const magmablas_zswapblk = magmablas_zswapblk_v1

const magmablas_zswapdblk = magmablas_zswapdblk_v1

const magmablas_zgemv = magmablas_zgemv_v1

const magmablas_zgemv_conj = magmablas_zgemv_conj_v1

const magmablas_zhemv = magmablas_zhemv_v1

const magmablas_zsymv = magmablas_zsymv_v1

const magmablas_zgemm = magmablas_zgemm_v1

const magmablas_zgemm_reduce = magmablas_zgemm_reduce_v1

const magmablas_zhemm = magmablas_zhemm_v1

const magmablas_zsymm = magmablas_zsymm_v1

const magmablas_zsyr2k = magmablas_zsyr2k_v1

const magmablas_zher2k = magmablas_zher2k_v1

const magmablas_zsyrk = magmablas_zsyrk_v1

const magmablas_zherk = magmablas_zherk_v1

const magmablas_ztrsm = magmablas_ztrsm_v1

const magmablas_ztrsm_outofplace = magmablas_ztrsm_outofplace_v1

const magmablas_ztrsm_work = magmablas_ztrsm_work_v1

const magma_izamax = magma_izamax_v1

const magma_izamin = magma_izamin_v1

const magma_dzasum = magma_dzasum_v1

const magma_zaxpy = magma_zaxpy_v1

const magma_zcopy = magma_zcopy_v1

const magma_zdotc = magma_zdotc_v1

const magma_zdotu = magma_zdotu_v1

const magma_dznrm2 = magma_dznrm2_v1

const magma_zrot = magma_zrot_v1

const magma_zdrot = magma_zdrot_v1

#const magma_zrotm = magma_zrotm_v1

#const magma_zrotmg = magma_zrotmg_v1

const magma_zscal = magma_zscal_v1

const magma_zdscal = magma_zdscal_v1

const magma_zswap = magma_zswap_v1

const magma_zgemv = magma_zgemv_v1

const magma_zgerc = magma_zgerc_v1

const magma_zgeru = magma_zgeru_v1

const magma_zhemv = magma_zhemv_v1

const magma_zher = magma_zher_v1

const magma_zher2 = magma_zher2_v1

const magma_ztrmv = magma_ztrmv_v1

const magma_ztrsv = magma_ztrsv_v1

const magma_zgemm = magma_zgemm_v1

const magma_zsymm = magma_zsymm_v1

const magma_zhemm = magma_zhemm_v1

const magma_zsyr2k = magma_zsyr2k_v1

const magma_zher2k = magma_zher2k_v1

const magma_zsyrk = magma_zsyrk_v1

const magma_zherk = magma_zherk_v1

const magma_ztrmm = magma_ztrmm_v1

const magma_ztrsm = magma_ztrsm_v1

const magmablas_dsaxpycp = magmablas_dsaxpycp_v1

const magmablas_dslaswp = magmablas_dslaswp_v1

const magmablas_dlag2s = magmablas_dlag2s_v1

const magmablas_slag2d = magmablas_slag2d_v1

const magmablas_dlat2s = magmablas_dlat2s_v1

const magmablas_slat2d = magmablas_slat2d_v1

const magmablas_zcaxpycp = magmablas_zcaxpycp_v1

const magmablas_zclaswp = magmablas_zclaswp_v1

const magmablas_zlag2c = magmablas_zlag2c_v1

const magmablas_clag2z = magmablas_clag2z_v1

const magmablas_zlat2c = magmablas_zlat2c_v1

const magmablas_clat2z = magmablas_clat2z_v1
